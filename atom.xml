<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小土刀]]></title>
  <subtitle><![CDATA[Agony is my triumph]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-20T20:15:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[wdxtub]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[云计算 第 9 课 Sequential Programming]]></title>
    <link href="http://yoursite.com/2016/01/20/cc-9/"/>
    <id>http://yoursite.com/2016/01/20/cc-9/</id>
    <published>2016-01-20T20:05:54.000Z</published>
    <updated>2016-01-20T20:15:30.000Z</updated>
    <content type="html"><![CDATA[<p>这一讲我们就要开始实际接触一个真实的项目——处理一个大文本数据集了。在云上编程和平时学习的可能有一些不同，这里会尽量写得详细一些。</p>
<a id="more"></a>
<hr>
<p>先来具体说说这节课的任务：</p>
<ol>
<li>用顺序执行的程序在云上处理一个大文本数据集。</li>
<li>在这个过程中了解顺序方法的限制</li>
</ol>
<p>这次我们会在特定的 AMI(可以理解为系统镜像)上进行操作，注意不能用外部依赖（也就是不能 <code>sudo apt-get install</code> 任何软件或库，即使装了在测试的时候也没办法运行）</p>
<p>数据集来自维基的<a href="http://dumps.wikimedia.org/other/pagecounts-raw/" target="_blank" rel="external">页面访问统计数据 hourly page view statistics</a></p>
<h2 id="u5173_u4E8E_u6570_u636E_u96C6"><a href="#u5173_u4E8E_u6570_u636E_u96C6" class="headerlink" title="关于数据集"></a>关于数据集</h2><p><code>Wikimedia</code> 会维护所有保存在服务器的对象的每小时页面访问数据并以开放数据集的形式给大家使用。我们会使用这些数据来分析一定时间内页面浏览的趋势。</p>
<p><img src="/images/14532371430507.jpg" alt=""><br>A simplified diagram of a page access form Wikimedia. <a href="http://en.wikipedia.org/wiki/Wikimedia_Foundation#Hardware" target="_blank" rel="external">More information</a></p>
<p>每个对于维基服务器的请求会被当做一个 <a href="http://en.wikipedia.org/wiki/Squid_%28software%29" target="_blank" rel="external">squid cache proxy</a> 来进行处理，同时也会把这些请求记录到日志中。这些日志每个小时更新，大家都可以访问。文件里的每一行对应着一次访问记录，格式如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[项目名称] [页面标题] [访问次数] [总共返回的字节数]</span><br></pre></td></tr></table></figure>
<p><code>[项目名称]</code>包括两个部分，一个是语言标识符和一个子项目后缀，具体如下：</p>
<ul>
<li><code>(no suffix)</code> : wikipedia</li>
<li><code>.b</code> : wikibooks</li>
<li><code>.d</code> : wiktionary</li>
<li><code>.m</code> : wikimedia</li>
<li><code>.mw</code> : wikipedia mobile</li>
<li><code>.n</code> : wikinews</li>
<li><code>.q</code> : wikiquote</li>
<li><code>.s</code> : wikisource</li>
<li><code>.v</code> : wikiversity</li>
<li><code>.w</code> : mediawiki</li>
</ul>
<p>举个例子，假设有一行是这样的：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fr.b <span class="constant">Special</span><span class="symbol">:Recherche/All_Mixed_Up</span> <span class="number">1</span> <span class="number">730</span></span><br></pre></td></tr></table></figure>
<p>就说明这条记录的产生是因为有人访问了 <code>French Wikibooks</code> 中的 <code>Special:Recherche/All_Mixed_Up</code> 页面 1 次，并且总共传输了 730 个字节。</p>
<p>这个项目中，我们主要会分析 2015 年 12 月的数据。不过现在我们只需要处理 12 月 1 日的第一个小时的数据。数据在 <code>s3://cmucc-datasets/wikipediatraf/201512/pagecounts-20151201-000000.gz</code>。可以使用 <code>aws-cli</code>, <code>s3cmd</code> 或者 S3 查看器来了解。但是在服务器上，就需要用 <code>wget</code> 来下载了，具体的地址是 <a href="https://cmucc-datasets.s3.amazonaws.com/wikipediatraf/201512/pagecounts-20151201-000000.gz" target="_blank" rel="external">https://cmucc-datasets.s3.amazonaws.com/wikipediatraf/201512/pagecounts-20151201-000000.gz</a></p>
<p>命令为 <code>wget https://cmucc-datasets.s3.amazonaws.com/wikipediatraf/201512/pagecounts-20151201-000000.gz</code></p>
<p>如果不是很了解如何访问 Amazon S3，可以回头看看<a href="http://wdxtub.com/2016/01/15/cc-2/" target="_blank" rel="external">云计算 第 2 课 AWS 简介</a></p>
<h3 id="Data_Filtering"><a href="#Data_Filtering" class="headerlink" title="Data Filtering"></a>Data Filtering</h3><p>简单来说，我们要从维基的访问数据中，用各类数据分析的方法，看看能不能找到些什么有意思的东西。</p>
<p>我们会先从第一个小时的维基流量日志开始分析，主要关注英文维基的内容。这种从完整数据的一个子集开始测试起并最终应用到全部数据的方法，在之后的项目中会很有用。</p>
<p>我们先使用 <code>ami-95e9cdff</code>（社区 AMI 中）来创建一个 <code>t1.micro</code> 实例，记得在右上角把地区切换为 <code>弗吉尼亚北部</code>。允许 SSH 和 HTTP 连接（可以使用之前的安全组）。像下面这样：</p>
<p><img src="/images/14533207601658.jpg" alt=""></p>
<p>这里我选择的是竞价型实例（因为会便宜一点），但需要注意的是申请成功之后一定要注意重新打上标签：<code>{&quot;Key&quot;:&quot;Project&quot;,&quot;Value&quot;:&quot;1.1&quot;}</code>。</p>
<p>然后我们耐心等待实例创建，</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一讲我们就要开始实际接触一个真实的项目——处理一个大文本数据集了。在云上编程和平时学习的可能有一些不同，这里会尽量写得详细一些。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://yoursite.com/tags/AWS/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="文本处理" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 6 课 Machine Control]]></title>
    <link href="http://yoursite.com/2016/01/20/csapp-6/"/>
    <id>http://yoursite.com/2016/01/20/csapp-6/</id>
    <published>2016-01-20T16:15:32.000Z</published>
    <updated>2016-01-20T17:57:01.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲我们了解了关于机器代码，汇编和 CPU 相关的基础知识，这一讲要来说一下具体机器是怎么实现代码中常见的流程控制的。这一部分涉及的代码和思路稍微有些不容易理解，我会尽量写得详细一些。</p>
<a id="more"></a>
<hr>
<p>我们先来回顾一下 x86-64 处理器中不同的寄存器，这一部分很重要，务必要弄明白：</p>
<p><img src="/images/14533022194673.jpg" alt=""></p>
<p>首先要理解的是，寄存器中存储着当前正在执行的程序的相关信息：</p>
<ul>
<li>临时数据存放在 (%rax, …)</li>
<li>运行时栈的地址存储在 (%rsp) 中</li>
<li>目前的代码控制点存储在 (%rip, …) 中</li>
<li>目前测试的状态放在 CF, ZF, SF, OF 中</li>
</ul>
<h2 id="Condition_Codes"><a href="#Condition_Codes" class="headerlink" title="Condition Codes"></a>Condition Codes</h2><p>最后的四个寄存器（CF, ZF, SF, OF）就是用来辅助程序的流程控制的，意思是：</p>
<ul>
<li>CF: Carry Flag (for unsigned)</li>
<li>ZF: Zero Flag</li>
<li>SF: Sign Flag (for signed)</li>
<li>OF: Overflow Flag (for signed)</li>
</ul>
<p>可以看到以上这四个寄存器，表示四种不同的状态，举个例子，假如我们有一条诸如 <code>t = a + b</code> 的语句，汇编之后假设用的是 <code>addq Src, Dest</code>，那么根据这个操作结果的不同，会相应设置上面提到的四个寄存器，而因为这个是执行类似操作时顺带尽心设置的，称为隐式设置，例如：</p>
<ul>
<li>如果两个数相加，在最高位还需要进位（也就是溢出了），那么 CF 寄存器就会被设置</li>
<li>如果 t 等于 0，那么 ZF 寄存器会被设置</li>
<li>如果 t 小于 0，那么 SF 寄存器会被设置</li>
<li>如果 2’s complement 溢出，那么 OF 寄存器会被设置为 1（溢出的情况是 <code>(a&gt;0 &amp;&amp; b &gt; 0 &amp;&amp; t &lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</code>）</li>
</ul>
<p>这就发现了，其实这四个条件代码，是用来标记上一条命令的结果的各种可能的，是自动会进行设置的。注意，使用 <code>leaq</code> 指令的话不会进行设置。</p>
<p>除了隐形设置，还可以显式进行设置，具体的方法是使用 <code>cmpq</code> 指令，这里的 q 指的是 64 位的地址。具体来说 <code>cmpq Src2(b), Src1(a)</code> 等同于计算 <code>a-b</code>（注意 a b 顺序是颠倒的），然后利用 <code>a-b</code> 的结果来对应进行条件代码的设置：</p>
<ul>
<li>如果在最高位还需要进位（也就是溢出了），那么 CF 寄存器就会被设置</li>
<li>a 和 b 相等时，也就是 <code>a-b</code> 等于零时，ZF 寄存器会被设置</li>
<li>如果 a &lt; b，也就是 <code>(a-b)&lt;0</code> 时，那么 SF 寄存器会被设置</li>
<li>如果 2’s complement 溢出，那么 OF 寄存器会被设置（溢出的情况是 <code>(a&gt;0 &amp;&amp; b &gt; 0 &amp;&amp; t &lt;0) || (a&lt;0 &amp;&amp; b&lt;0 &amp;&amp; t&gt;=0)</code>）</li>
</ul>
<p>另一种进行显式设置的方法是使用 <code>testq</code> 指令，具体来说 <code>testq Src2(b), Src1(a)</code> 等同于计算 <code>a&amp;b</code>（注意 a b 顺序是颠倒的），然后利用 <code>a-b</code> 的结果来对应进行条件代码的设置，通常来说会把其中一个操作数作为 mask：</p>
<ul>
<li>当 <code>a&amp;b == 0</code> 时，ZF 寄存器会被设置</li>
<li>当 <code>a&amp;b &lt; 0</code> 时，SF 寄存器会被设置</li>
</ul>
<p>有了这四个条件码，就可以通过不同的组合方式，来产生不同的条件判断，例如：</p>
<p><img src="/images/14533038073018.jpg" alt=""></p>
<p>具体来说只会设置最右边的一个 byte（也就是 %al 的部分），其他的都不会改变（通过下面的例子会更清晰）</p>
<p><img src="/images/14533038709749.jpg" alt=""></p>
<p>举个例子，假设我们有一条这样的语句，用来判断 x 和 y 的大小，转换成汇编之后，有几个需要注意的地方，一是 %rsi 存的是 y，%rdi 存的是 x，这个就是前面说的顺序问题。然后我们设置最右边的一个 byte（也就是 %al 的部分，见上图），最后利用 <code>movzbl</code> 指令把返回值复制到 %eax 寄存器中。</p>
<p><img src="/images/14533041584630.jpg" alt=""></p>
<p>这里有一点要进行说明，到底 %eax 寄存器在哪里呢？图上怎么没有？其实 %eax 就是 %rax 寄存器的后 32 位的名称。</p>
<p>那为什么我们要用 32 位的指令呢，剩下的高位怎么办？这是因为在 x86-64 的架构设计中有一条规则『如果对 64 位寄存器设置 32 位数据，那么高位会被设置为 0』，所以可以通过 32 位的指令对 %eax 进行操作处理（如果忽略这个很容易让人困惑），相当于是处理好了 64 位的 %rax 寄存器。</p>
<h2 id="Condition_Branch"><a href="#Condition_Branch" class="headerlink" title="Condition Branch"></a>Condition Branch</h2><p>介绍完了条件代码，就可以来看看具体的跳转了，跳转实际上就是根据条件代码的不同，来进行跳转，具体如下：</p>
<p><img src="/images/14533045268420.jpg" alt=""></p>
<p>我们先来看一个比较原始的例子（编译器没有进行主要优化）：</p>
<p><img src="/images/14533045995659.jpg" alt=""></p>
<p>这里我们是要给出两个数的绝对值的差，所以需要判断谁大谁小，蓝色和红色的部分就分别代表两条分支。考虑到汇编不算特别直观，这里我们用 goto 语句重写一次，基本上就和汇编出来的代码逻辑类似了，方便之后的讲解：</p>
<p><img src="/images/14533047116967.jpg" alt=""></p>
<p>我们再看另一种条件语句要如何翻译，比如 <code>val = Test ? Then_Expr : Else_Expr;</code>，重写上面的函数就是：<code>val = x&gt;y ? x-y : y-x;</code></p>
<p>转换成 goto 形式就是：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">	ntest = <span class="comment">!Test;</span></span><br><span class="line">	<span class="keyword">if</span> (ntest) <span class="keyword">goto</span> <span class="keyword">Else</span>;</span><br><span class="line">	<span class="keyword">value</span> = Then_Expr;</span><br><span class="line">	<span class="keyword">goto</span> Done;</span><br><span class="line"><span class="keyword">Else</span>:</span><br><span class="line">	val = Else_Expr;</span><br><span class="line">Done:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>但是实际上汇编出来的代码，并不是这样的，会采用另一种方法来加速分支语句的执行。现在我们先来说一说，为什么分支语句会对性能造成很大的影响。</p>
<p>我们知道现在的 CPU 都是依靠流水线工作的，比方说执行一系列操作需要 ABCDE 五个步骤，那么在执行 A 的时候，实际上执行 B 所需的数据会在执行 A 的同时加载到寄存器中，这样运算器执行外 A，就可以立刻执行 B 而无须等待数据载入。如果程序一直是顺序的，那么这个过程就可以一直进行下去，效率会很高。但是一旦遇到分支，那么可能执行完 A 下一步要执行的是 C，但是载入的数据是 B，这时候就要把流水线清空（因为后面载入的东西都错了），然后重新载入 C 所需要的数据，这就带来了很大的性能影响。为此人们常常用『分支预测』这一技术来解决（分支预测是另一个话题这里不展开），但是对于这类只需要判断一次的条件语句来说，其实有更好的方法。</p>
<p>处理器有一条指令支持 <code>if(Test) Dest &lt;- Src</code> 的操作，也就是说可以不用跳转，利用条件代码来进行赋值，于是编译器在可能的时候会把上面的 goto 程序改成如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = Then_Expr;</span><br><span class="line">eval = Else_Expr;</span><br><span class="line">nt = !Test;</span><br><span class="line"><span class="keyword">if</span> (nt) result = eval;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>具体的做法是：反正一共就两个分支，我都算出行不行，然后利用上面的条件指令来进行赋值，这样就完美避免了因为分支可能带来的性能问题（需要清空流水线），像下面这样：</p>
<p><img src="/images/14533057292618.jpg" alt=""></p>
<p>这个方法好是好，但是也有一些情况并不适用于：</p>
<ul>
<li>因为会把两个分支的运算都提前算出来，如果这两个值都需要大量计算的话，就得不偿失了，所以需要分支中的计算尽量简单。</li>
<li>另外在涉及指针操作的时候，如 <code>val = p ? *p : 0;</code>，因为两个分支都会被计算，所以可能导致奇怪问题出现</li>
<li>最后一种就是如果分支中的计算是有副作用的，那么就不能这样弄 <code>val = x &gt; 0 ? x*= 7 : x+= 3;</code>，这种情况下，因为都计算了，那么 x 的值肯定就不是我们想要的了。</li>
</ul>
<h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><p>先来看看并不那么常用的 Do-While 语句：</p>
<p><img src="/images/14533062342446.jpg" alt=""></p>
<p>这个函数计算参数 x 中有多少位是 1，翻译成汇编如下：</p>
<p><img src="/images/14533063334333.jpg" alt=""></p>
<p>其中 %rdi 中存储的是参数 x，%rax 存储的是返回值。换成更通用的形式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C Code</span></span><br><span class="line"><span class="function"><span class="keyword">do</span></span><br><span class="line">	Body</span><br><span class="line">	<span class="title">while</span> <span class="params">(Test)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goto Version</span></span><br><span class="line">loop:</span><br><span class="line">	<span class="function">Body</span><br><span class="line">	<span class="title">if</span> <span class="params">(Test)</span></span><br><span class="line">		<span class="keyword">goto</span> loop</span></span><br></pre></td></tr></table></figure>
<p>而对于 While 语句的转换，会直接跳到中间，如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C While version</span></span><br><span class="line"><span class="keyword">while</span> (Test)</span><br><span class="line">	Body</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goto Version</span></span><br><span class="line">	<span class="keyword">goto</span> test;</span><br><span class="line">loop:</span><br><span class="line">	Body</span><br><span class="line">test:</span><br><span class="line">	<span class="keyword">if</span> (Test)</span><br><span class="line">		<span class="keyword">goto</span> loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>
<p>举个具体的例子：</p>
<p><img src="/images/14533065773830.jpg" alt=""></p>
<p>如果在编译器中开启 <code>-O1</code> 优化，那么会把 While 先翻译成 Do-While，然后再转换成对应的 Goto 版本：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C While version</span></span><br><span class="line"><span class="keyword">while</span> (Test)</span><br><span class="line">	Body</span><br><span class="line"></span><br><span class="line"><span class="comment">// C Do-While Version</span></span><br><span class="line">	<span class="keyword">if</span> (!Test)</span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">	<span class="function"><span class="keyword">do</span></span><br><span class="line">		Body</span><br><span class="line">		<span class="title">while</span><span class="params">(Test)</span></span>;</span><br><span class="line">done:</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goto Version</span></span><br><span class="line">	<span class="keyword">if</span> (!Test)</span><br><span class="line">		<span class="keyword">goto</span> done;</span><br><span class="line">loop:</span><br><span class="line">	<span class="function">Body</span><br><span class="line">	<span class="title">if</span> <span class="params">(Test)</span></span><br><span class="line">		<span class="keyword">goto</span> loop</span>;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>
<p>具体的例子是：</p>
<p><img src="/images/14533068824241.jpg" alt=""></p>
<p>为什么要这样做呢，因为 Do-While 语句执行起来更快，更符合 CPU 的运算模型。</p>
<p>然后来看看最常用的 For 循环，也可以一步一步转换成 While 的形式，如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For</span></span><br><span class="line"><span class="keyword">for</span> (Init; Test; Update)</span><br><span class="line">	Body</span><br><span class="line">	</span><br><span class="line"><span class="comment">// While Version</span></span><br><span class="line">Init;</span><br><span class="line"><span class="keyword">while</span> (Test) &#123;</span><br><span class="line">	Body</span><br><span class="line">	Update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在具体转换成 Do-While 模式的时候，会把最初的测试优化去除</p>
<p><img src="/images/14533070757433.jpg" alt=""></p>
<h2 id="Switch_Statement"><a href="#Switch_Statement" class="headerlink" title="Switch Statement"></a>Switch Statement</h2><p>最后我们来看看最复杂的 switch 语句，这种类型的语句一次判断会有多种可能的跳转路径（知道 CPU 的分支预测会多抓狂吗）。这里用一个具体的例子来进行讲解：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">switch_eg</span> <span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y, <span class="keyword">long</span> z)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> w = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (x) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			w = y*z;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			w = y/z;</span><br><span class="line">			<span class="comment">// fall through</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			w += z;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			w -= z;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			w = <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子中包含了大部分比较特殊的情况：</p>
<ul>
<li>共享的条件：5 和 6</li>
<li>fall through：2 也会执行 3 的部分（这个要小心，一般来说不这么搞，如果确定要用，务必写上注释）</li>
<li>缺失的条件：4</li>
</ul>
<p>具体怎么办呢？简单来说，使用跳转表（你会发现表的解决方式在很多地方都有用：虚函数，继承甚至动态规划），如下所示：</p>
<p><img src="/images/14533075034521.jpg" alt=""></p>
<p>转换出来如下：</p>
<p><img src="/images/14533079929851.jpg" alt=""></p>
<p>这里需要注意，我们先跟 6 进行比较（因为 6 是最大的），然后利用 <code>ja</code> 指令进行跳转，为什么，因为如果是负数的话，<code>ja</code> 是处理无符号数的，所以负数情况肯定大于 6，于是直接利用 <code>ja</code> 跳转到 default 的分支。</p>
<p><img src="/images/14533081508060.jpg" alt=""></p>
<p>然后下一句 <code>jmp *.L4(,%rdi, 8) # goto *JTab[x]</code>，是一个间接跳转，通过看上面的跳转列表来进行跳转。</p>
<p>比如说，直接跳转 <code>jmp .L8</code>，就直接跳到 <code>.L8</code> 所在的标签，也就是 x = 0</p>
<p>如果是 <code>jmp *.L4(,%rdi,8)</code> 那么就先找到 <code>.L4</code> 然后往后找 8 个字节（或 8 的倍数），于是就是 0~6 的范围。具体的对应关系如下：</p>
<p><img src="/images/14533122886722.jpg" alt=""></p>
<p>处理 fall through 的方式：</p>
<p><img src="/images/14533123220172.jpg" alt=""></p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>这节课我们学到了</p>
<ul>
<li>C 语言的控制流程<ul>
<li>if-then-else</li>
<li>do-while</li>
<li>while, for</li>
<li>switch</li>
</ul>
</li>
<li>汇编的控制流程<ul>
<li>条件跳转</li>
<li>条件转移</li>
<li>间接跳转（通过跳转表）</li>
<li>编译器会生成代码序列来实现更加复杂的控制</li>
</ul>
</li>
<li>标准技术<ul>
<li>把循环转换位 do-while 的形式或者 jump-to-middle 形式</li>
<li>大的 switch 语句会用跳转表</li>
<li>处理 switch 语句可能会用到决策树（if-elseif-elseif-else）</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲我们了解了关于机器代码，汇编和 CPU 相关的基础知识，这一讲要来说一下具体机器是怎么实现代码中常见的流程控制的。这一部分涉及的代码和思路稍微有些不容易理解，我会尽量写得详细一些。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="组成原理" scheme="http://yoursite.com/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一点微小的工作]]></title>
    <link href="http://yoursite.com/2016/01/19/a-little-work/"/>
    <id>http://yoursite.com/2016/01/19/a-little-work/</id>
    <published>2016-01-20T04:40:52.000Z</published>
    <updated>2016-01-20T05:35:16.000Z</updated>
    <content type="html"><![CDATA[<p>可能很久之后回忆这段留学的时光，让自己开心的不是绩点和景点，而是朋友，和一点微小的工作。</p>
<a id="more"></a>
<hr>
<p>先说主题：我在把这个学期上的课程以及自己的学习经历以日志的形式记录并共享出来，一是督促自己更深刻理解所学知识，二是让更多人能够接触到高质量的教学课程。希望能以这一点微小的工作，帮助更多人。也希望大家也能更多地把自己学习和思考的东西写出来分享出来，真正去创造些高质量的可以传承的东西。</p>
<p>（以下是目前正在进行的三门课程的文章列表）</p>
<p><img src="/images/list.jpg" alt="list"></p>
<p>为什么在做这样一件事情呢？</p>
<p>本科在中山大学读完之后（还度过了一段研究生时光），来到 CMU，才真切地感受到国内外教育质量的差距。高兴的是能有机会接触到最顶尖的教育，惭愧的是只能独善吾身，却不能兼济天下。即使心里想着做些什么去改变这种状况，却迟迟没有动手。每每念及高中同学向芯，除了佩服她（以及她的小伙伴）多年如一日勉力经营青草（『让中国青少年成为有爱，有思想，有行动力的人』，参考<a href="http://www.douban.com/note/258430473/" target="_blank" rel="external">这里</a>），还在想，作为我这样一个资质平平也没有治国平天下理想的普通青年，能做些什么。</p>
<p>至少我能把我所学所想写下来，让更多人能通过我的文字，来了解『教育也可以是这样的』。南非前总统曼德拉曾经说：“如果你隐藏自己，不敢让别人看到你如何做自己喜欢的事，别人就会认为，他们也不能做到。但如果你让他们看见，就等于允许他们像你一样去做自己喜欢的事，就等于解放了他们的愿望。这并不是说要让他们去做和你一样的事，而是让每一个都做最适合自己、自己最希望做的事。”</p>
<p>这也是为什么，我想要把这些写下来的原因。</p>
<p>本来是打算等学期结束再整理分享，但是想到早一些分享，可能就会多一些人参与。虽然可能目前有各种各样的错漏，但是相信在大家的监督点拨下，我们都能做得更好。</p>
<p>我不大会起那些特别吸引眼球的标题，更多是想踏踏实实把一件事情坚持下来，如果可能的话，做得尽量好一些。也希望能用自己这一点微小的工作，让大家看到，即使是小小的贡献，积累起来也能是大大的改变。</p>
<p>具体的文章目录可以在<a href="http://wdxtub.com/about/" target="_blank" rel="external">这里</a>查看，欢迎加我的个人微信交流讨论</p>
<p>更希望能帮忙转发一下，让更多人能看到并参与进来。</p>
<p><img src="/images/me.jpeg" alt="me"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可能很久之后回忆这段留学的时光，让自己开心的不是绩点和景点，而是朋友，和一点微小的工作。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="课程" scheme="http://yoursite.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="Gossip" scheme="http://yoursite.com/categories/Gossip/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 8 课 Choosing Connectors]]></title>
    <link href="http://yoursite.com/2016/01/19/sad-8/"/>
    <id>http://yoursite.com/2016/01/19/sad-8/</id>
    <published>2016-01-19T13:24:49.000Z</published>
    <updated>2016-01-20T01:51:10.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲中我们了解了连接器的基本概念，这一讲我们来看看，在这么多不同的选项中，如何找到最适合项目的连接器。</p>
<a id="more"></a>
<hr>
<p>具体到连接器的选择，涉及到选择，我们就应该意识到，上一讲其实是了解了选项，这一讲来说说如何选择。但是实话说，不要说一讲能说清楚，一百讲估计都不行，因为对于现实生活来说，本来就没有十全十美的选择。</p>
<p>工程没有人生这么复杂，可是需要考虑的东西仍然太多，看得到的是几个选项，看不到的是选项背后错综复杂的关系网。就拿连接器来说，基本功能，如何交互，这是需要考虑的，交互下面分几个大方向：communication, coordination, conversion, facilitation，根据这些选择合适的类型，确定作用的范围，再根据实际需要进行组合。</p>
<p>一个描述交互的模型，叫做 Interconnection models(IM)，从微观到宏观有三个层次：unit, syntactic, semantic。接下来简要介绍一下这几个不同的层级</p>
<h2 id="Unit_Interconnection"><a href="#Unit_Interconnection" class="headerlink" title="Unit Interconnection"></a>Unit Interconnection</h2><p>定义了不同系统单元（组件，模块合作文件）之间的关系，最基础的单元关系就是依赖。下面是一些例子：</p>
<p><img src="/images/14532537450817.jpg" alt=""><br>是比较粗粒度的静态相互连接，并不能描述组件之间的交互，主要是集中于相关性的描述</p>
<h2 id="Syntactic_Interconnection"><a href="#Syntactic_Interconnection" class="headerlink" title="Syntactic Interconnection"></a>Syntactic Interconnection</h2><p>描述句法元素间的关系，比方说变量定义和使用，函数的声明和调用。下面是一些例子：</p>
<p><img src="/images/14532538558847.jpg" alt=""><br>是比较细粒度的相互连接，可以是动态也可以是静态的。但是实际上是不完整的相互连接的描述，因为可能在语义层级是不允许的。</p>
<h2 id="Semantic_Interconnection"><a href="#Semantic_Interconnection" class="headerlink" title="Semantic Interconnection"></a>Semantic Interconnection</h2><p>描述系统组件如何被使用，可以正规进行定义：</p>
<ul>
<li>前条件</li>
<li>后条件</li>
<li>动态交互协议（例如 CSP, FSM）</li>
</ul>
<p>举个例子：</p>
<p><img src="/images/14532542194874.jpg" alt=""></p>
<p>基于 syntactic interconnections，可以是静态或者动态的，在架构层面是必须的，包括大的组件，复杂的交互以及组件重用。当然还有其他很多东西要考虑，如：鲁棒性，可靠性，安全性，可用性等等。</p>
<h2 id="u7EC4_u5408_u57FA_u672C_u7684_u8FDE_u63A5_u5668"><a href="#u7EC4_u5408_u57FA_u672C_u7684_u8FDE_u63A5_u5668" class="headerlink" title="组合基本的连接器"></a>组合基本的连接器</h2><p>许多时候我们需要组合多个连接器，但是要注意，不是所有的都可以搭配，有些是会相互冲突的，并且各有各的妥协。它们的关系为：</p>
<p><img src="/images/14532544518305.jpg" alt=""></p>
<p>其实是有一张很大的表格：</p>
<p><img src="/images/14532545047453.jpg" alt=""></p>
<p>这里不展开，不过列出一些知名的复合连接器：</p>
<ul>
<li>Grid Connectors(e.g. Globus)<ul>
<li>Procedure call</li>
<li>Data access</li>
<li>Stream</li>
<li>Distributor</li>
</ul>
</li>
<li>Peer-to-peer connectors (e.g. Bittorrent)<ul>
<li>Arbitrator</li>
<li>Data access</li>
<li>Stream</li>
<li>Distributor</li>
</ul>
</li>
<li>Client-server connectors</li>
<li>Event-based connectors</li>
</ul>
<p>这一讲的内容就这么多，其实还是蛮抽象的，之后的习题课会用具体的例子来分析，现在大概感受一下即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲中我们了解了连接器的基本概念，这一讲我们来看看，在这么多不同的选项中，如何找到最适合项目的连接器。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 7 课 Software Connectors]]></title>
    <link href="http://yoursite.com/2016/01/19/sad-7/"/>
    <id>http://yoursite.com/2016/01/19/sad-7/</id>
    <published>2016-01-19T13:22:16.000Z</published>
    <updated>2016-01-20T00:53:05.000Z</updated>
    <content type="html"><![CDATA[<p>在了解了整体的框架之后，这节课我们来看架构中很重要的一部分——连接器。这里主要是一些概念和设计的介绍。</p>
<a id="more"></a>
<hr>
<p>我们首先要回答的问题就是：什么是连接器？</p>
<p>连接器是一个架构元素，负责组件之间的交互。组件之间的交互可以很简单，比如过程调用和共享变量访问，当然也可以很复杂，比如说客户端-服务端协议，数据库访问协议或者异步事件广播。所以总体来看，每个连接器要保证交互的方式和内容。</p>
<p><img src="/images/14532500030394.jpg" alt=""><br>看看上面的图，就会发现，好像找不到所谓的连接器。的确，连接器在具体的实现中，可能没有明确的代码和实体，反而是一种分布式的实现，横跨不同的模块和交互机制。</p>
<p>但是在软件架构中，连接器是一等实体，有具体的身份，用来描述所有的系统交互。</p>
<p>可能有同学要问，为什么代码里没有，非要在概念上独立出来呢？</p>
<p>因为连接器和组件不同，组件提供应用相关的功能，而连接器是提供应用无关的交互机制，一旦交互变得复杂，这种抽象就非常有用。至少有如下好处：</p>
<ol>
<li>分离计算和交互</li>
<li>最小化组件间的相互依赖</li>
<li>支持软件的演化</li>
<li>支持动态设计</li>
<li>方便多种实现方式</li>
<li>易于分布式</li>
<li>有助于系统分析和测试</li>
</ol>
<p>连接器主要扮演下面的角色：</p>
<ul>
<li>是不同组件交互的地方</li>
<li>定义协议规范的属性<ul>
<li>支持的接口类型</li>
<li>保证交互属性</li>
<li>交互顺序规则</li>
<li>性能</li>
</ul>
</li>
<li>负责 communication, coordination, conversion, facilitation</li>
</ul>
<p>作为 communicator，连接器支持不同的通信机制，例如过程调用，RPC，共享数据访问，消息传递；同时限制规范通信的结构和方向，也保证服务质量。更重要的是，可以分离通信与计算，可能会影响到非功能性的系统特性（如性能，可拓展性，安全性）</p>
<p>作为 coordinator，连接器控制计算和数据传递，分离控制和计算，让 communication, conversion 和 facilitation 正交，互不影响。</p>
<p>作为 converter，连接器使得交互可以独立设计，解耦不同的组件（类型，数量，频次，顺序），比如 Adaptor 和 Wrapper</p>
<p>作为 facilitator，连接器让不同的组件协同工作，控制共享信息的访问，保证性能（负载均衡）以及提供同步机制（关键区，Monitor）</p>
<p>总结一下，常见的连接器类型有：</p>
<ul>
<li>Procedure call</li>
<li>Data access</li>
<li>Event</li>
<li>Stream</li>
<li>Linkage</li>
<li>Distributor</li>
<li>Arbitrator</li>
<li>Adaptor</li>
</ul>
<p>下面是一些具体的例子：</p>
<p><img src="/images/14532510393162.jpg" alt=""><br><img src="/images/14532510519338.jpg" alt=""><br><img src="/images/14532510622462.jpg" alt=""><br><img src="/images/14532510727822.jpg" alt=""><br><img src="/images/14532510800150.jpg" alt=""><br><img src="/images/14532510875753.jpg" alt=""><br><img src="/images/14532510958393.jpg" alt=""></p>
<p><img src="/images/14532511040878.jpg" alt=""></p>
<p>连接器使得为复杂交互进行抽象和建模成为可能，通过这种灵活性，是的系统可以方便地进行变化，但是需要注意在性能和灵活性之间进行权衡。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在了解了整体的框架之后，这节课我们来看架构中很重要的一部分——连接器。这里主要是一些概念和设计的介绍。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 6 课 Styles and Greenfield Design]]></title>
    <link href="http://yoursite.com/2016/01/19/sad-6/"/>
    <id>http://yoursite.com/2016/01/19/sad-6/</id>
    <published>2016-01-19T13:22:11.000Z</published>
    <updated>2016-01-19T23:42:19.000Z</updated>
    <content type="html"><![CDATA[<p>前一讲了解了简单的架构风格，这节课看一下稍微复杂一点的风格，以及针对 Greenfield 设计（类似于开放式问题）的相关内容。</p>
<a id="more"></a>
<hr>
<p>其他的一些风格会稍微复杂一些，相当于是简单风格的组合，如：</p>
<ul>
<li>REST</li>
<li>C2: Implicit invocation + Layering + other constraints</li>
<li>Distributed objects: OO + client-server network style, CORBA</li>
</ul>
<h2 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h2><p>An indirect invocation style in which independent components communicate exclusively through message routing connectors. Strict rules on connections between components and connectors induce layering.</p>
<p>组件包括独立，可潜在并行的信息产生器或消费者。连接器包括消息路由，可以过滤，翻译，转发通知或者请求。数据元素主要是消息和通知。</p>
<p>Layers of Componnets and connectors, with a defined “top” and “bottom”, wherein notifications flow downwards and requests upwards.</p>
<p><img src="/images/14532424727100.jpg" alt=""></p>
<h2 id="Distributed_Objects_3A_CORBA"><a href="#Distributed_Objects_3A_CORBA" class="headerlink" title="Distributed Objects: CORBA"></a>Distributed Objects: CORBA</h2><p>用多种语言编写的对象在多个主机上运行。对象通过良好定义的接口提供服务。对象通过远程过程调用(Remote procedure calls, RPCs)在不同的主机，进程和语言边界间调用方法。</p>
<p>组件主要是对象，连接器是过程调用。数据元素是方法的参数，返回值和异常。</p>
<p>General graph of objects from callers to callees.</p>
<p>这种风格是 location, platform, language transparency 的，也就是说不受以上的限制。</p>
<p><img src="/images/14532429040620.jpg" alt=""></p>
<h2 id="Observations"><a href="#Observations" class="headerlink" title="Observations"></a>Observations</h2><p>这是一种在不同架构中有不同表现的风格。主要关注问题（领域）和 resulting system。</p>
<p>下面是总结</p>
<p><img src="/images/14532456127563.jpg" alt=""></p>
<p><img src="/images/14532456260782.jpg" alt=""></p>
<p><img src="/images/14532456351981.jpg" alt=""></p>
<p><img src="/images/14532456453748.jpg" alt=""></p>
<h2 id="Design_Recovery"><a href="#Design_Recovery" class="headerlink" title="Design Recovery"></a>Design Recovery</h2><p>主要的任务是检查已有的代码基和审查系统的组件，连接器和总体的拓扑结构。一个常见的方法是把实现层的实体通过聚类的方法组成架构元素，两种方法：句法聚类和语义聚类。</p>
<h3 id="Syntactic_Clustering"><a href="#Syntactic_Clustering" class="headerlink" title="Syntactic Clustering"></a>Syntactic Clustering</h3><p>主要是针对代码级实体的静态关系，不需要运转系统就可以操作，例如 coupling 和 cohesion。但是可能会漏掉一些细微的关系，毕竟是没有动态信息的。</p>
<h3 id="Semantic_Clustering"><a href="#Semantic_Clustering" class="headerlink" title="Semantic Clustering"></a>Semantic Clustering</h3><p>语义包含句法，从定义上就能很清楚的得知这个方法力图包含系统领域知识的方方面面，这也导致了比较难以自动化进行。</p>
<h2 id="Greenfield"><a href="#Greenfield" class="headerlink" title="Greenfield"></a>Greenfield</h2><p>所谓 Greenfield 实际上就是说对于当前问题所处的领域大家都没有什么经验，有下面这三种指导思想：</p>
<ul>
<li>Divergence: shake off inadequate prior approaches and discover or admit a variety of new ideas</li>
<li>Transformation: combination of analysis and selection</li>
<li>Convergence: selecting and further refining ideas</li>
</ul>
<p>不断在基本的步骤里尝试直到找到比较可行的解决方案，我感觉来说就是不断试错找到最优解。下面列出一些基本方法：</p>
<ul>
<li>类比搜索：通过类比去找不相关但相似的问题，看看他们是怎么结局问题的，例如『神经网络』的提出</li>
<li>头脑风暴：这个是老生常谈了，唯一需要注意的是不要因为某些不合理的规则限制了大家的想象力</li>
<li>文献搜索：他山之石，可以攻玉</li>
<li>词法表：先列出主要的功能，然后给出对应的解决办法，有了这些办法，再进行下一步的设计和优化</li>
<li>跳出盒子：不要给自己设限，试试跳跃性思维</li>
</ul>
<p>还可以尝试其他各种方法，但是注意一定要有所限制：</p>
<ul>
<li>不然会越来越复杂</li>
<li>需要批判性思考和决定</li>
<li>考虑研究和试错的花费</li>
<li>隔离不确定的决定</li>
<li>不断评估系统的需求，确定设计边界</li>
</ul>
<p>最重要的，实在没有什么想法的话，多读读需求，俗话说得好，『读书百遍，其义自见』</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前一讲了解了简单的架构风格，这节课看一下稍微复杂一点的风格，以及针对 Greenfield 设计（类似于开放式问题）的相关内容。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 5 课 Architectural Styles]]></title>
    <link href="http://yoursite.com/2016/01/19/sad-5/"/>
    <id>http://yoursite.com/2016/01/19/sad-5/</id>
    <published>2016-01-19T13:21:57.000Z</published>
    <updated>2016-01-19T16:47:25.000Z</updated>
    <content type="html"><![CDATA[<p>前面我们大致了解了一下整体的系统设计与领域相关知识组合的各种设计阶段，这一讲我们主要来看看架构风格。</p>
<a id="more"></a>
<hr>
<h2 id="u9762_u5411_u5BF9_u8C61_u98CE_u683C"><a href="#u9762_u5411_u5BF9_u8C61_u98CE_u683C" class="headerlink" title="面向对象风格"></a>面向对象风格</h2><p>这个风格大家应该都比较熟悉了，主要是分为组件和连接器，各个部分都按照面向对象的几个大的原则：封装继承多态来设计。好处在于各个组件分工明确并且不需要关注组件内部实现，自由度比较高。</p>
<h2 id="u5206_u5C42_u98CE_u683C"><a href="#u5206_u5C42_u98CE_u683C" class="headerlink" title="分层风格"></a>分层风格</h2><p>层次结构，层与层之间通过 API 来进行通信，每层对于上下两层扮演服务端和客户端的角色，操作系统就是一个很好的例子。</p>
<p>好处在于增加了抽象层级，并且可以不断进化，改动一层，最多影响两层，很好进行重用。只要保证接口，实现可以多样化，标准化的接口使得库和框架开发都很方便。不好之处在于不是特别通用，过多的抽象也会影响性能。</p>
<h2 id="u5BA2_u6237_u7AEF-_u670D_u52A1_u7AEF_u98CE_u683C"><a href="#u5BA2_u6237_u7AEF-_u670D_u52A1_u7AEF_u98CE_u683C" class="headerlink" title="客户端-服务端风格"></a>客户端-服务端风格</h2><p>组件被费城客户端和服务端两种，服务端对于客户端的数量和身份都未知，但是客户端知道服务端的，不同的连接器基于 RPC 网络交互协议 RPC-based network interaction protocol.</p>
<p><img src="/images/14532184327954.jpg" alt=""></p>
<h2 id="u6570_u636E_u6D41_u98CE_u683C"><a href="#u6570_u636E_u6D41_u98CE_u683C" class="headerlink" title="数据流风格"></a>数据流风格</h2><p>不同的程序按顺序执行，数据在这个过程中进行传递，这里的连接器就类似于一个通道。常用于金融系统的交易处理，称为『The Granddaddy of Styles』</p>
<p><img src="/images/14532185361937.jpg" alt=""></p>
<h2 id="u7BA1_u9053_u548C_u8FC7_u6EE4_u5668_u98CE_u683C"><a href="#u7BA1_u9053_u548C_u8FC7_u6EE4_u5668_u98CE_u683C" class="headerlink" title="管道和过滤器风格"></a>管道和过滤器风格</h2><p>组件是过滤器，用来处理数据；连接器是管道，用来控制数据流。每个过滤器只知道自己的事情，不知道其他的。例如：Unix Shell，信号处理，分布式系统，并行计算。用代码的话就比如：<code>ls invoices | grep -e August | sort</code></p>
<p>有一些变种，比如 Pipeline，Bounded pipes 和 Typed pipes。好处在于系统的行为就是组件的连续行为。过滤器可以方便的添加替换和重用，也比较容易分析吞吐量，延迟，死锁等等。对于独立的任务，可以并行处理。</p>
<p>不好的地方在于所有操作批处理容易出现问题，对于交互程序没有办法使用或者比较难用</p>
<h2 id="u9ED1_u677F_u98CE_u683C"><a href="#u9ED1_u677F_u98CE_u683C" class="headerlink" title="黑板风格"></a>黑板风格</h2><p>有两种类型的组件，一种是中央数据结构，叫做黑板，而另一种就是在黑板上操作的组件。系统的控制是基于黑板的状态。例如人工智能系统，集成软件环境，编译器</p>
<p><img src="/images/14532188392639.jpg" alt=""></p>
<h2 id="u57FA_u4E8E_u89C4_u5219_u98CE_u683C"><a href="#u57FA_u4E8E_u89C4_u5219_u98CE_u683C" class="headerlink" title="基于规则风格"></a>基于规则风格</h2><p>组件包括用户界面，推理引擎和知识库，连接器则是紧密相联的（通过过程调用或共享内存），数据元素是事实和查询。系统的行为可以通过增加规则来方便地修改。但是大量的规则可能会导致冲突和难以理解</p>
<h2 id="u89E3_u91CA_u5668_u98CE_u683C"><a href="#u89E3_u91CA_u5668_u98CE_u683C" class="headerlink" title="解释器风格"></a>解释器风格</h2><p>解析和执行输入命令，然后根据解释器来更新状态。组件包括：命令解释器，程序状态，用户界面。连接器则是紧密相联的（通过过程调用或共享内存）</p>
<p>这种风格非常灵活，但是对于用户的要求很高，例如 Lisp 和 Scheme</p>
<h2 id="Mobile-Code__u98CE_u683C"><a href="#Mobile-Code__u98CE_u683C" class="headerlink" title="Mobile-Code 风格"></a>Mobile-Code 风格</h2><p>这个风格的主要思想是，组件是一个可以执行各类代码的工具，然后具体的代码可以通过不同的来源输入并执行</p>
<p><img src="/images/14532203014560.jpg" alt=""></p>
<h2 id="Implicit_Invocation__u98CE_u683C"><a href="#Implicit_Invocation__u98CE_u683C" class="headerlink" title="Implicit Invocation 风格"></a>Implicit Invocation 风格</h2><p>这种风格是事件声明而非方法调用。有一个侦听器来检测方法是否被请求，具体什么时候执行由系统决定。WPF 的编程模型有一种就是如此。好处在于组件可以重用，无论是在构建阶段还是使用阶段都可以进行系统演化。不好之处在于这种设计比较反直觉，具体的控制需要系统计算。实际也不知道哪个组件在处理也不知道什么时候处理。</p>
<h2 id="u53D1_u5E03_u8BA2_u9605_u98CE_u683C"><a href="#u53D1_u5E03_u8BA2_u9605_u98CE_u683C" class="headerlink" title="发布订阅风格"></a>发布订阅风格</h2><p>同步或异步广播，然后接受者接收到了进行对应的处理，通常经过网络协议。数据类型包括 Subscription, notification 和 published information</p>
<p>Subscribers connect to publishers either directly or may receive notifications via a network protocol from intermediaries</p>
<p><img src="/images/14532212712908.jpg" alt=""></p>
<h2 id="u57FA_u4E8E_u4E8B_u4EF6_u98CE_u683C"><a href="#u57FA_u4E8E_u4E8B_u4EF6_u98CE_u683C" class="headerlink" title="基于事件风格"></a>基于事件风格</h2><p>不同的组件异步发出和接受小溪，通过事件总线进行连接。</p>
<p>Components communicate with the event buses, not directly to each other.</p>
<p>非常高的拓展性，对分布式系统有很好的支持</p>
<p><img src="/images/14532215931442.jpg" alt=""></p>
<h2 id="u70B9_u5BF9_u70B9_u98CE_u683C"><a href="#u70B9_u5BF9_u70B9_u98CE_u683C" class="headerlink" title="点对点风格"></a>点对点风格</h2><p>每个组件都是一个小的自治系统，一般来说通过网络协议（通常自定义）来进行沟通，互相发送网络消息。</p>
<p>Network (may have redundant connections between peers) can vary arbitrarily and dynamically</p>
<p>具有很高的鲁棒性，但是后期协议可能会是问题（因为规模越来越大）</p>
<p><img src="/images/14532220209237.jpg" alt=""></p>
<p>这一讲是各个风格的简要介绍，具体还是要在实例中进行学习和分析</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面我们大致了解了一下整体的系统设计与领域相关知识组合的各种设计阶段，这一讲我们主要来看看架构风格。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 第 4 课 Designing Architectures]]></title>
    <link href="http://yoursite.com/2016/01/19/sad-4/"/>
    <id>http://yoursite.com/2016/01/19/sad-4/</id>
    <published>2016-01-19T13:21:54.000Z</published>
    <updated>2016-01-19T14:32:47.000Z</updated>
    <content type="html"><![CDATA[<p>有了前面的基本概念和第一次作业的练习，这一讲我们主要来看看如何设计架构。</p>
<a id="more"></a>
<hr>
<p>设计架构的目标主要有两个方面，一个是创新，一个是方法。创新的意思是拓展自己的技能树，使用一些新的工具；而方法的意思是去找到那些高效的技术。在开发的时候往往需要做一些取舍：什么时候用去开发新方法，什么时候去使用已经验证的有效方法。</p>
<p>具体到做工程，设计的过程主要分以下几个阶段：</p>
<ul>
<li>Feasibility stage：可行性分析，找到一些可行的概念</li>
<li>Preliminary design stage：初步设计，选择和拓展最佳的概念</li>
<li>Detailed design stage：详细设计，做出这些概念的工程上的描述</li>
<li>Planning stage：计划阶段，根据产品，贡献，消耗和产品退出市场综合评估和改变这些概念</li>
</ul>
<p>每一步实际上可能都不是那么一帆风顺，比如说：</p>
<ul>
<li>如果设计者没有办法产出可行的概念，那么整个流程就无法继续</li>
<li>在问题越来越多，产品越来越大越来越复杂的时候，每一步成功的概率也在降低</li>
<li>标准的方法没有充分去考虑市场因素，比如不同产品线之间的影响</li>
</ul>
<p>所以主要矛盾就是日益增长的复杂度与设计者经验的不足之间的矛盾，为此，必须采用一些新的方法，比如：</p>
<ul>
<li>Standard：也就是之前提到的线性模型</li>
<li>Cyclic：可以从后面的步骤跳回到之前的步骤</li>
<li>Parallel：独立的过程可以并行处理</li>
<li>Adaptive：就是走一步看一步</li>
<li>Incremental：每一个阶段可以看作是在上一个阶段的基础上进行优化</li>
</ul>
<p>在继续讲下去之前，先说明若干概念，首先是『抽象』，抽象有两种方式，对应于软件工程中两类比较大的工程思路：自底向上和自顶向下。来看看下面的概念：</p>
<blockquote>
<p>Abstraction: The act or process of separating in thought, of considering a thing independently of its associations; or a substance independently of its attributes; or an attribute or quality independently of the substance to which it belongs.</p>
<p>Reification: The mental conversion of …[an] abstract concept into a thing.</p>
<p>Deduction: The process of drawing a conclusion from a principle already known or assumed; spec. in Logic, inference by reasoning from generals to particulars; opposed to INDUCTION.</p>
<p>Induction: The process of inferring a general law or principle from the observation of particular instances; opposed to DEDUCTION.</p>
</blockquote>
<p>最开始的时候，如果不知道从何入手，可以考虑 simple machine 方法，具体的意思就是，剥离大部分非核心的功能，从最基础的入手，比方说，要设计一个传真机，那么对应的 simple machine 就是一个状态机，先把这个状态机的状态确定好，然后再慢慢尽心迭代优化。对于不同的应用来说，通常都有对应的 simple machine，可以当作是万里长征第一步，一些常见的如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Domain</th>
<th style="text-align:center">Simple Machines</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Graphics</td>
<td style="text-align:center">Pixel arrays, Transformation matrices, Widgets, Abstract depiction graphs</td>
</tr>
<tr>
<td style="text-align:center">Word processing</td>
<td style="text-align:center">Structured documents, Layouts</td>
</tr>
<tr>
<td style="text-align:center">Process control</td>
<td style="text-align:center">Finite state machines</td>
</tr>
<tr>
<td style="text-align:center">Income Tax Software</td>
<td style="text-align:center">Hypertext, Spreadsheets, Form templates</td>
</tr>
<tr>
<td style="text-align:center">Web pages</td>
<td style="text-align:center">Hypertext, Composite documents</td>
</tr>
<tr>
<td style="text-align:center">Scientific computing</td>
<td style="text-align:center">Matrices, Mathematical functions</td>
</tr>
<tr>
<td style="text-align:center">Banking</td>
<td style="text-align:center">Spreadsheets, Databases, Transactions</td>
</tr>
</tbody>
</table>
<p>如果决定使用抽象来作为设计工具，那么有两个问题必须要搞清楚，一个是抽象的层级，一个是需要讨论的犯愁。这两个为什么重要呢？举个例子，假设我们在讨论宇宙，有意义的抽象的层级应该是一致的，不能说一个人在讨论行星恒星黑洞，另一个人在讨论水星火星地球。在层级一样之后，还需要确定的是具体到某个层级要讨论的范围，这样才能真正落到实处。</p>
<p>这里可以采用概念划分的方法，也就是把根据不同的子问题，划分出相互独立的几个部分，然后可以分别进行讨论。但是其实系统中各个部分或多或少都是相互联系的，那么如何分往往是需要取舍的。在软件工程中，一个比较关键的例子是组件（用于计算）和连接器（用于通信）直接的划分。</p>
<p>设计之中过去的经验也是很重要的，经验丰富的系统设计师经过长期训练所得到的直觉非常可靠（大部分情况下），我们还需要从过去的成功或失败中学习经验。失败是最好的老师，成功同样可以是，但是需要排除那些偶然因素影响的部分，去找到真正开启成功大门的钥匙。</p>
<p>然后我们来整体看一下不同部分在坐标系的位置，越靠近右上角，说明越需要领域相关的知识，同时也是从更高层的抽象来思考问题。</p>
<p><img src="/images/14532127643541.jpg" alt=""></p>
<p>Domain-Specific Software Architecutres, DSSA 是一系列软件组件的组合，针对特定的领域，使用标准的组件。这种特性也使得 DSSA 只对特定的领域有关系，普适性较低。</p>
<p>Architectural Patterns 是一组架构设计决定，可以根据图中的位置来大概感受其特点。一个比较常见的三层模型为：</p>
<p><img src="/images/14532130749730.jpg" alt=""></p>
<p>另一种是我们常常听到的 MVC，MVC 在移动应用中开发广泛使用（当然也有 MVVM）</p>
<p><img src="/images/14532131812505.jpg" alt=""></p>
<p>而对于嵌入式带有各种传感器的应用，一般是这样的架构：</p>
<p><img src="/images/14532132171147.jpg" alt=""></p>
<p>Architectural Styles 是软件系统设计的经验准则，需要更少的领域相关的内容。不同的风格之间是可以共存的。一些基本属性：</p>
<ul>
<li>设计元素的词汇表<ul>
<li>包括组件类型，连接器类型，数据元素等等</li>
<li>例如：pipes, filters, objects, servers</li>
</ul>
</li>
<li>一组配置规则<ul>
<li>不同组件间的限制与拓扑规则</li>
<li>例如：一个组件在当前条件下最多只能和其他两个组件相连</li>
</ul>
</li>
<li>语义描述<ul>
<li>设计的组件需要有意义</li>
</ul>
</li>
</ul>
<p>使用 Styles 的好处有很多，例如：</p>
<ul>
<li>设计重用</li>
<li>代码重用</li>
<li>系统组织容易理解</li>
<li>Interoperability：也就是互用性</li>
<li>特定风格分析</li>
<li>可视化</li>
</ul>
<p>一些可以问自己的问题：</p>
<ul>
<li>What is the design vocabulary?</li>
<li>What are the allowable strucural patterns?</li>
<li>What is the underlying computational model?</li>
<li>What are the essential invariants of the style?</li>
<li>What are common examples of its use?</li>
<li>What are the (dis)advantages of using the style?</li>
<li>What are the style’s specializations?</li>
</ul>
<p>一些比较常见的风格（保证准确这里不翻译）：</p>
<ul>
<li>Traditional, language-influenced styles<ul>
<li>Main program and subroutines</li>
<li>Object-oriented</li>
</ul>
</li>
<li>Layered<ul>
<li>Virtual machines</li>
<li>Client-server</li>
<li>MVC</li>
</ul>
</li>
<li>Data-flow styles<ul>
<li>Batch sequential</li>
<li>Pipe and filter</li>
</ul>
</li>
<li>Shared memory<ul>
<li>Blackboard</li>
<li>Rule based</li>
<li>MapReduce</li>
</ul>
</li>
<li>Interpreter<ul>
<li>Interpreter</li>
<li>Mobile code</li>
</ul>
</li>
<li>Implicit invocation<ul>
<li>Event-based</li>
<li>Publish-subscribe</li>
</ul>
</li>
<li>Peer-to-peer </li>
<li>“Derived” styles <ul>
<li>C2</li>
<li>CORBA</li>
<li>SOA</li>
</ul>
</li>
</ul>
<p>至此这一讲的内容就结束了，后面会详细说明不同风格。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有了前面的基本概念和第一次作业的练习，这一讲我们主要来看看如何设计架构。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 习题课 1 Datalab]]></title>
    <link href="http://yoursite.com/2016/01/18/csapp-lab1/"/>
    <id>http://yoursite.com/2016/01/18/csapp-lab1/</id>
    <published>2016-01-18T13:01:12.000Z</published>
    <updated>2016-01-18T22:46:36.000Z</updated>
    <content type="html"><![CDATA[<p>这一讲主要是介绍第一次作业 Datalab 的相关内容以及解法，还包括如何在远程机器上编写代码和测试。</p>
<a id="more"></a>
<hr>
<p>我们先来看看 Datalab 需要我们做什么。主要是通过这次的作业来熟悉整型及浮点数的位表达形式，简单来说，就是解开一些人工谜题。列表如下：</p>
<p><img src="/images/csapp28.jpg" alt="csapp28"></p>
<p><img src="/images/csapp29.jpg" alt="csapp29"></p>
<p><img src="/images/csapp30.jpg" alt="csapp30"></p>
<p>一共 13 个需要补充的函数（会在后面分别详细说明），要开始做 lab，有以下四个步骤（针对 CMU 学生）</p>
<ol>
<li>从 Autolab 下载 lab 文件和文档</li>
<li>lab 的代码需要在远程机器上执行，需要解压文件（可能还需要修改权限 <code>chmod xxx filename</code>）</li>
<li>修改 <code>bits.c</code> 文件，测试的话有三种方式：<code>btest</code>, <code>dlc</code>, 和 <code>BDD checker</code>，另外 <code>driver.pl</code> 是 autolab 将要进行的测试</li>
<li>有无限次提交，但是不要用 autolab 来当做测试的方式，用 <code>driver.pl</code> 测试，Autolab 需要在网页端提交（使用 <code>tar -cvzf out.tar.gz file1 file2 ...</code> 这样来压缩，可以 tcp 赋复制到自己的电脑中）</li>
</ol>
<p>一些小技巧：</p>
<ul>
<li>在函数开始时声明所有变量</li>
<li><code>}</code> 应该在第一列</li>
<li>注意运算符号的优先级，使用括号确保顺序的正确</li>
<li>关注 !, 0, TMin 等</li>
</ul>
<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们先登录到远程机器，命令为 <code>ssh -X dawang@shark.ics.cs.cmu.edu</code>，输入密码后可以看到如下界面</p>
<p><img src="/images/csapp31.jpg" alt="csapp31"></p>
<p>然后另开一个终端，把之前下载好的 <code>datalab-handout.tar</code> 传到服务器上，命令是 <code>scp datalab-handout.tar dawang@shark.ics.cs.cmu.edu:</code></p>
<p><img src="/images/csapp32.jpg" alt="csapp32"></p>
<p>可以看到上吗有一些我之前课程的内容，我们创建一个新的文件夹 <code>513</code> 并把这个压缩包移动进去</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="number">513</span></span><br><span class="line">mv datalab-handout.tar ./<span class="number">513</span></span><br><span class="line">clear <span class="comment"># 让屏幕向后翻一页，看得更清楚一些</span></span><br></pre></td></tr></table></figure>
<p>这里稍微啰嗦一点，如果想要一边改动文件，然后一边编译测试的话，可以开启两个终端连接到远程机器上，这样就不用切换来切换去了。</p>
<p>解压这次试验所需的文件： <code>tar xvf datalab-handout.tar</code></p>
<p><img src="/images/csapp33.jpg" alt="csapp33"></p>
<p>这次的作业主要是在 <code>bits.c</code> 文件里完成，我们来看看里面的内容 <code>vim bits.c</code></p>
<p><img src="/images/csapp34.jpg" alt="csapp34"></p>
<p>任务指引还是比较清晰的，主要有以下一些说明：</p>
<ol>
<li>整型的范围是 0 到 255(0xFF)，不允许用更大</li>
<li>只能包含参数和局部变量</li>
<li>一元操作符 <code>!</code> <code>~</code></li>
<li>二元操作符 <code>&amp;</code> <code>|</code> <code>+</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code></li>
</ol>
<p>不允许的操作有：</p>
<ol>
<li>使用任何条件控制语句</li>
<li>定义和使用宏</li>
<li>定义其他的函数</li>
<li>调用函数</li>
<li>使用其他的操作符</li>
<li>使用类型转换</li>
<li>使用除 int 之外的类型（针对整型）</li>
<li>使用除 int, unsigned 之外的类型（针对浮点数）</li>
</ol>
<p>可以认为机器：</p>
<ul>
<li>使用 2’s complent，32位</li>
<li>执行算术右移</li>
<li>移动超过字长的位数会出问题</li>
</ul>
<p>其他需要注意的事情有：</p>
<ol>
<li>使用 dlc(data lab checker) 来检测代码的合法性（有没有使用不给使用的符号语法等等）</li>
<li>每个函数都有操作数的上限值，注意 <code>=</code> 不算</li>
<li>使用 btest 来测试结果的正确与否</li>
<li>使用 BDD checker 来正规测试你的函数</li>
</ol>
<h2 id="u9898_u76EE_u53CA_u89E3_u6CD5"><a href="#u9898_u76EE_u53CA_u89E3_u6CD5" class="headerlink" title="题目及解法"></a>题目及解法</h2><h3 id="thirdBits"><a href="#thirdBits" class="headerlink" title="thirdBits"></a>thirdBits</h3><ul>
<li>题目要求：return word with every third bit (starting from the LSB) set to 1</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：8</li>
<li>分值：1</li>
</ul>
<p>我们返回的结果是：<code>0100 1001 0010 0100 1001 0010 0100 1001</code>，因为题目要求每个变量不可以超过 255，也就是最多 <code>1111 1111</code>，所以只能分步骤来进行组合，如下面代码所示</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Desired output: <span class="number">0100</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1001</span> </span><br><span class="line">Step <span class="number">1</span>:         <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">1001</span>  <span class="number">0x49</span></span><br><span class="line">Step <span class="number">2</span>:         <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span>  Shift &lt;&lt; <span class="number">9</span></span><br><span class="line">Step <span class="number">3</span>:         <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1001</span>  Add <span class="number">0x49</span></span><br><span class="line">Step <span class="number">4</span>:         <span class="number">0100</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>  Shift &lt;&lt; <span class="number">18</span></span><br><span class="line">Step <span class="number">5</span>:         <span class="number">0100</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1001</span>  Add result from step <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">thirdBits</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0x49</span>;</span><br><span class="line">  <span class="keyword">int</span> b = (a &lt;&lt; <span class="number">9</span>);</span><br><span class="line">  <span class="keyword">int</span> c = b + a;</span><br><span class="line">  <span class="keyword">return</span> (c &lt;&lt; <span class="number">18</span>) + c; <span class="comment">// Steps 4 and 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们来测试一下正确性，先保存代码，然后：<code>make; ./btest</code>，结果如下：</p>
<p><img src="/images/csapp35.jpg" alt="csapp35"></p>
<p>可以看到第一个函数已经写对的得到了一分，然后我们再来检测一下有没有用非法的操作符：<code>./dlc -e bits.c</code></p>
<p><img src="/images/csapp36.jpg" alt="csapp36"></p>
<p>可以看到没有显示错误信息，<code>-e</code> 会输出操作符的数量，这里也都没有问题。接下来的题目都会用这种方式测试，但是就不会再贴图了。</p>
<h3 id="isTmin"><a href="#isTmin" class="headerlink" title="isTmin"></a>isTmin</h3><ul>
<li>题目要求：returns 1 if x is the minimum, two’s complement number, and 0 otherwise</li>
<li>允许操作：<code>! ~ &amp; ^ | +</code></li>
<li>操作数限制：10</li>
<li>分值：1</li>
</ul>
<p>根据 2’s complement 的定义，Tmin 的值是 <code>10000000 00000000 00000000 00000000</code>，我们要怎么判断一个数是不是 Tmin 呢，原则上来说，只需要把 x 和 Tmin 做 <code>&amp;</code> 操作，判断即可，但是题目要求不能左移，于是就要想其他的办法了，观察 Tmin 的值，发现如果左移一次，就变成全部为 0，但是全部为零的情况还有另外一种就是本身全部就是 0，所以只要排除第二种情况，就可以判断是否是 Tmin 了，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面一部分用于判断左移一位后是否全部为0，后面一部分用来判断 x 值是否为 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmin</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> !(x+x)&amp;!!(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isNotEqual"><a href="#isNotEqual" class="headerlink" title="isNotEqual"></a>isNotEqual</h3><ul>
<li>题目要求：return 0 if x == y, and 1 otherwise <ul>
<li>例如: isNotEqual(5,5) = 0, isNotEqual(4,5) = 1</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：6</li>
<li>分值：2</li>
</ul>
<p>这题比较简单，发现可以使用异或操作，那么只需要判断两个数异或后结果是否为 0 即可，这里同样使用了 !! 来把 bit 转换成 boolean 值</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isNotEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span>(!!(x ^ y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="anyOddBit"><a href="#anyOddBit" class="headerlink" title="anyOddBit"></a>anyOddBit</h3><ul>
<li>题目要求：return 1 if any odd-numbered bit in word set to 1<ul>
<li>例如： anyOddBit(0x5) = 0, anyOddBit(0x7) = 1</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：12</li>
<li>分值：2</li>
</ul>
<p>我们依旧不能超过 0xFF 的限制，所以需要把前面的 24 位都用 <code>|</code> 和 <code>&gt;&gt;</code> 运算符移动到最后八位中，再和 <code>10101010</code> 来做 <code>&amp;</code> 操作，只要不为零，就说明在偶数位上有不为 0 位</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anyOddBit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!((x | (x &gt;&gt; <span class="number">8</span>) | (x &gt;&gt; <span class="number">16</span>) | (x &gt;&gt; <span class="number">24</span>)) &amp; <span class="number">0xaa</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><ul>
<li>题目要求：return -x<ul>
<li>例如：negate(1) = -1. </li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：5</li>
<li>分值：2</li>
</ul>
<p>第一感觉就是用到取反 <code>~</code> 符号，但需要考虑三种情况：正，零，负</p>
<ul>
<li>假设是 <code>0010</code>(2)，取反之后是 <code>1101</code>(-3)</li>
<li>假设是 <code>1110</code>(-2)，取反之后是 <code>0001</code>(1)</li>
<li>假设是 <code>0000</code>(0)，取反之后是 <code>1111</code>(-1) </li>
</ul>
<p>可以发现一个规律，就是都差 1，为什么呢，就是因为 2’s complement 的定义中是加上了 1 的，所以只要再加一就好。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h3><ul>
<li>题目要求：same as x ? y : z<ul>
<li>例如：conditional(2,4,5) = 4 </li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：16</li>
<li>分值：3</li>
</ul>
<p>这一题稍微有一些复杂，我们来看看怎么去想。因为不能用 if 来做流程判断，所以我们返回的表达式例一定要包含 y 和 z，但是可以根据 x 的值来进行变换，所以大概的式子是 <code>(y op expr) | (z op expr)</code>(op 表示操作符， expr 是某个表达式)。</p>
<p>然后就简单很多了，我们只要想办法做一个 expr，要么为 <code>0x00000000</code>，要么为 <code>0xffffffff</code> 即可，于是表达式 <code>~!x + 1</code> 就可以满足我们的需求，x 为 0 时，表达式为 <code>0xffffffff</code>，不等于 0 时也满足条件，就等于有了答案</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     *if x!=0,mask=0x00000000,so y&amp;~mask==y and z&amp;mask==0</span><br><span class="line">     *if x==0,mask=0xffffffff,so y&amp;~mask = y&amp;0 =0; z&amp;mask=z</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">int</span> mask= ~!x+<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">return</span> (y &amp; ~mask)|(z &amp; mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="subOK"><a href="#subOK" class="headerlink" title="subOK"></a>subOK</h3><ul>
<li>题目要求：Determine if can compute x-y without overflow<ul>
<li>例如：</li>
<li>subOK(0x80000000,0x80000000) = 1</li>
<li>subOK(0x80000000,0x70000000) = 0</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：20</li>
<li>分值：3</li>
</ul>
<p>这题也不算轻松，但是我们可以一步一步来搞定，首先，既然是计算 x-y，我们要能够知道结果，由于不给使用减号，那就用倒数（之前的方法），所以 x-y 的结果为 <code>~y+1+x</code>。然后需要怎么判断呢，观察发现，只有在以下这两种情况同时发生的时候，才是 overflow</p>
<ol>
<li>x 和 y 符号不同</li>
<li>x-y 的符号和 x 不同</li>
</ol>
<p>可能有点难以理解，overflow 指的是除符号位的最高位进位，也就是说符号会变化，所以需要 x 和 y 的符号不同（这样 x-y 就等同于两个同符号的加法），也就是第一个条件；符号到底有没有变化呢，就要看 x-y 与 x 的符号是否相同，也就是第二个条件。所以代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subOK</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * overflow of sub happens iff </span><br><span class="line">   * 1) x and y have different signs</span><br><span class="line">   * 2) res = x - y has different sign with x</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">int</span> res = x + (~y + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> sameSign = x ^ y;</span><br><span class="line">  <span class="keyword">int</span> resSign = res ^ x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> !((sameSign &amp; resSign) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="isGreater"><a href="#isGreater" class="headerlink" title="isGreater"></a>isGreater</h3><ul>
<li>题目要求：if x &gt; y  then return 1, else return 0<ul>
<li>例如：isGreater(4,5) = 0, isGreater(5,4) = 1</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：24</li>
<li>分值：3</li>
</ul>
<p>因为要考虑正负号，所以这个问题变成：</p>
<ol>
<li>两个数符号相同的情况</li>
<li>两个数符号不同的情况</li>
</ol>
<p>具体可以参见代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isGreater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">        <span class="comment">// Boolean value indicating sign of x</span></span><br><span class="line">        <span class="comment">// 1 = Negative</span></span><br><span class="line">        <span class="comment">// 0 = Non-Negative</span></span><br><span class="line">        <span class="keyword">int</span> sign_x = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Boolean value indicating sign of y</span></span><br><span class="line">        <span class="comment">// 1 = Negative</span></span><br><span class="line">        <span class="comment">// 0 = Non-Negative</span></span><br><span class="line">        <span class="keyword">int</span> sign_y = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if the signs are equal, then</span></span><br><span class="line">	<span class="comment">// if x is larger, sign bit of (~y + x) is 0</span></span><br><span class="line">	<span class="comment">// if y is larger, sign bit of (~y + x) is 1</span></span><br><span class="line">	<span class="keyword">int</span> equal = !(sign_x ^ sign_y) &amp; ((~y + x) &gt;&gt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if signs are not equal, these principles are reversed.</span></span><br><span class="line">	<span class="keyword">int</span> notEqual = sign_x &amp; !sign_y;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// this | returns 0 when it is x is greater, so you have to negate it.</span></span><br><span class="line">	<span class="keyword">return</span> !( equal | notEqual);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bitParity"><a href="#bitParity" class="headerlink" title="bitParity"></a>bitParity</h3><ul>
<li>题目要求：returns 1 if x contains an odd number of 0’s<ul>
<li>例如：bitParity(5) = 0, bitParity(7) = 1</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：20</li>
<li>分值：4</li>
</ul>
<p>这道题要我们统计有有多少个零，这里我们需要利用一个特点，就是堆两个数进行异或操作，不改变奇偶性，所以只需要一步一步来异或就可以了</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitParity</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* XORing two numbers returns a number with same bit parity.</span><br><span class="line">     Keep shifting half of our number until reduced to 1 bit simple case.*/</span></span><br><span class="line"></span><br><span class="line">  x = ( x &gt;&gt; <span class="number">16</span> ) ^ x;</span><br><span class="line">  x = ( x &gt;&gt; <span class="number">8</span> ) ^ x;</span><br><span class="line">  x = ( x &gt;&gt; <span class="number">4</span> ) ^ x;</span><br><span class="line">  x = ( x &gt;&gt; <span class="number">2</span> ) ^ x;</span><br><span class="line">  x = ( x &gt;&gt; <span class="number">1</span>) ^ x;</span><br><span class="line">  <span class="keyword">return</span> (x &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h3><ul>
<li>题目要求：return the minimum number of bits required to represent x in two’s complement<ul>
<li>例如：</li>
<li>howManyBits(12) = 5</li>
<li>howManyBits(298) = 10</li>
<li>howManyBits(-5) = 4</li>
<li>howManyBits(0)  = 1</li>
<li>howManyBits(-1) = 1</li>
<li>howManyBits(0x80000000) = 32</li>
</ul>
</li>
<li>允许操作：<code>! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</code></li>
<li>操作数限制：90</li>
<li>分值：4</li>
</ul>
<p>这题从操作数限制的数目来看就知道比较复杂，但是代码还是比较清晰的，可以直接查看代码中的注释（特别鸣谢：@guojiex）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=x^(x&gt;&gt;<span class="number">31</span>);<span class="comment">//get positive of x;</span></span><br><span class="line">    <span class="keyword">int</span> isZero=!temp;</span><br><span class="line">    <span class="comment">//notZeroMask is 0xffffffff</span></span><br><span class="line">    <span class="keyword">int</span> notZeroMask=(!(!temp)&lt;&lt;<span class="number">31</span>)&gt;&gt;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> bit_16,bit_8,bit_4,bit_2,bit_1;</span><br><span class="line">    bit_16=!(!(temp&gt;&gt;<span class="number">16</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//see if the high 16bits have value,if have,then we need at least 16 bits</span></span><br><span class="line">    <span class="comment">//if the highest 16 bits have value,then rightshift 16 to see the exact place of  </span></span><br><span class="line">    <span class="comment">//if not means they are all zero,right shift nothing and we should only consider the low 16 bits</span></span><br><span class="line">    temp=temp&gt;&gt;bit_16;</span><br><span class="line">    bit_8=!(!(temp&gt;&gt;<span class="number">8</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    temp=temp&gt;&gt;bit_8;</span><br><span class="line">    bit_4=!(!(temp&gt;&gt;<span class="number">4</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    temp=temp&gt;&gt;bit_4;</span><br><span class="line">    bit_2=!(!(temp&gt;&gt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    temp=temp&gt;&gt;bit_2;</span><br><span class="line">    bit_1=!(!(temp&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    temp=bit_16+bit_8+bit_4+bit_2+bit_1+<span class="number">2</span>;<span class="comment">//at least we need one bit for 1 to tmax,</span></span><br><span class="line">    <span class="comment">//and we need another bit for sign</span></span><br><span class="line">    <span class="keyword">return</span> isZero|(temp&amp;notZeroMask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="float_half"><a href="#float_half" class="headerlink" title="float_half"></a>float_half</h3><ul>
<li>题目要求：Return bit-level equivalent of expression (float) x. Result is returned as unsigned int, but it is to be interpreted as the bit-level representation of a single-precision floating point values.</li>
<li>允许操作：Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>操作数限制：30</li>
<li>分值：4</li>
</ul>
<p>这个就是考察基本的对于 IEEE 浮点数格式的转换了，思路也比较清晰，就是根据不同的部分来求出对应的值</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_half</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> round, S, E, maskE, maskM, maskS,maskEM, maskSM, tmp;</span><br><span class="line">  round = !((uf&amp;<span class="number">3</span>)^<span class="number">3</span>);</span><br><span class="line">  maskS = <span class="number">0x80000000</span>;</span><br><span class="line">  maskE = <span class="number">0x7F800000</span>;</span><br><span class="line">  maskM = <span class="number">0x007FFFFF</span>;</span><br><span class="line">  maskEM= <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">  maskSM= <span class="number">0x807FFFFF</span>;</span><br><span class="line">  E = uf&amp;maskE;</span><br><span class="line">  S = uf&amp;maskS;</span><br><span class="line">  <span class="comment">//Nan or Infinity</span></span><br><span class="line">  <span class="keyword">if</span> (E==<span class="number">0x7F800000</span>) <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="comment">//E=1 - specialcase</span></span><br><span class="line">  <span class="keyword">if</span> (E==<span class="number">0x00800000</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> S | (round + ((uf &amp; maskEM)&gt;&gt;<span class="number">1</span>)) ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//E=0 - denormalized</span></span><br><span class="line">  <span class="keyword">if</span> (E==<span class="number">0x00000000</span>) &#123;</span><br><span class="line">    tmp = (uf&amp;maskM)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> S | (tmp + round);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//normalized case</span></span><br><span class="line">  <span class="keyword">return</span> (((E&gt;&gt;<span class="number">23</span>)-<span class="number">1</span>)&lt;&lt;<span class="number">23</span>) | (uf &amp; maskSM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="float_i2f"><a href="#float_i2f" class="headerlink" title="float_i2f"></a>float_i2f</h3><ul>
<li>题目要求：Return bit-level equivalent of expression (float) x. Result is returned as unsigned int, but it is to be interpreted as the bit-level representation of a single-precision floating point values.</li>
<li>允许操作：Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>操作数限制：30</li>
<li>分值：4</li>
</ul>
<p>和上题一样，这个就是考察基本的对于 IEEE 浮点数格式的转换了，思路也比较清晰，就是根据不同的部分来求出对应的值（特别鸣谢@guojiex）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_i2f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*int exponent=0;</span><br><span class="line">    return ((sign&lt;&lt;31)|(exponent&lt;&lt;23)|fraction)+flag;*/</span></span><br><span class="line">    <span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> exponent; </span><br><span class="line">    <span class="keyword">int</span> fraction; </span><br><span class="line">    <span class="keyword">int</span> delta;</span><br><span class="line">    <span class="keyword">int</span> fraction_mask;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)<span class="comment">//||x==0x8000000)</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0x80000000</span>)</span><br><span class="line">        exponent=<span class="number">158</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sign)<span class="comment">//turn negtive to positive</span></span><br><span class="line">            x = -x;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">while</span> ( !(x &gt;&gt; i) )<span class="comment">//see how many bits do x have(rightshift until 0) </span></span><br><span class="line">            i--;</span><br><span class="line">        <span class="comment">//printf("%x %d\n",x,i);</span></span><br><span class="line">        exponent = i + <span class="number">127</span>;</span><br><span class="line">        x = x &lt;&lt; (<span class="number">31</span> - i);<span class="comment">//clean all those zeroes of high bits</span></span><br><span class="line">        fraction_mask = <span class="number">0x7fffff</span>;<span class="comment">//(1 &lt;&lt; 23) - 1;</span></span><br><span class="line">        fraction = fraction_mask &amp; (x &gt;&gt; <span class="number">8</span>);<span class="comment">//right shift 8 bits to become the fraction,sign and exp have 8 bits total</span></span><br><span class="line">        x = x &amp; <span class="number">0xff</span>;</span><br><span class="line">        delta = x &gt; <span class="number">128</span> || ((x == <span class="number">128</span>) &amp;&amp; (fraction &amp; <span class="number">1</span>));<span class="comment">//if lowest 8 bits of x is larger than a half,or is 1.5,round up 1</span></span><br><span class="line">        fraction += delta;</span><br><span class="line">        <span class="keyword">if</span>(fraction &gt;&gt; <span class="number">23</span>) &#123;<span class="comment">//if after rounding fraction is larger than 23bits</span></span><br><span class="line">            fraction &amp;= fraction_mask;</span><br><span class="line">            exponent += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (sign&lt;&lt;<span class="number">31</span>)|(exponent&lt;&lt;<span class="number">23</span>)|fraction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="float_f2i"><a href="#float_f2i" class="headerlink" title="float_f2i"></a>float_f2i</h3><ul>
<li>题目要求：Return bit-level equivalent of expression (int) f for floating point argument f. Argument is passed as unsigned int, but it is to be interpreted as the bit-level representation of a single-precision floating point value. Anything out of range (including NaN and infinity) should return 0x80000000u.</li>
<li>允许操作：Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li>
<li>操作数限制：30</li>
<li>分值：4</li>
</ul>
<p>和上题一样，这个就是考察基本的对于 IEEE 浮点数格式的转换了，思路也比较清晰，就是根据不同的部分来求出对应的值</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">float_f2i</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span> = (uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">int</span> frac = uf &amp; <span class="number">0x007FFFFF</span>;</span><br><span class="line">  <span class="keyword">int</span> sign = uf &amp; <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">int</span> bias = <span class="built_in">exp</span> - <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">255</span> || bias &gt; <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// exponent is 255 (NaN), or number is too large for an int</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">exp</span> || bias &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// number is very small, round down to 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// append a 1 to the front to normalize</span></span><br><span class="line">  frac = frac | <span class="number">1</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// float based on the bias</span></span><br><span class="line">  <span class="keyword">if</span> (bias &gt; <span class="number">23</span>) &#123;</span><br><span class="line">    frac = frac &lt;&lt; (bias - <span class="number">23</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    frac = frac &gt;&gt; (<span class="number">23</span> - bias);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sign) &#123;</span><br><span class="line">    <span class="comment">// original number was negative, make the new number negative</span></span><br><span class="line">    frac = ~(frac) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u68C0_u67E5_u4E0E_u63D0_u4EA4"><a href="#u68C0_u67E5_u4E0E_u63D0_u4EA4" class="headerlink" title="检查与提交"></a>检查与提交</h2><p>全部题目做完之后，就可以检查一下了，这里我们可以用另外一个命令 <code>./driver.pl</code>，结果如下：</p>
<p><img src="/images/csapp37.jpg" alt="csapp37"></p>
<p>这样就算完成啦，提交的时候只需要提交 <code>bits.c</code> 所以我们先把它从远程主机复制回来 <code>scp dawang@shark.ics.cs.cmu.edu:513/datalab-handout/bits.c ./</code></p>
<p>不用压缩，直接提交即可，检查无误之后，至此本次实验完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一讲主要是介绍第一次作业 Datalab 的相关内容以及解法，还包括如何在远程机器上编写代码和测试。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="Datalab" scheme="http://yoursite.com/tags/Datalab/"/>
    
      <category term="习题课" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98%E8%AF%BE/"/>
    
      <category term="计算机" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 5 课 Machine Basics]]></title>
    <link href="http://yoursite.com/2016/01/18/csapp-5/"/>
    <id>http://yoursite.com/2016/01/18/csapp-5/</id>
    <published>2016-01-18T13:00:53.000Z</published>
    <updated>2016-01-19T04:18:15.000Z</updated>
    <content type="html"><![CDATA[<p>从这一讲开始，我们接触到更多机器相关的内容，这次要说的是基础知识，为之后更深入讲解打下基础。</p>
<a id="more"></a>
<hr>
<h2 id="Intel__u5904_u7406_u5668_u7B80_u53F2"><a href="#Intel__u5904_u7406_u5668_u7B80_u53F2" class="headerlink" title="Intel 处理器简史"></a>Intel 处理器简史</h2><p>这一讲的部分内容在我之前上过的 18640 Foundation of Computer Architecture 中也有涉及，但是重点不同，这里会结合这两门课的内容做一个简单的介绍。</p>
<p>首先介绍的就是处理器，作为计算机的大脑，虽然有很多种，这里只介绍 Intel x86 架构的处理器。课堂上介绍了 Intel 处理器的大致发展历史和特点，我简要说明一下。</p>
<p>作为统治笔记本桌面电脑服务器市场的处理器，x86 处理器是一个一直在进化的产品，甚至兼容 1978年的 8086 的指令集。值得注意的是，x86 采用的是 Complex instruction set computer(CISC)，之所以称为复杂指令，是因为有许许多多不同格式的不同指令（对应的是 RISC）</p>
<p>整个 Intel x86 的发展史很长，这里提几个关键的时间节点和对应产品：</p>
<ul>
<li>1978 年：8086，第一个 16 位处理器，主要为 IBM PC 和 DOS 设计，有 1MB 的地址空间</li>
<li>1985 年：386，第一个 32 位 Intel 处理器(IA32)，添加了 flat addressing，使得可以运行 Unix</li>
<li>2004 年：Pentium 4E，第一个 64 位 Intel 处理器(x86-64)</li>
<li>2006 年：Core 2，第一个 多核 Intel 处理器</li>
<li>2008 年：Core i7，四核（也就是我们做实验用的机器）</li>
</ul>
<p><img src="/images/14531672465886.jpg" alt=""></p>
<p>随着时代和科技的发展，除了最基本的运算指令集，还有一些其他的特性：</p>
<ul>
<li>增加了支持多媒体操作处理的指令</li>
<li>启用了更加高效的执行条件操作的指令</li>
<li>从 32 位迁移的 64 位</li>
<li>更多的运算核心</li>
</ul>
<p>一个另外的趋势是集成，比如说 2015 年的 Core i7 Broadwell，可以从下图看到处理器芯片中加入了原来主板才有的许多部件，如 PCIe, SATA, DDR3 等等。</p>
<p><img src="/images/14531674473247.jpg" alt=""></p>
<p>顺带说一下千年老二 AMD，主打性价比，研发的 Opteron 系列是 Pentium 4 的强劲对手，并且开发了自己的 64 位拓展 x86-64。但是近年来 Intel 重新找回厂子，AMD 开始打酱油。</p>
<p>Intel 在 64 位处理器的发展并不算顺风顺水，2001 年本打算使用全新的架构快速从 IA32 转换到 IA64，但是糟糕的性能反倒给了 AMD 机会。后者在 2003 年发布的 x86-64(现在叫 AMD64) 架构明显更厉害，搞得 Intel 疲于应战，最后在 2004 年搞出来一个叫 EM64T 的东西，其实几乎和 AMD64 一样。现在除了某些低端的处理器，几乎都支持 x86-64，这也是这门课主要要讲的内容。</p>
<h2 id="C__u8BED_u8A00_uFF0C_u6C47_u7F16_u548C_u673A_u5668_u4EE3_u7801"><a href="#C__u8BED_u8A00_uFF0C_u6C47_u7F16_u548C_u673A_u5668_u4EE3_u7801" class="headerlink" title="C 语言，汇编和机器代码"></a>C 语言，汇编和机器代码</h2><p>先介绍一些定义：</p>
<blockquote>
<p>Architecture: (also ISA, instruction set architecture) The parts of a processor design that one needs to understand or write assembly/machine code. (Examples: instruction set specification, registers)</p>
<p>Microarchitecture: Implementation of the architecture. (Examples: cache sizes and core frequency)</p>
</blockquote>
<ul>
<li>Code Forms:<ul>
<li>Machine Code: The byte-level programs that a processor executes</li>
<li>Assembly Code: A text prepresentation of machine code</li>
</ul>
</li>
<li>Example ISAs:<ul>
<li>Intel: x86, IA32, Itanium, x86-64</li>
<li>ARM: Used in almost all mobile phones</li>
</ul>
</li>
</ul>
<p><img src="/images/14531688992654.jpg" alt=""></p>
<p>现在简单介绍下几个比较重要的部分：</p>
<ul>
<li>PC: Program counter，里面存着下一条指令的地址，在 x86-64 中称为 RIP</li>
<li>Register: 寄存器，用来存储数据以便操作</li>
<li>Codition codes: 条件代码，通常保存最近的算术或逻辑操作的信息，用来做条件跳转</li>
<li>Memory: 内存，有地址数组，代码和用户数据，以及栈</li>
</ul>
<p>我们知道机器只能执行机器代码，我们写的 C 语言代码是如何成为机器代码的呢？可以参见下图：</p>
<p><img src="/images/14531691105504.jpg" alt=""></p>
<p>这里的 <code>-Og</code> <code>-S</code> 是编译器的参数，意思是进行不那么优化的优化（这样我们才能看得懂编译出来的汇编语言）以及汇编完输出汇编结果。</p>
<p>我们有如左图所示的代码，使用命令 <code>gcc -Og -S sum.c</code> 就可以产生 <code>sum.s</code> 文件，我们来对比看一下。（注意不同的平台不同的编译器不同的参数会有不同的结果，和下图可能差别很大）</p>
<p><img src="/images/14531692047447.jpg" alt=""></p>
<p>这里先不展开讲每条指令是做什么的，先来说说汇编语言的数据类型</p>
<ul>
<li>整型：有 1，2，4，8 个字节，可以存数据，也可以存地址（地址是无类型的指针）</li>
<li>浮点数：有 4，8，10 个字节，和整型分不同的寄存器</li>
<li>代码：由一系列指令编码而成的字节序列</li>
<li>注意，是没有类似数组和结构体这种组合的，这些其实都只是在内存中连续分配的字节</li>
</ul>
<p>能够执行的操作也很有限：</p>
<ul>
<li>对寄存器或者内存中的数据执行算术运算</li>
<li>在内存和寄存器之间传输数据</li>
<li>传输控制（非条件跳转和条件分支）</li>
</ul>
<p><img src="/images/14531700919485.jpg" alt=""></p>
<p>汇编器会把 <code>.s</code> 文件转换成 <code>.o</code>，把每条指令转换成二进制代码，基本上就是可以执行的代码了，除了不同文件的连接之外。</p>
<p>连接器会把不同文件之间的引用处理好，顺带也会吧静态库给连接进去（例如 <code>malloc</code> <code>printf</code> 的代码），注意，有些代码是动态连接的，也就是在执行时才连接，这样就可以减少一些编译出来的文件大小。</p>
<p>举个例子</p>
<p><img src="/images/14531703812373.jpg" alt=""></p>
<p>除了汇编，还可以反汇编，<code>objdum -d sum</code> 比如：</p>
<p><img src="/images/14531704316866.jpg" alt=""></p>
<p>反汇编有什么用呢：</p>
<ul>
<li>检查代码</li>
<li>分析指令的结构模式</li>
<li>生成近似的汇编代码</li>
<li>可以对 <code>a.out</code> 或者 <code>.o</code> 文件进行反汇编</li>
<li>注意，有些软件的用户协议里说明是不能反编译的，例如：windows</li>
</ul>
<h2 id="u6C47_u7F16_u57FA_u7840"><a href="#u6C47_u7F16_u57FA_u7840" class="headerlink" title="汇编基础"></a>汇编基础</h2><p>先来看看 x86-64 的整型寄存器</p>
<p><img src="/images/14531710081185.jpg" alt=""></p>
<p>发现其实大的里面还包含小的（灰色部分），为什么呢？看看 IA32 的架构就明白了</p>
<p><img src="/images/14531716085778.jpg" alt=""></p>
<p>发现没有？%rsp 里面包含 %esp，%esp 里面又包含 %sp，这样就保证了可以从 64 位兼容 32 位再到最初的 16 位，是不是很精妙的设计？</p>
<h3 id="u79FB_u52A8_u6570_u636E"><a href="#u79FB_u52A8_u6570_u636E" class="headerlink" title="移动数据"></a>移动数据</h3><p>操作数主要有三种类型，一种是立即数，也就是直接给的一个数字，第二种是寄存器，第三种是内存</p>
<p><img src="/images/14531723678160.jpg" alt=""></p>
<h3 id="u5BFB_u5740"><a href="#u5BFB_u5740" class="headerlink" title="寻址"></a>寻址</h3><p>普通模式，(R)，相当于 <code>Mem[Reg[R]]</code>，也就是说寄存器 R 指定内存地址，类似于 C 语言中的指针，语法为：<code>movq (%rcx), %rax</code> 也就是说以 %rcx 寄存器中存储的地址去内存里找对应的数据，存到寄存器 %rax 中</p>
<p>移位模式，D(R)，相当于 <code>Mem[Reg[R]+D]</code>，寄存器 R 给出起始的内存地址，然后 D 是偏移量，语法为：<code>movq 8(%rbp),%rdx</code> 也就是说以 %rbp 寄存器中存储的地址再加上 8 个偏移量去内存里找对应的数据，存到寄存器 %rdx 中</p>
<p>举个交换两个数字的例子</p>
<p><img src="/images/14531730491322.jpg" alt=""></p>
<p>前面的两种属于简单模式，完整的更通用的模式是这样的：</p>
<p><img src="/images/14531733075157.jpg" alt=""></p>
<p>举个例子：%rdx 的存着的地址是 0xf000；%rcx 的存着的地址是 0x0100，那么有：</p>
<p><img src="/images/14531733728296.jpg" alt=""></p>
<h2 id="u7B97_u672F_u8FD0_u7B97_u4E0E_u903B_u8F91_u8FD0_u7B97"><a href="#u7B97_u672F_u8FD0_u7B97_u4E0E_u903B_u8F91_u8FD0_u7B97" class="headerlink" title="算术运算与逻辑运算"></a>算术运算与逻辑运算</h2><p>一条比较重要的指令是 <code>leaq Src, Dst</code>，其中 <code>Src</code> 是地址的表达式，然后把计算的值存入 <code>Dst</code> 指定的寄存器，也就是说，无须内存引用就可以计算，类似于 <code>p = &amp;x[i];</code></p>
<p>举个例子：</p>
<p><img src="/images/14531767663611.jpg" alt=""></p>
<p>可以看到是直接对 %rdi 寄存器中存的地址所对应的内存例的数据进行操作。</p>
<p>一些常见的算术运算指令如下，注意参数的顺序，而且对于有符号和无符号数都是一样的：</p>
<p><img src="/images/14531768882688.jpg" alt=""></p>
<p><img src="/images/14531768992534.jpg" alt=""></p>
<p>更多的信息可以参考书籍和对应的文档。</p>
<p>再来看一个例子：</p>
<p><img src="/images/14531769425822.jpg" alt=""></p>
<p>对应的语句和寄存器的值如下（确保弄明白整个过程）：</p>
<p><img src="/images/14531769778782.jpg" alt=""></p>
<p>这一讲的内容到这里就这么多，其实还是需要比较多基础知识才好理解，尤其是汇编这部分，可以去网上找一下可视化的寄存器及内存数据交换过程看看，增加了解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从这一讲开始，我们接触到更多机器相关的内容，这次要说的是基础知识，为之后更深入讲解打下基础。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="组成原理" scheme="http://yoursite.com/tags/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="计算机" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解计算机系统 第 4 课 Floating Point]]></title>
    <link href="http://yoursite.com/2016/01/18/csapp-4/"/>
    <id>http://yoursite.com/2016/01/18/csapp-4/</id>
    <published>2016-01-18T13:00:49.000Z</published>
    <updated>2016-01-18T16:14:14.000Z</updated>
    <content type="html"><![CDATA[<p>了解了数据在内存中的基本存储形式，同时也知道了整型的表达方法，这一讲我们来看看另一大类别的数字——浮点数——是如何在计算机中表示的。</p>
<a id="more"></a>
<hr>
<p>二进制浮点数的表示，其实和我们日常生活中常见的十进制的方式是一致的，都是相当于每一位的系数，乘以每一位的数值，然后把结果加起来，如下图所示：</p>
<p><img src="/images/csapp13.jpg" alt="csapp13"></p>
<p>所以我们其实可以用一个统一的公式来表达：</p>
<p>$$ \sum_{k=-j}^ib_k\times 2^k $$</p>
<p>例如</p>
<p>$$ 5\frac{3}{4}=101.11_2 \;,\; 2\frac{7}{8}=10.111_2 \;,\; 1\frac{7}{16}=1.0111_2 $$</p>
<p>可以看到除以二就相当于右移，并且可以横跨小数点。注意 $0.111…_2$ 非常接近于 1，因为 </p>
<p>$$ 1/2 + 1/4 + 1/8 + … + 1/2^i + … \to 1.0$$</p>
<p>通常用 $1.0-\epsilon$ 来表示这个值。</p>
<p>细心的同学就会发现，这种表达方式其实是比较明显的限制的，比如说，只有形为 $\frac{x}{2^k}$ 的小数部分可以被精确表示，其他的数字会变成循环的小数，例如：$\frac{1}{3}=0.0101010101[01]…_2$。</p>
<p>除此之外，另一个问题在于，如果给定了 w 个比特，能够表达的数字其实是有限的。</p>
<h2 id="IEEE_Floating_Point"><a href="#IEEE_Floating_Point" class="headerlink" title="IEEE Floating Point"></a>IEEE Floating Point</h2><p>实话说，这个标准更多是从数值角度来建立的，对于舍入，上溢出和下溢出都有比较好的处理方法，但与此同时，给硬件优化带来了比较大的困难。从理解的角度来看，也不够直观，但是好在主流的 CPU 都支持浮点数，所以我们不必过多涉及这方面的细节，但是了解定义本身还是很重要的。</p>
<p>我们用下面的公式来表达浮点数：</p>
<p>$$(-1)^s \; M \; 2^E$$</p>
<p>其中 s 是符号位，决定正负；M 通常是一个值在 [1.0, 2.0) 的小数；E 是次方数。具体编码的时候是这样的：</p>
<p><img src="/images/csapp14.jpg" alt="csapp14"></p>
<p>其中 s 对应着符号位，exp 对应着 E（注意，不一定等于 E，因为位数限制表达能力有限），frac 对应着 M（注意，不一定等于 M，因为位数限制表达能力有限）。</p>
<p>不同的位数就代表了不同的表示能力，也就是单精度，双精度，扩展精度的来源，具体的位数表示如下：</p>
<p><img src="/images/csapp15.jpg" alt="csapp15"></p>
<h3 id="Normalized_Values"><a href="#Normalized_Values" class="headerlink" title="Normalized Values"></a>Normalized Values</h3><p>在 $exp \ne 000…0$ 和 $exp \ne 111…1$ 时，表示的其实都是规范化的值，为什么说是规范化呢？这里只需要大概知道因为实数轴上原来连续的值会被规范到有限的定值上并且这些定值之间的间距也是不一样的，具体可以通过后面给出的例子来理解（所以现在不明白也不用担心）</p>
<p>$$v=(-1)^s \; M \; 2^E$$</p>
<p>这里的 E 是一个偏移的值 $$E=Exp-Bias$$，其中</p>
<ul>
<li>Exp: 是 exp 编码区域的无符号数值</li>
<li>Bias：值为 $2^{k-1} - 1$ 的偏移量，其中 k 是 exp 编码的位数，也就是说<ul>
<li>单精度：127（Exp: 1…254, E: -126…127）</li>
<li>双精度：1023（Exp: 1…2046, E: -1022…1023）</li>
</ul>
</li>
</ul>
<p>之所以需要采用一个偏移量，是为了保证 exp 编码只需要以无符号数来处理。</p>
<p>而对于 M，一定是以 1 开头的：也就是 $M=1.xxx…x_2$。其中 xxx 的部分就是 frac 的编码部分，当 frac=000.00 的时候值最小（$M=1.0$），当 frac=111。。。1 的时候值最大（$M=2.0-\epsilon$），也就是说开头的 1 是『免费附送的』，并不需要实际的编码位。</p>
<p>举个例子，<code>float F = 15213.0;</code>，那么</p>
<p>$$15213_{10}=11101101101101_2=1.1101101101101_2 \times 2^13$$</p>
<p>于是 frac 部分的值就是小数点后面的数值，而 Exp = E + Bias = 13 + 127 = 140 = $10001100_2$，于是编码出来的浮点数是这样的：</p>
<p><img src="/images/csapp16.jpg" alt="csapp16"></p>
<h3 id="Denormalized_Values"><a href="#Denormalized_Values" class="headerlink" title="Denormalized Values"></a>Denormalized Values</h3><p>当 $exp = 000…0$ 的时候，值是非规范化的，意思是，虽然实数轴上原来连续的值会被规范到有限的定值上，但是并些定值之间的间距也是一样的，具体可以通过后面给出的例子来理解（所以现在不明白也不用担心）</p>
<p>$$v=(-1)^s \; M \; 2^E$$</p>
<p>和前面不同的是 </p>
<p>$$E = 1 - Bias$$</p>
<p>而且 $M=0.xxx…x_2$，不是以 1 开头了。</p>
<p>当 exp=000…0 且 frac = 000…0 时，表示 0，而且因为符号位的缘故，实际上是有 +0 和 -0 两种的。</p>
<p>而在 exp=000..0 且 $frac \ne 000…0$ 时，数值是接近 0 的，并且间距是一致的</p>
<h3 id="Special_Values"><a href="#Special_Values" class="headerlink" title="Special Values"></a>Special Values</h3><p>还有一种特殊情况，就是 $exp = 111…1$ 时，表示一些特殊值。</p>
<p>当 exp=111…1 且 frac = 000…0 时，表示 $\infty$，而且因为符号位的缘故，实际上是有 $+\infty$ 和 $-\infty$ 两种的。那些会溢出的操作就会用这个来表示，比如 $1.0/0.0=-1.0/0.0=+\infty\;,\;1.0/-0.0=-\infty$</p>
<p>而在 exp=111…1 且 $frac \ne 000…0$ 时，我们认为这不是一个数值（Not-a-Number，NaN），用来表示那些没办法确定的值，比如 $sqrt(-1),\infty-\infty,\infty\times 0$</p>
<h3 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h3><p>可能通过文字描述还是不够清晰，我们来看看上面各种情况对应到数轴中是怎么样的：</p>
<p><img src="/images/csapp17.jpg" alt="csapp17"><br>（对应理解一下上面所说的内容）</p>
<p>接下来举一个实际的例子，我们的编码形式是这样的：</p>
<p><img src="/images/csapp18.jpg" alt="csapp18"></p>
<p>简单起见，我们用 8 个 bit 来做演示，exp 部分是 4 位，所以 bias=7，后三位用来编码小数。下面列出正数部分的表格：</p>
<p><img src="/images/csapp19.jpg" alt="csapp19"></p>
<p>观察上表，我们可以发现如下一些比较有意思的规律：</p>
<ul>
<li>在 exp=0000 时，也就是 denorm 的情况，间距是一致的，都是 1/8</li>
<li>因为位数的限制，从零到一之间的数字只能以 1/8 为最小单位来表示，且相邻数字间间距一样</li>
<li>在 norm 的部分，可以发现由于 exp 部分的不同，所以相邻数字间的间隔也是不同的，比方说最接近 1 的数字是 15/16 和 9/8，分别相差 1/16 和 1/8，这也是由于 IEEE 浮点数表示法的公式决定的</li>
</ul>
<p>从上面的例子大概了解了值的范围，我们再缩小一点，用 6-bit，来看看具体数值的分布</p>
<p><img src="/images/csapp20.jpg" alt="csapp20"></p>
<p>这里因为 exp 有 3 位，所以 Bias = 3，分布如下</p>
<p><img src="/images/csapp21.jpg" alt="csapp21"></p>
<p>拉近一点（主要是 0 附近）</p>
<p><img src="/images/csapp22.jpg" alt="csapp22"></p>
<p>总结起来，IEEE 编码有以下一些需要注意的性质</p>
<ul>
<li>浮点数的 0 和整型的 0 一样，所有位都是 0</li>
<li>可以使用无符号整型的比较方法来比较大小<ul>
<li>必须先比较符号位</li>
<li>必须考虑 -0=0 的情况</li>
<li>注意 NaN 的情况</li>
<li>其他时候都是没有问题的</li>
</ul>
</li>
</ul>
<h3 id="Rounding"><a href="#Rounding" class="headerlink" title="Rounding"></a>Rounding</h3><p>对于浮点数的加法和乘法来说，基本的思路如下：</p>
<ul>
<li>先计算出准确值</li>
<li>然后转换到合适的精度<ul>
<li>可能会溢出</li>
<li>可能需要舍入来满足 frac 的精度</li>
</ul>
</li>
</ul>
<p>舍入的方式有很多种，举个例子：</p>
<p><img src="/images/csapp23.jpg" alt="csapp23"></p>
<p>舍入到最近的偶数比较特别，中心思想是：舍入之后最右边的值要是偶数，从下面一个例子就可以明白：</p>
<p><img src="/images/csapp24.jpg" alt="csapp24"></p>
<p>对于二进制数也是类似的</p>
<p><img src="/images/csapp25.jpg" alt="csapp25"></p>
<h3 id="u6D6E_u70B9_u6570_u4E58_u6CD5"><a href="#u6D6E_u70B9_u6570_u4E58_u6CD5" class="headerlink" title="浮点数乘法"></a>浮点数乘法</h3><p>$$(-1)^{s1}\; M1 \; 2^{E1} \times (-1)^{s2}\; M2 \; 2^{E2}$$</p>
<p>结果是 $(-1)^{s}\; M \; 2^{E}$，其中 s= s1 ^ s2, M = M1 * M2, E = E1 + E2</p>
<ul>
<li>如果 M 大于等于 2，那么把 M 右移，并增加 E 的值。</li>
<li>如果 E 超出了可以表示的范围，溢出</li>
<li>把 M 舍入到 frac 的精度</li>
</ul>
<p>基本性质</p>
<ul>
<li>相乘可能产生 infinity 或者 NaN</li>
<li>满足交换率</li>
<li>不满足结合律（因为舍入会造成精度损失）</li>
<li>乘以 1 等于原来的数</li>
<li>不满足分配率 <code>1e20*(1e20-1e20)=0.0</code> 但 <code>1e20*1e20-1e20*1e20=NaN</code></li>
<li>除了 infinity 和 NaN，满足单调性，即 $a\ge b \to a\times c \ge a\times b$</li>
</ul>
<h3 id="u6D6E_u70B9_u6570_u52A0_u6CD5"><a href="#u6D6E_u70B9_u6570_u52A0_u6CD5" class="headerlink" title="浮点数加法"></a>浮点数加法</h3><p>$$(-1)^{s1}\; M1 \; 2^{E1} + (-1)^{s2}\; M2 \; 2^{E2}$$，这里假设 E1 &gt; E2</p>
<p><img src="/images/csapp26.jpg" alt="csapp26"></p>
<p>结果是 $(-1)^{s}\; M \; 2^{E}$，其中 s= s1 ^ s2, M = M1 + M2, E = E1</p>
<ul>
<li>如果 M 大于等于 2，那么把 M 右移，并增加 E 的值</li>
<li>如果 M 小于 1，把 M 左移 k 位，E 减少 k</li>
<li>如果 E 超出了可以表示的范围，溢出</li>
<li>把 M 舍入到 frac 的精度</li>
</ul>
<p>基本性质</p>
<ul>
<li>相加可能产生 infinity 或者 NaN</li>
<li>满足交换率</li>
<li>不满足结合律（因为舍入会造成精度损失，如 <code>3.14+1e10)-1e10=0</code>，但 <code>3.14+(1e10-1e10)=3.14</code>）</li>
<li>加上 0 等于原来的数</li>
<li>除了 infinity 和 NaN，每个元素都有对应的倒数</li>
<li>除了 infinity 和 NaN，满足单调性，即 $a\ge b \to a+c \ge a+b$</li>
</ul>
<h3 id="C__u8BED_u8A00_u4E2D_u7684_u6D6E_u70B9_u6570"><a href="#C__u8BED_u8A00_u4E2D_u7684_u6D6E_u70B9_u6570" class="headerlink" title="C 语言中的浮点数"></a>C 语言中的浮点数</h3><p>保证两种精度：float(单精度)，double(双精度)</p>
<p>在 int, float, double 间转换会改变其 bit </p>
<ul>
<li>double/float 到 int<ul>
<li>去掉小数部分</li>
<li>类似与向 0 舍入</li>
<li>当值是 NaN 时没有定义，一般来说会设置为 TMin</li>
</ul>
</li>
<li>int 到 double<ul>
<li>精确转换，只要 int 的字长不超过 53 bit</li>
</ul>
</li>
<li>int 到 float<ul>
<li>可能需要舍入</li>
</ul>
</li>
</ul>
<h3 id="Puzzles"><a href="#Puzzles" class="headerlink" title="Puzzles"></a>Puzzles</h3><p>声明下面变量</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = ...;</span><br><span class="line"><span class="keyword">float</span> f = ...;</span><br><span class="line"><span class="keyword">double</span> d = ...;</span><br></pre></td></tr></table></figure>
<p>判断下面的表达式是否正确</p>
<ul>
<li><code>x == (int)(float)x</code> 错误，可能会损失精度，因为 float 的位数不足以表达所有可能的 int</li>
<li><code>x == (int)(double)x</code> 正确，int 到 double 是精确转换</li>
<li><code>f == (float)(double)f</code> 正确</li>
<li><code>d == (double)(float)d</code> 错误，可能会损失精度</li>
<li><code>f == -(-f)</code> 正确，只是改变符号位</li>
<li><code>2/3 == 2/3.0</code> 错误，前面会舍入到 0，后面是一个小数</li>
<li><code>d &lt; 0.0</code> 推出 <code>(d*2) &lt; 0.0</code> 正确，即使溢出，也是负无穷</li>
<li><code>d &gt; f</code> 推出 <code>-f &gt; -d</code> 正确</li>
<li><code>d * d &gt;= 0.0</code> 正确</li>
<li><code>(d+f)-d == f</code> 错误，可能会因为舍入损失精度</li>
</ul>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><ul>
<li>IEEE 浮点数有明确的数学性质</li>
<li>使用 $M\times 2^E$ 的形式来表达数值</li>
<li>操作实际上是与实现方式无关的，因为需要满足同样的数学规律，具体怎么实现不重要</li>
<li>和实际的数学有一些不同<ul>
<li>不满足结合律和分配率</li>
<li>给编译器和需要高精度的运算程序带来了很大困扰</li>
</ul>
</li>
</ul>
<p><img src="/images/csapp27.jpg" alt="csapp27"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>了解了数据在内存中的基本存储形式，同时也知道了整型的表达方法，这一讲我们来看看另一大类别的数字——浮点数——是如何在计算机中表示的。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="浮点数" scheme="http://yoursite.com/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
      <category term="计算机" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件架构与设计 习题课 1 面向对象复习]]></title>
    <link href="http://yoursite.com/2016/01/17/sad-r1/"/>
    <id>http://yoursite.com/2016/01/17/sad-r1/</id>
    <published>2016-01-17T12:50:47.000Z</published>
    <updated>2016-01-17T21:56:16.000Z</updated>
    <content type="html"><![CDATA[<p>前面几讲我们了解了一堆概念，这一节课里我们借用 ATM 的例子，来回顾一下面向对象设计的基本知识（注：本『课』由第一次作业拓展而成）</p>
<a id="more"></a>
<hr>
<p>这一讲的主要任务有三个：</p>
<ol>
<li>利用软件开发者的知识，设计一个软件系统，作为之后进行修改的基础</li>
<li>复习一下面向对象分析与设计的基本知识</li>
<li>熟悉如何使用 UML 来表达软件设计</li>
</ol>
<p>主要的产出有以下这三个：</p>
<ol>
<li>用例图 Use Case Diagram：从用户角度定义系统功能</li>
<li>类图 Class Diagram：列出系统中的不同组件</li>
<li>时序图 Sequence Diagram：给出组件间的关联</li>
</ol>
<p>接下来，我们先来看一下具体的需求。</p>
<h2 id="u7CFB_u7EDF_u9700_u6C42"><a href="#u7CFB_u7EDF_u9700_u6C42" class="headerlink" title="系统需求"></a>系统需求</h2><p>需求很重要，尤其是作为课程作业，有没有好好阅读决定了能不能清晰定义设计的边界，也就意味着能不能用最有效率的方式完成老师的要求。但是在实际工作中，需求本身往往也是不明确的，就需要架构师有穿透力和远见，透过现象看本质，找到最佳的设计方案。</p>
<p>基本来说，我们需要确定的是系统的核心架构以及组件间的依赖和连接。也就是说，先根据需求设计不同的组件，然后用某种方式把它们连接起来。具体的需求如下：</p>
<p>每一台 ATM 机有这些硬件：</p>
<ul>
<li>读卡装置：刷卡或插卡</li>
<li>键盘：输入密码</li>
<li>显示屏：显示交互信息</li>
<li>存取款槽：存钱或取钱时放钱的地方</li>
<li>打印机：打印回执</li>
<li>开关：开启或关闭 ATM</li>
</ul>
<p>ATM 机与银行的交互可以抽象成一个黑盒不在这次设计的范围内，使用流程如下：</p>
<ul>
<li>一台 ATM 机一次只能为一名用户提供服务</li>
<li>用户需要插卡并输入密码（会传输给银行进行验证）</li>
<li>验证通过后可以进行交易（查询/存取款/转账/等等）</li>
<li>交易过程中卡都在 ATM 机子里面（例外的情况会具体列出来）</li>
<li>每次交易都需要通过银行验证，在存钱取钱拆信封等物理操作完成之后还会再发送第二条消息</li>
<li>如果密码输入错误，需要重新输入，最多有三次机会，都错误的话会吞卡，用户需要找银行来拿回卡</li>
<li>如果交易失败（不是因为密码错误）的话，屏幕会显示错误信息，并询问用户是否需要再次交易</li>
<li>交易成功会给用户打印收据，包括日期时间机器位置交易类型账户数额和目前余额</li>
<li>关闭 ATM 之前需要与银行确认，关闭之后可以装现金，取出信封之类的</li>
<li>如果 ATM 里面不够钱，就会推荐附近够钱的 ATM</li>
<li>如果是从其他银行取钱，会收取一定的手续费，收取之前需要用户确认</li>
<li>通常来说有每日的取款金额限制</li>
</ul>
<p>ATM 机应该提供以下服务：</p>
<ul>
<li>用户可以从与这张卡关联的账户中取钱，数量为 20 的倍数，取钱之前需要银行验证</li>
<li>用户可以向与这张卡管理的账户中存钱，现金或者支票都可以，用户需要输入存钱的金额，在机器移除装支票的信封时需要手动确定，接收信封之前需要银行同意</li>
<li>用户可以在与这张卡关联的账户之间相互转账</li>
<li>用户可以查询与这张卡关联的账户</li>
</ul>
<p>其他事项：</p>
<ul>
<li>试着指出一些非功能需求，提出一些问题，想一下边界情况</li>
<li>因为设计金钱，所以需要保证可靠性，思考一下出问题怎么保证一致性（原子操作）</li>
<li>当前用户信息在取卡之后需要消除</li>
<li>可能之后会支持更多银行，留下拓展空间</li>
<li>ATM 支持多语言</li>
</ul>
<h2 id="u7528_u4F8B_u56FE_Use_Case_Diagram"><a href="#u7528_u4F8B_u56FE_Use_Case_Diagram" class="headerlink" title="用例图 Use Case Diagram"></a>用例图 Use Case Diagram</h2><p><img src="/images/14530445743502.jpg" alt=""></p>
<p>这里是比较简单的画法，比方说没有涉及到交易时的细节，只是给出了顶层的几个大类的操作。（当然理论上应该画得更详细，但是我懒）</p>
<h2 id="u7C7B_u56FE_Class_Diagaram"><a href="#u7C7B_u56FE_Class_Diagaram" class="headerlink" title="类图 Class Diagaram"></a>类图 Class Diagaram</h2><p>设计类图的时候需要注意，因为和之后的时序图有关系（类越多时序图越复杂），所以需要进行合理的抽象和组合。比如说，ATM 机有许多硬件，如果每个都是一个类，那么交互就很复杂了，不妨只有一个 Machine 类，里面包含其他的硬件的类别（当然这里不会详细画出来），这样就保证了和用例图在同一个层次的抽象上，让人一看就明白。</p>
<p><img src="/images/14530639861969.jpg" alt=""></p>
<p>这里抽象出来几个具体的类别，利用继承来简化设计，注意，并不包括银行部分的设计。</p>
<h2 id="u65F6_u5E8F_u56FE_Sequence_Diagram"><a href="#u65F6_u5E8F_u56FE_Sequence_Diagram" class="headerlink" title="时序图 Sequence Diagram"></a>时序图 Sequence Diagram</h2><p><img src="/images/14530671333085.jpg" alt=""></p>
<p>这里同样是采用了比较简略的设计。</p>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.ibm.com/developerworks/cn/rational/uml/newto.html" target="_blank" rel="external">统一建模语言, Unified Modeling Language</a> </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面几讲我们了解了一堆概念，这一节课里我们借用 ATM 的例子，来回顾一下面向对象设计的基本知识（注：本『课』由第一次作业拓展而成）</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="习题" scheme="http://yoursite.com/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 8 课 Azure 动手玩]]></title>
    <link href="http://yoursite.com/2016/01/16/cc-8/"/>
    <id>http://yoursite.com/2016/01/16/cc-8/</id>
    <published>2016-01-16T19:41:09.000Z</published>
    <updated>2016-01-17T03:04:01.000Z</updated>
    <content type="html"><![CDATA[<p>上手 AWS 后，这一讲我们继续来看看另一个云服务提供商 Azure 要如何上手。</p>
<a id="more"></a>
<hr>
<p>通常来说在云平台上用来计算的资源叫做虚拟机，也叫实例 instance。不是所有的实例都是一样的，在 AWS 中有一些可以定制的选择，比如说操作系统和硬件配置等等。</p>
<p>这一讲的主要任务是了解虚拟机并在上面跑一些应用程序，借此来理解不同配置的不同表现。我们都知道更好的配置就性能更强，但是：</p>
<ul>
<li>更贵的是不是真的更好？</li>
<li>有没有什么办法来测量其性能表现？</li>
<li>性能的差别有多少？</li>
</ul>
<p>这些问题都不简单，但是这一讲会给你一点点启发。</p>
<p>我们首先会启动三种不同的 Azure 虚拟机，利用内置的性能测评来比较它们的相对性能表现，最后用公共访问的 web 服务器来测试性能。</p>
<p>项目的最后会探索一下名为 vertical scaling 的常见规模化技术。这个过程中需要把 Azure 虚拟机的镜像拷贝到自己的存储账户中（很耗时），所以最好尽快开始。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Data Center: https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0dcv2-osDisk.b7dbe1d0-<span class="number">782</span>c-<span class="number">43</span>b5<span class="operator">-a</span>7df-<span class="number">1896844377</span>aa.vhd</span><br><span class="line">Load Generator: https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0lgv2-osDisk.<span class="number">838</span>bf28c-ed03-<span class="number">41</span>f9-<span class="number">9810</span>-<span class="number">4</span>cbfa668d22e.vhd</span><br></pre></td></tr></table></figure>
<h2 id="u542F_u52A8_u865A_u62DF_u673A"><a href="#u542F_u52A8_u865A_u62DF_u673A" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p>我们先来创建几个通用的虚拟机，并在上面做一些试验</p>
<p><strong>第一步</strong></p>
<p>访问 <a href="https://portal.azure.com/" target="_blank" rel="external">Azure portal</a>并创建一个新的虚拟机，运行 Ubuntu 14.04 LTS，使用 资源管理器作为部署模型。地区选择 East US，以及 Azure pass subscription。</p>
<p><strong>第二步</strong></p>
<p>我们需要创建三个不同大小的虚拟机：A1, A2, A3</p>
<p><img src="/images/14529892365625.jpg" alt=""></p>
<p><strong>第三步</strong></p>
<p>在设置-&gt;存储中，选择标准，并创建新的存储账户(Standard-LRS)和位于 East US 的网络</p>
<p><img src="/images/14529894432878.jpg" alt=""></p>
<p><strong>第四步</strong></p>
<p>创建好了虚拟机之后，修改对应的网络安全组，在入站安全规则中添加 TCP 80 端口</p>
<p><img src="/images/14529899780201.jpg" alt=""></p>
<p><img src="/images/14529899840018.jpg" alt=""></p>
<p>注意三台机器都需要进行添加</p>
<p><strong>第五步</strong></p>
<p>给每个虚拟机打上标签</p>
<p><img src="/images/14529900566991.jpg" alt=""></p>
<p><strong>第六步</strong></p>
<p>虚拟机正在运行的时候，就可以通过 IP 来进行访问了，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [username]@[Public IP address]</span><br></pre></td></tr></table></figure>
<p>都登录上之后类似这样：</p>
<p><img src="/images/cc22.jpg" alt="c"></p>
<h2 id="u7CFB_u7EDF_u6027_u80FD_u6D4B_u8BC4"><a href="#u7CFB_u7EDF_u6027_u80FD_u6D4B_u8BC4" class="headerlink" title="系统性能测评"></a>系统性能测评</h2><p>我们需要在已经启动的实例中安装性能测评工具。通过这个来评估完成一个任务所需的最佳实例组合以做到多快好省。</p>
<p>虽然云服务提供商是利用虚拟化技术来提供资源，但是需要知道实例的性能一来不是稳定的，二来也不保证达到某个水平。这里我们使用 <code>sysbench</code> 来评估性能，它是一个轻量级跨平台的性能测试软件，能够快速评估 CPU，内存和文件读写性能。</p>
<p>执行下面的命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sysbench</span><br></pre></td></tr></table></figure>
<p>安装完成之后就可以按照给出的三个配置来进行测试。</p>
<h3 id="CPU__u6D4B_u8BD5"><a href="#CPU__u6D4B_u8BD5" class="headerlink" title="CPU 测试"></a>CPU 测试</h3><p>分别在三个不同的机器运行下列命令，统计结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysbench --num-threads=<span class="number">8</span> --test=cpu --cpu-max-prime=<span class="number">20000</span> run</span><br><span class="line">sysbench --num-threads=<span class="number">1</span> --test=cpu --cpu-max-prime=<span class="number">40000</span> run</span><br><span class="line">sysbench --num-threads=<span class="number">4</span> --test=cpu --cpu-max-prime=<span class="number">50000</span> run</span><br></pre></td></tr></table></figure>
<p>表后面的三列分别是 A1, A2, A3 的总时间</p>
<table>
<thead>
<tr>
<th style="text-align:center">Max Prime</th>
<th style="text-align:center">Thread</th>
<th style="text-align:center">Time(A1)</th>
<th style="text-align:center">Time(A2)</th>
<th style="text-align:center">Time(A3)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">20000</td>
<td style="text-align:center">8</td>
<td style="text-align:center">74.8729s</td>
<td style="text-align:center">35.7929s</td>
<td style="text-align:center">18.6264s </td>
</tr>
<tr>
<td style="text-align:center">40000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">195.5052s</td>
<td style="text-align:center">190.4013s</td>
<td style="text-align:center">194.2614s</td>
</tr>
<tr>
<td style="text-align:center">50000</td>
<td style="text-align:center">4</td>
<td style="text-align:center">263.7678s</td>
<td style="text-align:center">125.2128</td>
<td style="text-align:center">65.6631s</td>
</tr>
</tbody>
</table>
<p>可以看到 Azure 的区分度比 AWS 大很多，不同等级基本上是一倍的性能提高。</p>
<h3 id="u6587_u4EF6_IO__u6027_u80FD_u6D4B_u8BD5"><a href="#u6587_u4EF6_IO__u6027_u80FD_u6D4B_u8BD5" class="headerlink" title="文件 IO 性能测试"></a>文件 IO 性能测试</h3><p>Azure 通常会保证 Input/Output Operations per Second (IOPS)。不同的硬盘访问逻辑对性能影响很大（缓存导致），传统的机械硬盘受寻址时间和旋转速度的影响，固态硬盘受驱动和设备控制器的影响。</p>
<p>同样用下面的命令来进行测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sysbench --test=fileio --file-total-size=<span class="number">20</span>G prepare </span><br><span class="line"><span class="comment"># 可能需要等待30分钟，使用 byobu / screen / tmux 来保持连接</span></span><br><span class="line"><span class="comment"># 或者可以在 iterm 设置中 profiles -&gt; sessions -&gt; When idel, send ASCII code</span></span><br><span class="line"><span class="comment"># 又或者 在客户端的 ~/.ssh/ 文件夹中添加 config 文件，并添加配置： ServerAliveInterval 60 </span></span><br><span class="line"></span><br><span class="line">sysbench --test=fileio --file-total-size=<span class="number">20</span>G --file-test-mode=rndrw --init-rng=on --max-time=<span class="number">300</span> --max-requests=<span class="number">0</span> run</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">\</th>
<th style="text-align:center">A1</th>
<th style="text-align:center">A2</th>
<th style="text-align:center">A3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Read(Mb)</td>
<td style="text-align:center">167.81</td>
<td style="text-align:center">170.62</td>
<td style="text-align:center">195.94</td>
</tr>
<tr>
<td style="text-align:center">Written(Mb)</td>
<td style="text-align:center">111.88</td>
<td style="text-align:center">113.75</td>
<td style="text-align:center">130.62</td>
</tr>
<tr>
<td style="text-align:center">Total trans(Mb)</td>
<td style="text-align:center">279.69</td>
<td style="text-align:center">284.38</td>
<td style="text-align:center">326.56</td>
</tr>
<tr>
<td style="text-align:center">Speed(Mb/sec)</td>
<td style="text-align:center">0.9547</td>
<td style="text-align:center">0.9706</td>
<td style="text-align:center">1.0884</td>
</tr>
</tbody>
</table>
<p>比较一下表中的数据，是不是随着价格的提高，性能也有对应比例的提高？</p>
<p>可以看到从 A1 到 A3 几乎没有提升，而且与 aws 的相比，速度也是非常慢，估计是因为机械硬盘的缘故。</p>
<h2 id="Web__u670D_u52A1_u5668_u6027_u80FD_u6D4B_u8BD5"><a href="#Web__u670D_u52A1_u5668_u6027_u80FD_u6D4B_u8BD5" class="headerlink" title="Web 服务器性能测试"></a>Web 服务器性能测试</h2><p>这门课上我们会学会如何配置，搭建和部署 web 服务。所以需要熟悉如何折腾服务器。这里我们会在每个实例中安装和部署一个简单的 web 服务器，修改一下主页以便测试和评分。</p>
<p><a href="https://youtu.be/6_tPobCyF9o" target="_blank" rel="external">Apache 简介视频（墙外）</a></p>
<p>LAMP = Linux + Apache + MySQL + PHP</p>
<p>用以下命令安装 apache：<code>sudo apt-get install apache2</code></p>
<p>安装完成之后，用自己的浏览器访问这个实例的地址，应该就可以看到 Apache 的欢迎页面</p>
<p><img src="/images/14529800450459.jpg" alt=""></p>
<p>如果访问 <code>cd /var/www/html</code> 就可以看到有一个 <code>index.html</code> 页面。</p>
<p>我们把这个页面的内容替换成：</p>
<p><code>15619 is awesome!</code> （<code>sudo vim index.html</code> 然后命令模式下 <code>dG</code>）</p>
<p>再次访问的时候就可以看到变化了</p>
<p>然后我们来安装 apachebench，也就是服务器管理器，命令如下：</p>
<p><code>sudo apt-get install apache2-utils</code></p>
<p>安装完成后，输入 <code>ab</code> 应该能看到命令界面，一个简单的测试命令为：</p>
<p><code>ab -n 1000 -c 100 http://localhost/</code> (一次 1000 个 request，一共 100 次，最后是想要测试的页面)，然后就可以看到各种数据统计。</p>
<p>在之后项目中，可能会用一组 load generators 来访问 web service 以检验你的 web 服务的性能和正确性。通常来说用平均每秒可以处理的请求数来衡量性能。正确率会基于字符串或正则表达式来拼配。类似于下图：</p>
<p><img src="/images/14529809204231.jpg" alt=""></p>
<p>地址为 <code>http://p0.loadgen.theproject.zone</code></p>
<p>VM 的地址就是 EC2 的 public dns 地址；然后输入 andrew id 和提交密码(在页面上方)</p>
<p>测试成功的话会显示 <code>Success!! Check TPZ for your score</code>，然后就可以课程网站上查看自己的成绩。</p>
<h2 id="Vertical_Scaling"><a href="#Vertical_Scaling" class="headerlink" title="Vertical Scaling"></a>Vertical Scaling</h2><p>根据需要来改变所需的系统资源称为 Vertical Scaling。</p>
<p>在这个场景中，我要启动一个 load generator，它会在一个数据中心实例上创造一些负载。通过一个恒定的负载，来比较不同类型实例的吞吐量（用 rps 来衡量，每秒处理的访问量）。</p>
<p>在这里我们不能 SSH 连接到这些实例，但是可以通过访问特定的 endpoint 来查看当前的情况，具体步骤如下：</p>
<p>先要把 load generator 和数据中心的镜像拷贝到自己的存储账户中。地址是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Data Center: https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0dcv2-osDisk.b7dbe1d0-<span class="number">782</span>c-<span class="number">43</span>b5<span class="operator">-a</span>7df-<span class="number">1896844377</span>aa.vhd</span><br><span class="line"></span><br><span class="line">Load Generator: https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0lgv2-osDisk.<span class="number">838</span>bf28c-ed03-<span class="number">41</span>f9-<span class="number">9810</span>-<span class="number">4</span>cbfa668d22e.vhd</span><br></pre></td></tr></table></figure>
<p>和 <a href="http://wdxtub.com/2016/01/15/cc-5/" target="_blank" rel="external">云计算 第 5 课 Azure API</a> 的方法是一样的，因为我们之前已经创建了 AD 应用之类的东西，有所需的 AppId, AppKey, TenantId 等内容，所以现在可以直接用之前的命令，但是要拷贝的内容换成上面的地址</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Data Center</span></span><br><span class="line">azure storage blob copy start https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0dcv2-osDisk.b7dbe1d0-<span class="number">782</span>c-<span class="number">43</span>b5<span class="operator">-a</span>7df-<span class="number">1896844377</span>aa.vhd  --dest-account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --dest-account-key PUT_YOUR_KEY1_HERE --dest-container system</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load Generator</span></span><br><span class="line">azure storage blob copy start https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/cc15619p0lgv2-osDisk.<span class="number">838</span>bf28c-ed03-<span class="number">41</span>f9-<span class="number">9810</span>-<span class="number">4</span>cbfa668d22e.vhd  --dest-account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --dest-account-key PUT_YOUR_KEY1_HERE --dest-container system</span><br></pre></td></tr></table></figure>
<p>也需要一定时间，可以用下面的命令来查看进度</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Data Center</span></span><br><span class="line">azure storage blob copy show --account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --account-key PUT_YOUR_KEY1_HERE --container system --blob Microsoft.Compute/Images/vhds/cc15619p0dcv2-osDisk.b7dbe1d0-<span class="number">782</span>c-<span class="number">43</span>b5<span class="operator">-a</span>7df-<span class="number">1896844377</span>aa.vhd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load Generator</span></span><br><span class="line">azure storage blob copy show --account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --account-key PUT_YOUR_KEY1_HERE --container system --blob Microsoft.Compute/Images/vhds/cc15619p0lgv2-osDisk.<span class="number">838</span>bf28c-ed03-<span class="number">41</span>f9-<span class="number">9810</span>-<span class="number">4</span>cbfa668d22e.vhd</span><br></pre></td></tr></table></figure>
<p>类似下图</p>
<p><img src="/images/cc14.jpg" alt="c"></p>
<p>当结果从 pending 变成 success 的时候，就可以用这个镜像来创建一台虚拟机了，具体镜像的 url 可以在存储账户中对应镜像的</p>
<p>创建镜像同样可以用<a href="http://wdxtub.com/2016/01/15/cc-5/" target="_blank" rel="external">云计算 第 5 课 Azure API</a>中的 python 脚本来创建，我创建了两个新文件：<code>azure_p0_create_lg.py</code> 和 <code>azure_p0_create_dc.py</code></p>
<p>这两个文件基本只需要改动 <code>create_vm_from_ami</code> 这个函数，因为参数默认值只有在参数不够的时候才会启用，所以保险起见，在函数体里面把需要更新的内容都再写一次。</p>
<p>这里需要注意 <code>machine_size</code> 并没有对应的 D1 类型，所以先随便创建一个，之后去 web 控制台里进行修改</p>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lg</span></span><br><span class="line">python azure_p0_create_lg.py STORAGE_ACCOUNT_NAME SUBSCRIPTION_ID ENDPOINT_URI APPLICATION_ID APPLICATION_SECRET_KEY</span><br><span class="line"></span><br><span class="line"><span class="comment">#dc</span></span><br><span class="line">python azure_p0_create_dc.py STORAGE_ACCOUNT_NAME SUBSCRIPTION_ID ENDPOINT_URI APPLICATION_ID APPLICATION_SECRET_KEY</span><br></pre></td></tr></table></figure>
<p>创建完成之后，先把 load generator 在 Web 界面改成 D1（可能需要停止虚拟机才能调整）</p>
<p>然后访问 load generator 的 ip，可以看到下面的界面</p>
<p><img src="/images/cc23.jpg" alt="c"></p>
<p>注意测试的时候数据中心需要填写 dns 而不是 ip 地址，可以在下图这里找到：</p>
<p><img src="/images/14529979521284.jpg" alt=""></p>
<p>然后按照与上一讲类似的过程，记录下 A1 A2 两种数据中心的测试结果即可。</p>
<table>
<thead>
<tr>
<th style="text-align:center">RPS</th>
<th style="text-align:center">Minute 1</th>
<th style="text-align:center">Minute 2</th>
<th style="text-align:center">Minute 3</th>
<th style="text-align:center">Minute 4</th>
<th style="text-align:center">Minute 5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A1</td>
<td style="text-align:center">494.42</td>
<td style="text-align:center">704.12</td>
<td style="text-align:center">712.61</td>
<td style="text-align:center">715.48</td>
<td style="text-align:center">718.92</td>
</tr>
<tr>
<td style="text-align:center">A2</td>
<td style="text-align:center">991.50</td>
<td style="text-align:center">1298.85</td>
<td style="text-align:center">1322.22</td>
<td style="text-align:center">1329.14</td>
<td style="text-align:center">1324.32</td>
</tr>
</tbody>
</table>
<p>可以看到从 A1 到 A2 的提升还是非常大的（从配置中也能看得出来）</p>
<p>完成之后记得删除对应的虚拟机</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上手 AWS 后，这一讲我们继续来看看另一个云服务提供商 Azure 要如何上手。</p>]]>
    
    </summary>
    
      <category term="Azure" scheme="http://yoursite.com/tags/Azure/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="实例" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 7 课 AWS 动手玩]]></title>
    <link href="http://yoursite.com/2016/01/16/cc-7/"/>
    <id>http://yoursite.com/2016/01/16/cc-7/</id>
    <published>2016-01-16T19:41:04.000Z</published>
    <updated>2016-01-17T02:41:28.000Z</updated>
    <content type="html"><![CDATA[<p>了解了基本的原理和工具后，这一讲我们用一个实际的例子来上手 AWS。</p>
<a id="more"></a>
<hr>
<p>通常来说在云平台上用来计算的资源叫做虚拟机，也叫实例 instance。不是所有的实例都是一样的，在 AWS 中有一些可以定制的选择，比如说操作系统和硬件配置等等。</p>
<p>这一讲的主要任务是了解虚拟机并在上面跑一些应用程序，借此来理解不同配置的不同表现。我们都知道更好的配置就性能更强，但是：</p>
<ul>
<li>更贵的是不是真的更好？</li>
<li>有没有什么办法来测量其性能表现？</li>
<li>性能的差别有多少？</li>
</ul>
<p>这些问题都不简单，但是这一讲会给你一点点启发。</p>
<p>我们首先会启动三种不同的 EC2 实例，利用内置的性能测评来比较它们的相对性能表现，最后用公共访问的 web 服务器来测试性能。</p>
<h2 id="u542F_u52A8_u5B9E_u4F8B_u4E0E_u6027_u80FD_u6D4B_u8BC4"><a href="#u542F_u52A8_u5B9E_u4F8B_u4E0E_u6027_u80FD_u6D4B_u8BC4" class="headerlink" title="启动实例与性能测评"></a>启动实例与性能测评</h2><p>虽然我们知道有几种不同的配置，但是除了纸面上的差别，真正的性能差别有多少呢？现在我们就来分别测试一下，按照以下步骤进行</p>
<ol>
<li>启动三个分别为 <code>t2.small</code>, <code>t2.medium</code>, <code>t2.large</code> 的实例，硬盘选择 30GB 的 General SSD，镜像选择 Ubuntu Server 14.04 LTS (HVM), General SSD Volume Type (ami-d05e75b8)。这里最好选择 <strong>spot instances</strong>，可以省点钱，更多请查看<a href="https://aws.amazon.com/ec2/spot/" target="_blank" rel="external">这里</a>。如果 spot instances 不可用的话，那么选择 on-demand instances</li>
<li>在启动这些实例的时候，需要指定 <strong>Security Group</strong>，创建允许 HTTP(TCP 端口 80) 和 SSH(TCP 端口 22) 的 security group</li>
<li>同样也需要指定一个已经存在的密钥对文件（或者生成一个）以连接这些实例</li>
<li>启动实例之后，可能需要等待几分钟，在 web 控制台可以查看目前的状况</li>
<li>用 SSH 及 PEM 文件来连接到这些实例。</li>
</ol>
<p>启动完成后大概是这样：</p>
<p><img src="/images/cc20.jpg" alt="cc20"></p>
<h2 id="u7CFB_u7EDF_u6027_u80FD_u6D4B_u8BC4"><a href="#u7CFB_u7EDF_u6027_u80FD_u6D4B_u8BC4" class="headerlink" title="系统性能测评"></a>系统性能测评</h2><p>我们需要在已经启动的实例中安装性能测评工具。通过这个来评估完成一个任务所需的最佳实例组合以做到多快好省。</p>
<p>虽然云服务提供商是利用虚拟化技术来提供资源，但是需要知道实例的性能一来不是稳定的，二来也不保证达到某个水平。这里我们使用 <code>sysbench</code> 来评估性能，它是一个轻量级跨平台的性能测试软件，能够快速评估 CPU，内存和文件读写性能。</p>
<p>用 <code>ssh -i keyfile.pem ubuntu@dnsaddress</code> 来进行连接</p>
<p>然后执行下面的命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sysbench</span><br></pre></td></tr></table></figure>
<p>安装完成之后就可以按照给出的三个配置来进行测试。</p>
<h3 id="CPU__u6D4B_u8BD5"><a href="#CPU__u6D4B_u8BD5" class="headerlink" title="CPU 测试"></a>CPU 测试</h3><p>分别在三个不同的机器运行下列命令，统计结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysbench --num-threads=<span class="number">8</span> --test=cpu --cpu-max-prime=<span class="number">20000</span> run</span><br><span class="line">sysbench --num-threads=<span class="number">1</span> --test=cpu --cpu-max-prime=<span class="number">40000</span> run</span><br><span class="line">sysbench --num-threads=<span class="number">4</span> --test=cpu --cpu-max-prime=<span class="number">50000</span> run</span><br></pre></td></tr></table></figure>
<p>表后面的三列分别是 <code>t2.small</code>, <code>t2.medium</code>, <code>t2.large</code> 的总时间</p>
<table>
<thead>
<tr>
<th style="text-align:center">Max Prime</th>
<th style="text-align:center">Thread</th>
<th style="text-align:center">Time(s)</th>
<th style="text-align:center">Time(m)</th>
<th style="text-align:center">Time(l)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">20000</td>
<td style="text-align:center">8</td>
<td style="text-align:center">29.4015s</td>
<td style="text-align:center">14.8129s</td>
<td style="text-align:center">14.8693s </td>
</tr>
<tr>
<td style="text-align:center">40000</td>
<td style="text-align:center">1</td>
<td style="text-align:center">77.7609s</td>
<td style="text-align:center">76.0034s</td>
<td style="text-align:center">77.1984s</td>
</tr>
<tr>
<td style="text-align:center">50000</td>
<td style="text-align:center">4</td>
<td style="text-align:center">104.8054s</td>
<td style="text-align:center">51.5801</td>
<td style="text-align:center">52.4278s</td>
</tr>
</tbody>
</table>
<p>可以看到其实在当前任务下，<code>t2.medium</code> 与 <code>t2.large</code> 的性能差别并不大，就可以根据价格来进行取舍了。</p>
<h3 id="u6587_u4EF6_IO__u6027_u80FD_u6D4B_u8BD5"><a href="#u6587_u4EF6_IO__u6027_u80FD_u6D4B_u8BD5" class="headerlink" title="文件 IO 性能测试"></a>文件 IO 性能测试</h3><p>AWS 通常会保证 Input/Output Operations per Second (IOPS)。不同的硬盘访问逻辑对性能影响很大（缓存导致），传统的机械硬盘受寻址时间和旋转速度的影响，固态硬盘受驱动和设备控制器的影响。</p>
<p>同样用下面的命令来进行测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sysbench --test=fileio --file-total-size=<span class="number">20</span>G prepare </span><br><span class="line"><span class="comment"># 可能需要等待30分钟，使用 byobu / screen / tmux 来保持连接</span></span><br><span class="line"><span class="comment"># 或者可以在 iterm 设置中 profiles -&gt; sessions -&gt; When idel, send ASCII code</span></span><br><span class="line"><span class="comment"># 又或者 在客户端的 ~/.ssh/ 文件夹中添加 config 文件，并添加配置： ServerAliveInterval 60 </span></span><br><span class="line"></span><br><span class="line">sysbench --test=fileio --file-total-size=<span class="number">20</span>G --file-test-mode=rndrw --init-rng=on --max-time=<span class="number">300</span> --max-requests=<span class="number">0</span> run</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">\</th>
<th style="text-align:center">t2.small</th>
<th style="text-align:center">t2.medium</th>
<th style="text-align:center">t2.large</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Read(Gb)</td>
<td style="text-align:center">3.8986</td>
<td style="text-align:center">3.9448</td>
<td style="text-align:center">5.6735</td>
</tr>
<tr>
<td style="text-align:center">Written(Gb)</td>
<td style="text-align:center">2.599</td>
<td style="text-align:center">2.6299</td>
<td style="text-align:center">3.7823</td>
</tr>
<tr>
<td style="text-align:center">Total trans(Gb)</td>
<td style="text-align:center">6.4976</td>
<td style="text-align:center">6.5747</td>
<td style="text-align:center">9.4559</td>
</tr>
<tr>
<td style="text-align:center">Speed(Mb/sec)</td>
<td style="text-align:center">22.178</td>
<td style="text-align:center">22.442</td>
<td style="text-align:center">32.276</td>
</tr>
</tbody>
</table>
<p>比较一下表中的数据，是不是随着价格的提高，性能也有对应比例的提高？</p>
<p>可以看到从 small 到 medium 几乎没有提升，但是到 large 就有比较大的提升</p>
<h2 id="Web__u670D_u52A1_u5668_u6027_u80FD_u6D4B_u8BD5"><a href="#Web__u670D_u52A1_u5668_u6027_u80FD_u6D4B_u8BD5" class="headerlink" title="Web 服务器性能测试"></a>Web 服务器性能测试</h2><p>这门课上我们会学会如何配置，搭建和部署 web 服务。所以需要熟悉如何折腾服务器。这里我们会在每个实例中安装和部署一个简单的 web 服务器，修改一下主页以便测试和评分。</p>
<p><a href="https://youtu.be/6_tPobCyF9o" target="_blank" rel="external">Apache 简介视频（墙外）</a></p>
<p>LAMP = Linux + Apache + MySQL + PHP</p>
<p>用以下命令安装 apache：<code>sudo apt-get install apache2</code></p>
<p>安装完成之后，用自己的浏览器访问这个实例的地址，应该就可以看到 Apache 的欢迎页面（这里需要在 Security Group 中允许 HTTP 访问）</p>
<p><img src="/images/14529800450459.jpg" alt=""></p>
<p>如果访问 <code>cd /var/www/html</code> 就可以看到有一个 <code>index.html</code> 页面。</p>
<p>我们把这个页面的内容替换成：</p>
<p><code>15619 is awesome!</code> （<code>sudo vim index.html</code> 然后命令模式下 <code>dG</code>）</p>
<p>再次访问的时候就可以看到变化了</p>
<p>然后我们来安装 apachebench，也就是服务器管理器，命令如下：</p>
<p><code>sudo apt-get install apache2-utils</code></p>
<p>安装完成后，输入 <code>ab</code> 应该能看到命令界面，一个简单的测试命令为：</p>
<p><code>ab -n 1000 -c 100 http://localhost/</code> (一次 1000 个 request，一共 100 次，最后是想要测试的页面)，然后就可以看到各种数据统计。</p>
<p>在之后项目中，可能会用一组 load generators 来访问 web service 以检验你的 web 服务的性能和正确性。通常来说用平均每秒可以处理的请求数来衡量性能。正确率会基于字符串或正则表达式来拼配。类似于下图：</p>
<p><img src="/images/14529809204231.jpg" alt=""></p>
<p>地址为 <code>http://p0.loadgen.theproject.zone</code></p>
<p>VM 的地址就是 EC2 的 public dns 地址；然后输入 andrew id 和提交密码(在页面上方)</p>
<p>测试成功的话会显示 <code>Success!! Check TPZ for your score</code>，然后就可以课程网站上查看自己的成绩。</p>
<h2 id="Vertical_Scaling"><a href="#Vertical_Scaling" class="headerlink" title="Vertical Scaling"></a>Vertical Scaling</h2><p>根据需要来改变所需的系统资源称为 Vertical Scaling。</p>
<p>在这个场景中，我要启动一个 load generator，它会在一个数据中心实例上创造一些负载。通过一个恒定的负载，来比较不同类型实例的吞吐量（用 rps 来衡量，每秒处理的访问量）。</p>
<p>在这里我们不能 SSH 连接到这些实例，但是可以通过访问特定的 endpoint 来查看当前的情况，具体步骤如下：</p>
<ol>
<li>先创建两个实例，一个是 <code>m3.medium</code> 类型为 <code>ami-ba2c77d0</code> 的 load generator 实例，另一个是 <code>m3.medium</code> 类型为 <code>ami-ec144c86</code> 的数据中心实例（这里我用的是竞价型，比较便宜）</li>
<li>如果是用竞价型，那么需要在实例创建时再添加一次标签，因为之前添加的是请求的标签</li>
<li>访问 load generator，如下图所示</li>
</ol>
<p><img src="/images/cc21.jpg" alt="c"></p>
<p>输入提交密码和 andrew id 之后，进入下一步并输入数据中心的访问地址。第一次会出错，只要刷新一下就好，然后就可以等待测试完成，记录下日志数据。</p>
<p>然后使用 <code>m3.large</code> 再来重复一次，比较一下得到的数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">RPS</th>
<th style="text-align:center">Minute 1</th>
<th style="text-align:center">Minute 2</th>
<th style="text-align:center">Minute 3</th>
<th style="text-align:center">Minute 4</th>
<th style="text-align:center">Minute 5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">m3.medium</td>
<td style="text-align:center">215.12</td>
<td style="text-align:center">467.34</td>
<td style="text-align:center">460.19</td>
<td style="text-align:center">466.87</td>
<td style="text-align:center">466.79</td>
</tr>
<tr>
<td style="text-align:center">m3.large</td>
<td style="text-align:center">1133.86</td>
<td style="text-align:center">1911.31</td>
<td style="text-align:center">1870.61</td>
<td style="text-align:center">1866.46</td>
<td style="text-align:center">1849.03</td>
</tr>
</tbody>
</table>
<p>可以看到从 medium 到 large 的提升还是非常大的。</p>
<p>完成之后记得删除对应的实例</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>了解了基本的原理和工具后，这一讲我们用一个实际的例子来上手 AWS。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://yoursite.com/tags/AWS/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="实例" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 0 课 阅读材料]]></title>
    <link href="http://yoursite.com/2016/01/16/cc-0/"/>
    <id>http://yoursite.com/2016/01/16/cc-0/</id>
    <published>2016-01-16T16:37:56.000Z</published>
    <updated>2016-01-16T19:51:25.000Z</updated>
    <content type="html"><![CDATA[<p>这一部分内容主要是云计算的理论知识，由于时间缘故使用英文原文，关键要点会作为单独的『课』来进行介绍。</p>
<a id="more"></a>
<hr>
<h1 id="Cloud_Computing_Overview"><a href="#Cloud_Computing_Overview" class="headerlink" title="Cloud Computing Overview"></a>Cloud Computing Overview</h1><p>Welcome to this online course on cloud computing. This domain is emerging and fast-evolving. Here, we will introduce the big picture of cloud computing, as well as explain how it has evolved to its current state. Learning these concepts will give you a better understanding about some of the motivating factors behind cloud computing services and why it is one of the fastest growing technology segments in the industry today.</p>
<p>In the first unit of the course, we will:</p>
<ul>
<li>introduce some of the fundamental ideas behind cloud computing,</li>
<li>explore the evolution of computing and the emergence of the cloud,</li>
<li>compare and contrast the different service models and types of clouds,</li>
<li>discuss some cloud use cases and popular cloud stacks</li>
</ul>
<p>Cloud computing can be thought of as an evolved response to the computing needs of today. Our world is increasingly connected and data driven. Users, whether at home or work, generate and consume large amounts of data from various sources. A massive challenge has arisen in terms of managing and exploiting this data. Starting with this module, and throughout the course, you will see how cloud computing plays a central role in meeting this challenge.</p>
<h2 id="Definition_of_Cloud_Computing"><a href="#Definition_of_Cloud_Computing" class="headerlink" title="Definition of Cloud Computing"></a>Definition of Cloud Computing</h2><p><strong>Cloud Computing</strong></p>
<p>Cloud computing offers the use of computing resources as a service over the network. A cloud computer is simply a large distributed computing infrastructure that users have access to over a network. Similar to some other domains, cloud computing came about through the maturity of enabling technologies while attempting to satisfy economic needs. In this course, we will provide an introduction to cloud computing and then cover relevant topics, in varying detail, including hardware and software infrastructure, resource management (virtualization), cloud storage, and programming models.</p>
<p>In the first unit of this course we will start with a simple overview of cloud computing, its definition, motivations, evolutions, building blocks, service models and use cases. We will also discuss economics, risks, benefits and security.</p>
<p><strong>What is Cloud Computing?</strong></p>
<blockquote>
<p>Cloud Computing(definition)<br>The delivery of computing as a service over a network, whereby distributed resources are provided to the end user as a utility.</p>
</blockquote>
<p>Information technology (IT) has become an essential requirement for most organizations to function effectively. Typically, and depending on a specific organization’s needs, IT has three components associated with it (Figure 1.1) - application software, development platforms and the underlying infrastructure:</p>
<p><img src="/images/14529625854236.jpg" alt=""><br>Figure 1.1: Typical Components of Information Technology.</p>
<p>Traditionally, an organization that needs to deploy a particular IT solution has to procure, setup and maintain the infrastructure and the application; certain organizations may decide to develop their own software, in which case they need to manage development platforms as well. The organization hence “owns” the solution, which allows full control over the solution, including, for example, access security and customization, however, it has some drawbacks:</p>
<ol>
<li>Organizations must pay upfront to buy a particular solution, which commits significant capital for long-lived IT resources.</li>
<li>Organizations are solely responsible for the management of their IT solutions. Organizations must have hardware maintenance contracts for the acquired IT solutions. System administrators will have to be hired to monitor hardware and software which has to be updated and maintained. Organizations also have to pay for power and cooling to keep the hardware running. Therefore, in addition to upfront costs, organizations have to budget for recurring costs.</li>
<li>The IT solution typically has a fixed size and will have to be modified to scale when the needs grow or shrink. (For example, as the number of employees grows, the organization will have to purchase additional hardware and/or software to keep up with increasing demands).</li>
<li>Typically IT systems suffer from low average utilization. Utilization refers to the proportion of time (expressed usually as a percentage) that an IT system is being used to capacity. For example, email services in a large organization typically see the most amount of traffic at 8 am, when people sign in and check email. Utilization tapers off towards close of business and is practically nil after hours. Further, since IT systems consume energy, even at idle, they leave a prominent carbon footprint.</li>
</ol>
<p>Many of the disadvantages listed above emanate from the ownership of IT. However, with the evolution of computing technology, it is no longer necessary for organizations to own IT systems. Many of the IT needs of organizations can be provided to them as services. Cloud computing is the transformation of owned IT products into services that can be availed from a cloud service provider.</p>
<p>The transformation of a certain technology from a product to a service is not new. A similar transformation evolved for electricity, which initially had to be produced near the device or service requiring it. The development of large power plants, electric transmission systems and grids has led to the rise of electric power as a utility, (a service that people can obtain and pay for as needed).</p>
<p>The following video (Video 1.1) discusses the transformation of IT from a product to a service:</p>
<p><a href="http://youtu.be/HaVqHgg7zv4" target="_blank" rel="external">Video 1.1: Introduction to Cloud Computing</a></p>
<p>In cloud computing, users or organizations use computing resources as a service and pay for them as a utility, in a pay-as-you-go model. When a request is made for computing resources, the cloud provider typically provisions these resources, in a rapid manner (minutes or hours). As the need for these resources changes, users or organizations can rapidly scale up or down their resources on demand.</p>
<p>The cloud model offers users and organizations several benefits, including: reduced upfront cost, as IT services can be obtained in a pay-as-you-go model; the convenience of fast resource provisioning, which significantly reduces the time to market for IT solutions; and rapid scalability of computing resources, as they can be scaled up and down on demand. Cloud providers’ resources are shared by multiple users, thereby improving utilization and reducing carbon footprint.</p>
<p>In spite of all of its advantages, cloud computing is still an emerging and maturing technology and comes with many risks and challenges which will be later covered in this unit.</p>
<h2 id="Pre-Cloud_Computing_Domains_and_Applications"><a href="#Pre-Cloud_Computing_Domains_and_Applications" class="headerlink" title="Pre-Cloud Computing Domains and Applications"></a>Pre-Cloud Computing Domains and Applications</h2><p><strong>Domains and Application Examples</strong></p>
<p>Now that we have defined what cloud computing is, let us look at examples of how computing was utilized in different domains such as business computing, scientific computing and personal computing before the emergence of cloud computing.</p>
<p>Business computing: Examples of traditional management information systems include logistics and operations, enterprise resource planning (ERP), customer relation management (CRM), office productivity and business intelligence (BI). Such tools enabled more streamlined processes that led to improved productivity and reduced cost across a variety of enterprises.</p>
<p>As an example, CRM software allows companies to collect, store, manage and interpret a variety of data about past, current and potential future customers. CRM software offers an integrated view (in real-time or near real-time) of all organizational interactions with customers. For example, for a manufacturing company, CRM software could be used by a sales team to schedule meetings, tasks and follow-ups with clients. A marketing team could target clients with campaigns based on specific patterns. Billing teams can track quotes and invoices. As such, it is a centralized repository for storing this information. To enable this functionality, a variety of hardware and software technologies are utilized by the organization and sales teams in order to collect the data which needs to be stored and analyzed using various database and analytics systems.</p>
<p>Scientific computing: Scientific computing uses mathematical models and analysis techniques implemented on computers to attempt to solve scientific problems. A popular example is computer simulation of physical phenomena. This field has disrupted the traditional theoretical and laboratory experimental methods by enabling scientists and engineers to reconstruct known events or to predict future situations through developing programs to simulate and study different systems under different circumstances. Such simulations typically require a very large number of calculations which are often run on expensive supercomputers or distributed computing platforms.</p>
<p>Personal computing: In personal computing, a user runs various applications on a general-purpose computer. Examples of such applications include office productivity software such as word processing and spreadsheets, or communication such as email clients or entertainment such as video games or playing multimedia files. A personal computing user typically owns, installs and maintains the software and hardware utilized to carry out such tasks.</p>
<p><strong>Addressing Scale</strong></p>
<p>hich can provide the necessary upgrades to the service level. In many cases, vertical scaling consists of upgrading or replacing servers and storage systems with newer, faster servers or storage arrays with increased capacity. This process could take months to plan and execute, along with a window where the service might experience some downtime.</p>
<p>In certain types of systems, scaling is also done horizontally, by increasing the amount of resources dedicated to the system. An example of this is in high-performance computing, where additional servers and storage can be added to improve the performance of the system, thereby leading to a higher number of calculations that can be performed per second, or increasing the storage capacity of the system. Just like vertical scaling, this process can take months to plan and execute, with downtimes also a possibility.</p>
<p>Since companies owned and maintained their IT equipment, as the cost of addressing scale continued to rise, companies identified other methods to reduce cost. Large companies consolidated the computing needs of different departments into a single large data center whereby they consolidated real estate, power, cooling, and networking in order to reduce cost. On the other hand, small and medium size companies could lease real-estate, network, power, cooling and physical security by placing their IT equipment in a shared data center. This is typically referred to as a co-location service which was adopted by small to medium sized companies who did not want to build their own data centers in-house. Co-location services continues to be adopted in various domains as a cost-effective approach to reduce operational expenses.</p>
<p>Scale has impacted all aspects of business computing. For example, scale has impacted CRM systems through the increase of clients or through the amount of information that we store and analyse about clients. Business computing has addressed scale through vertical and horizontal scaling as well as consolidation of IT resources to data centers and co-location. In scientific computing, parallel and distributed systems have been adopted in order to scale up the size of the problems and the precision of their numerical simulations. One definition of parallel processing is the use of multiple homogenous computers that share state and function as a single large computer in order to run large scale or high precision calculations. Distributed computing is the use of multiple autonomous computing systems connected by a network in order to partition a large problem into subtasks that are run concurrently and communicate via messages over the network. The scientific community continued to innovate in these domains in order to address scale. In personal computing, scale has impacted it through increased user demands brought on by richer content and diverse applications. Users therefore scale up their owned personal computing device to keep up with these demands.</p>
<p><strong>Rise of Internet Services</strong></p>
<p>The late 90s marked a steady increase in the adoption of these computing applications and platforms across domains. Soon, software was expected to not only be functional, but also capable of producing value and insight for business and personal requirements. The use of these applications became collaborative; applications were mixed and matched to feed information to each other. IT was no longer just a cost center for a company, but a source of innovation and efficiency.</p>
<p><img src="/images/14529628961629.jpg" alt=""><br>Figure 1.2: Comparing Traditional and Internet-Scale Computing.</p>
<p>The 21st century has been marked by an explosion in the volume and capacity of wireless communications, the World Wide Web, and the Internet. These changes have led to a network- and data-driven society, where producing, disseminating and accessing digitized information is simplified. The Internet is estimated to have created a global marketplace of billions of users, up from 25 million in 1994 (Figure 1.3 (a)) [1] . This rise in data and connections is valuable to businesses. Data creates value in several ways, including by enabling experimentation, segmenting populations and supporting decision-making with automation. [2] By embracing digital technologies, the world’s top 10 economies are expected to increase their output by over a trillion dollars by 2020. [3]</p>
<p>The increasing number of connections enabled by the Internet has also driven its value. Researchers have hypothesized that the value of a network varies superlinearly as a function of the number of users. Thus, at internet scale, gaining and retaining customers is a priority, and this is done by building reliable and responsive services, and making changes based on observed data patterns.</p>
<p><img src="/images/14529629235564.jpg" alt=""><br>Figure 1.3 (a): Increasing number of Internet Users per year. [1]</p>
<p><img src="/images/14529629323895.jpg" alt=""><br>Figure 1.3 (b): Increasing number of data stored per year. [5]</p>
<p>Some examples of Internet-scale systems include:</p>
<ol>
<li>Search engines that crawl, store, index, and search (upto petabyte-sized) large data sets. For instance, Google started as a giant web index that crawled and analyzed web traffic, once every few days and matched these indices to keywords. Now, it updates its indices in near-real-time and is one of the most popular ways to access information on the Internet. Their index has trillions of pages with a size of thousands of terabytes. [4]</li>
<li>Social networks like Facebook and LinkedIn that allow users to create personal and professional relationships and build communities based on similar interests. Facebook, for instance, now supports over a billion active users per month.</li>
<li>Online retail services like Amazon maintain a global inventory of millions of products, which are sold to over 200 million customers, with net sale volumes of almost $90 billion annually.</li>
<li>Rich, streaming multimedia applications allow people to watch and share videos and other forms of rich content. One such example, YouTube, handles uploads of 300 minutes of video per second.</li>
<li>Real-time communications systems for audio, video and text chatting like Skype which clock more than 50 billion minutes of calls per month.</li>
<li>Productivity and collaboration suites that serve millions of documents to many concurrent users allowing real-time, persistent updates. For e.g. Office 365 claims to support 50 million monthly active collaborators.</li>
<li>CRM applications by providers like SalesForce are deployed at over a hundred thousand organizations. Large CRMs now provide intuitive dashboards to track status, analytics to find the customers that generate the most business and revenue forecasting to predict future growth.</li>
<li>Data mining and business intelligence applications that analyze the usage of other services (like those above) to find inefficiencies and opportunities for monetization.</li>
</ol>
<p>Clearly, these systems are expected to deal with a high volume of concurrent users. This requires an infrastructure with the capacity to handle large amounts of network traffic, generate and securely store data, all without any noticeable delays. These services derive their value by providing a constant and reliable standard of quality. They also provide rich user interfaces for mobile devices and web browsers, making them easy to use, but harder to build and maintain.</p>
<p>We summarize some of the requirements of Internet-scale systems here:</p>
<ol>
<li>Ubiquity—being accessible from anywhere at any time, from a multitude of devices. For instance, a salesperson will expect their CRM service to provide timely updates on a mobile device to make visits to clients shorter, faster and more effective. The service should function smoothly under a variety of network connections.</li>
<li>High-availability—the service must be “always up”. Uptimes are measured in terms of number of nines. Three nines, or 99.9%, implies that a service will be unavailable for 9 hours a year. Five nines (about 6 minutes a year) is a typical threshold for a high-availability service. Even a few minutes of downtime in online retail applications can impact millions of dollars of sales.</li>
<li>Low latency—fast and responsive access times. Even slightly slower page load times have been shown to significantly reduce the usage of that web page. For instance, increasing search latency from 100 ms to 400 ms decreases the number of searches per user from 0.8% to 0.6%, and the change persisted even after the latency was reduced to original levels.</li>
<li>Scalability—the ability to deal with seasonality and virality, which causes peaks and troughs in the traffic over long and short periods of time. On days like “Black Friday” and “Cyber Monday”, retailers like Amazon must handle several times the network traffic than on average.</li>
<li>Cost effectiveness—an Internet-scale service requires much more infrastructure than a traditional application as well as better management. One way to streamline costs is by making services easier to manage, and reducing the number of administrators handling a service. Smaller services can afford to have a low service-to-admin ratio (e.g. 2:1, meaning a single administrator must maintain two services); however, to maintain profitability, services like Microsoft Bing must have high service-to-admin ratio (e.g. 2500:1, meaning a single administrator maintains 2500 services) [6] .</li>
<li>Interoperability—many of these services are often used together and hence must provide an easy interface for reuse and support standardized mechanisms for importing and exporting data. For example, many other services (like Uber) may integrate Google Maps within their products to provide simplified location and navigation information to users.</li>
</ol>
<p>We will now explore some of the early solutions to the various problems above [7] . The first challenge to be tackled was the large round-trip time for early web services that were mostly located in the United States. The earliest mechanisms to deal with the problems of low latency (due to distant servers) and server failure simply relied on redundancy. One technique for achieving this was by “mirroring” content, whereby copies of popular web pages would be stored at different locations around the world. This minimized the amount of load on the central server, reduced the latency perceived by end-users, and allowed traffic to be switched over to another server in case of failures. The downside of this was an increase in complexity to deal with inconsistencies if even one copy of the data were to be modified. Thus, this technique is more useful for static, read-heavy workloads, such as serving images, videos or music. Due to the effectiveness of this technique, most Internet-scale services use content delivery networks (CDNs) to store distributed global caches of popular content. For example, Cable News Network (CNN) now maintains replicas of their videos on multiple “edge” servers at different locations worldwide, with personalized advertising per location.</p>
<p>Of course, it did not always make sense for individual companies to buy dozens of servers across the world. Cost efficiencies were often gained by using shared hosting services. Here, shares of a single web server would be leased out to multiple tenants, amortizing the cost of server maintenance. Shared hosting services could be highly resource-efficient, as the resources could be over-provisioned under the assumption that not all services would be operating at peak capacity at the same time (an over-provisioned physical server is one where the aggregate capacity of all the tenants is greater than the actual capacity of the server). The downside was that it was nearly impossible to isolate the tenants’ services from those of their neighbors. Thus, a single overloaded or error-prone service could adversely impact all its neighbors. Another problem arose because tenants could often be malicious and try to leverage their co-location advantage to steal data or deny service to other users.</p>
<p>To counter this, Virtual Private Servers were developed as variants of the shared hosting model. A tenant would be provided with a virtual machine (VM) on a shared physical server (we talk more about virtual machines and their properties later). These VMs were often statically allocated and linked to a single physical machine, thus they were difficult to scale and often needed manual recovery from any failures. Though they could no longer be overprovisioned, they had better performance and security isolation between co-located services than simple resource sharing.</p>
<p>Another problem of sharing public resources was that it required storing private data on third-party infrastructure. Some of the Internet-scale services we described above could not afford to lose control over data storage, since any disclosure of their customers private data would have disastrous consequences. Hence, these companies needed to build their own global infrastructure. Before the advent of the public cloud, such services could only be deployed by large corporations like Google and Amazon. Each of these companies would build large, homogeneous data centers across the globe using commodity off-the-shelf components, where a data center could be thought of as a single, massive warehouse-scale computer (WSC). A WSC provided an easy abstraction to globally distribute applications and data, while still maintaining ownership.</p>
<p>Due to the economies of scale, the utilization of a data center could be optimized to reduce costs. This was still not as efficient as publicly sharing resources, these warehouse-scale computers had many desirable properties that served as foundations for building Internet-scale services. The scale of computing applications progressed from serving a fixed user base to serving a dynamic global population. Standardized WSCs allowed large companies to serve such large audiences. An ideal infrastructure would combine the performance and reliability of a WSC, with the sharing hosting model. This would enable even a small corporation to develop and launch a globally competitive application, without the high overhead of building large datacenters.</p>
<p>Another approach to share resources was Grid Computing, which enabled the sharing of autonomous computing systems across institutions and geographical locations. Several academic and scientific institutions would collaborate and pool together their resources towards a common goal. Each institution would then join a “virtual organization” by dedicating a specific set resources via well-defined sharing rules. Resources would often be heterogeneous and loosely coupled requiring complex programming constructs to stitch together. Grids were geared towards supporting non-commercial research and academic projects and relied on existing open source technologies.</p>
<p>The cloud was a logical successor that combined many of the features of the solutions above. For example, instead of universities contributing and sharing access to a pool of resources using a Grid, the cloud allows them to lease computing infrastructure that was centrally administered by a Cloud Service Provider (CSP). As the central provider maintained a large resource pool to satisfy all clients, the cloud made it easier to dynamically scale up and down demand within a short period of time. Instead of open standards like the grid, however, cloud computing relies on proprietary protocols and needs the user to place a certain level of trust in the CSP.</p>
<p>The rest of this unit covers how the cloud evolved to make computing a public utility that could be metered and used.</p>
<p><strong>References</strong></p>
<ol>
<li>Real Time Statistics Project (2015). Internet Live Stats. www.internetlivestats.com/.</li>
<li>IBM (2015). What is Big Data?. www-01.ibm.com/software/data/bigdata/what-is-big-data.html.</li>
<li>Accenture (2015). Increased Use of Digital Technologies Could Add $1.36 Trillion to World’s Top 10 Economies in 2020. newsroom.accenture.com/subjects/strategy/increased-use-of-digital-technologies-could-add-over-1-trillion-dollars-to-worlds-top-10-economies-in-2020-according-to-new-study-from-accenture.htm.</li>
<li>Google Inc. (2015). How Search Works. <a href="https://www.google.com/insidesearch/howsearchworks/thestory/" target="_blank" rel="external">https://www.google.com/insidesearch/howsearchworks/thestory/</a>.</li>
<li>Hilbert, Martin and Lopez, Priscila (2011). The world’s technological capacity to store, communicate, and compute information.</li>
<li>Hamilton, James R and others (2007). On Designing and Deploying Internet-Scale Services.</li>
<li>Brewer, Eric and others (2001). Lessons from giant-scale services.</li>
</ol>
<h2 id="Evolution_of_Cloud_Computing"><a href="#Evolution_of_Cloud_Computing" class="headerlink" title="Evolution of Cloud Computing"></a>Evolution of Cloud Computing</h2><p><strong>Events and Innovations</strong></p>
<p>The cloud-computing concept first appeared during the early 1950s, when several academics, including Herb Grosch, John McCarthy, and Douglas Parkhill, [1] [2] envisioned computing as a utility similar to electric power. Over the next few decades, several emerging technologies laid the foundations for cloud computing (Figure 1.4). More recently, rapid growth of the World Wide Web and the advent of large Internet giants, such as Google and Amazon, finally led to the creation of an economic and business environment that allowed the cloud-computing model to flourish.</p>
<p><img src="/images/14529690211629.jpg" alt=""><br>Figure 1.4: Evolution of cloud computing.</p>
<p><strong>Evolution of Computing</strong></p>
<p>Since the 1960s, some of the earliest forms of computers that were used by organizations were mainframe computers. Multiple users could share and connect to mainframes over basic serial connections using terminals. The mainframe was responsible for all the logic, storage, and processing of data, and the terminals connected to them had limited computational power, if any. These systems continued in widespread use for more than 30 years and, to some degree, continue to exist today.</p>
<p>With the birth of personal computing, cheaper, smaller, more powerful processors and memory led to a swing in the opposite direction, in which users ran their own software and stored data locally. This situation, in turn, led to issues of ineffective data sharing and rules to maintain order within an organization’s IT environment.</p>
<p>Gradually, through the development of high-speed network technologies, local area networks (LANs) were born that allowed computers to connect and communicate with each other. Thus, vendors designed systems that could encapsulate the benefits of both personal computers and mainframes, resulting in client-server applications that became popular over LANs. Clients would typically run client software (and process some data) or a terminal (for legacy applications) that connected to a server. The server, in the client-server model, possessed the application, storage, and data logic.</p>
<p>Eventually, in 1990s, the global information age emerged, with the Internet rapidly being adopted. Network bandwidth improved by many orders of magnitude, from ordinary dial-up access to dedicated fiber connectivity today. In addition, cheaper and more powerful hardware emerged. Furthermore, the evolution of the World Wide Web and dynamic websites necessitated multitier architectures.</p>
<p>Multitier architectures enabled the modularization of software by separating the application presentation, application logic, and storage as individual entities. With this modularization and decoupling, it was not long before these individual software entities were running on distinct physical servers (typically due to differences in hardware and software requirements). This led to an increase of individual servers in organizations; however, it also led to poor average utilization of server hardware. In 2009, the International Data Corporation (IDC) estimates that the average x86 server has a utilization rate of approximately 5 to 10%. [3]</p>
<p>Virtual machine technology matured well enough in the 2000s to become available as commercial software. Virtualization enables an entire server to be encapsulated as an image, which can be run seamlessly on hardware and enable multiple virtual servers to run simultaneously and share hardware resources. Virtualization thus enables servers to be consolidated, which accordingly improves system utilization.</p>
<p>Simultaneously, grid computing gained traction in the scientific community in an effort to solve large-scale problems in a distributed fashion. With grid computing, computer resources from multiple administrative domains work in unison for a common goal. Grid computing brought forth many resource-management tools (e.g., schedulers and load balancers) to manage large-scale computing resources.</p>
<p>As the various computing technologies evolved, so did the economics of computing. Even during the early days of mainframe-based computing, companies such as IBM offered to host and run computers and software for various organizations, such as banks and airlines. In the Internet Age, third-party Web hosting also become popular. With virtualization, however, providers have unparalleled flexibility in accommodating multiple clients on a single server, sharing hardware and resources between them.</p>
<p>The development of these technologies, coupled with the economic model of utility computing, is what eventually evolved into cloud computing.</p>
<p><strong>Enabling Technologies</strong></p>
<p>Cloud computing has various enabling technologies (Figure 1.5), which include networking, virtualization and resource management, utility computing, programming models, parallel and distributed computing, and storage technologies.</p>
<p><img src="/images/14529690849852.jpg" alt=""><br>Figure 1.5: The enabling technologies in cloud computing.</p>
<p>The emergence of high-speed and ubiquitous networking technologies have greatly contributed to cloud computing as a viable paradigm. Modern networks make it possible for computers to communicate in a fast and reliable manner, which is important if we are to use services from a cloud provider. This enabled the user experience with software running in a remote data center to be comparable to the experience of software running on a personal computer. Webmail is a popular example, as is office productivity software. In addition, virtualization is key to enabling cloud computing. As mentioned above, virtualization allows managing the complexity of the cloud via abstracting and sharing its resources across users through multiple virtual machines. Each virtual machine can execute its own operating system and associated application programs. Virtualization for cloud computing is covered in Unit 3.</p>
<p>Technologies such as large-scale storage systems, distributed file systems, as well as novel database architectures are crucial for managing and storing data in the cloud. Cloud storage technologies are covered in Unit 4.</p>
<p>Utility computing offers numerous charging structures for the leasing of compute resources. Examples include pay-per-resource-hour, pay-per-guaranteed-throughput, and pay-per-data stored per month etc.</p>
<p>Parallel and distributed computing allow distributed entities located at networked computers to communicate and coordinate their actions in order to solve certain problems, represented as parallel programs. Writing parallel programs for distributed clusters is inherently difficult. To achieve high programming efficiency and flexibility in the cloud, a programming model is required.</p>
<p>Programming models for clouds give users the flexibility to express parallel programs as sequential computation units (e.g., functions as in MapReduce and vertices as in GraphLab). Such programming models’ runtime systems typically parallelize, distribute, and schedule computational units, manage inter-unit communication, and tolerate failures. Cloud programming models are covered in Unit 5.</p>
<p><strong>RReferences</strong></p>
<ol>
<li>Simson L. Garfinkel (1999). Architects of the Information Society: Thirty-Five Years of the Laboratory for Computer Science at MIT. MIT Press.</li>
<li>Douglas J. Parkhill (1966). The Challenge of the Computer Utility. Addison-Wesley Publishing Company, Reading, MA.</li>
<li>Michelle Bailey (2009). “The Economics of Virtualization: Moving Toward an Application-Based Cost Model.” VMware Sponsored IDC Whitepaper.</li>
</ol>
<h2 id="Cloud_Building_Blocks_and_Service_Models"><a href="#Cloud_Building_Blocks_and_Service_Models" class="headerlink" title="Cloud Building Blocks and Service Models"></a>Cloud Building Blocks and Service Models</h2><p><strong>Cloud Building Blocks</strong></p>
<p>Remember, cloud computing offers the use of computing resources as a service over the network. Before we discuss the service models offered on a cloud, we ought to think about the different layers of hardware and software the are required to build cloud services. Of course, not all service requirements are identical; some cloud users may only desire access to raw infrastructure to build applications on. Others may wish to not deal with the infrastructure at all, but rather, simply develop and deploy applications using an easy-to-use platform. To meet these varied requirements, cloud service providers divide their offerings into various abstract layers.</p>
<p>Here, we introduce a stacked abstraction of the cloud through presenting typical building blocks and discuss their association with three service models in cloud computing. We present four main building blocks in cloud computing: application software, development platforms, resource sharing, and infrastructure, as shown in Figure 1.6. The infrastructure includes the physical resources in a data center. The resource sharing layer typically entails software and hardware techniques that allow the sharing of the physical resources while offering a certain level of isolation. The development platforms are utilized to develop cloud applications.</p>
<p><img src="/images/14529692293425.jpg" alt=""><br>Figure 1.6: Cloud computing building blocks.</p>
<p><strong>Cloud Building Blocks</strong></p>
<p>Application software: The top layer in the stack is the application software, which normally is the system component that the end user utilizes.</p>
<p>Development platforms: The next layer, development platforms, allows application developers to write application software in terms of a cloud’s application programming interface (API). Development platforms typically provide specifications that developers can use for routines, data structures, object classes, libraries and variables.</p>
<p>Resource sharing: Resource sharing mechanisms, the third layer, embody some key cloud ideas:</p>
<ul>
<li>Provide software, computation, network and storage services.</li>
<li>Allow a shared environment whereby multiple hardware images (e.g., virtual machines) and system images (e.g., general-purpose OSs) can run side by side on a single infrastructure along with security, resource, and failure isolations. These isolation properties are provided by a combination of hardware and software techniques that are covered in detail in Unit 3.</li>
<li>Consolidate physical servers into virtual servers that run on fewer physical servers.</li>
<li>Deliver agility and elasticity to rapidly respond to users’ resource and service demands.</li>
</ul>
<p>These ideas usually are addressed through virtualization, a technology discussed in detail in Unit 3.</p>
<p>Infrastructure: Physical resources comprise the bottom layer and, in cloud computing, are primarily deployed on the cloud provider’s side. The broad resource classes, detailed in Unit 2, include the following:</p>
<ul>
<li>Compute resources, typically servers, which are computers designed for enterprise computing (as opposed to user workstations). They usually are rack mounted to utilize space efficiently.</li>
<li>Storage resources maintain the cloud’s data, and application storage use usually is charged in terms of capacity usage (e.g., per gigabyte or terabyte usage).</li>
<li>Network resources enable communication between servers as well as servers and clients.</li>
<li>Software that manages the compute, network and storage infrastructure.</li>
</ul>
<p>Next we will discuss which of these abstractions can be provided as a leased service over a network. For example the services and resources required by a software developer will be different compared to someone who would like to have access to a WebMail application running on the cloud.</p>
<p><img src="/images/cc19.jpg" alt="c"></p>
<p><strong>Cloud Computing Services</strong></p>
<p>In a broad sense, cloud services differ based on the needs of different users. This section reviews three popular types of cloud services:</p>
<ul>
<li>Software as a service (SaaS)</li>
<li>Platform as a service (PaaS)</li>
<li>Infrastructure as a service (IaaS)</li>
</ul>
<p>SaaS is any application in which the end user has access to a software application over the network and pays based on a variety of business models some of which are free. PaaS is the offering of software development platforms as a service which are utilized to develop SaaS applications. Finally, IaaS, is the leasing of virtualized infrastructure over the network. In this last model, the end user has the flexibility to install and use any software they please on the leased infrastructure.</p>
<p>The following video (Video 1.2) reviews these services:</p>
<p><a href="http://youtu.be/ltJmJEI0gGA" target="_blank" rel="external">Video 1.2: Service Models in Cloud Computing</a></p>
<p><strong>The Software-as-a-Service Model</strong></p>
<blockquote>
<p>Software as a Service(definition)<br>Software as a service (SaaS) is a software delivery model in which software and associated data are hosted on a cloud. SaaS applications typically are accessed by users using a thin client via a Web browser.</p>
</blockquote>
<p>SaaS is one of the most common cloud service models in which the cloud provider delivers software as an Internet service (as discussed in Video 1.3). SaaS users simply use their browsers to access the software, thus eliminating the need to install, run, and maintain (update, patch, reconfigure etc.) the application on the user’s computer. The Web browser loads the SaaS application service dynamically and transparently.</p>
<p><a href="http://youtu.be/bzfdewWofSU" target="_blank" rel="external">Video 1.3: Software as a Service</a></p>
<p>SaaS has become a common software delivery model for many business applications, including accounting, collaboration, customer relationship management (CRM), management information systems (MIS), enterprise resource planning (ERP), invoicing, human resource management (HRM), content management (CM) as well as service desk management.</p>
<p>With SaaS, the provider maintains the software and required infrastructure to run it. The provider routinely develops the software, and enhancements are automatically made available to all users the next time a user logs on to the service. In addition, any application data that results from the use of the service resides on the cloud and is available to the user from any location.</p>
<p><strong>Characteristics of SaaS</strong></p>
<p>A vast majority of SaaS solutions are based on what is referred to as multitenant architecture. In this architecture, a single version of the application, with a single configuration, is used for every customer (referred to as a tenant). To enable the service to scale well, it might be installed on several servers at the provider’s side. Dynamic scaling is utilized to allow more users to use the service as it becomes more popular.</p>
<p>Typical characteristics of SaaS include:</p>
<ul>
<li>Web-based access to the software service.</li>
<li>Software is managed from a central location by the cloud provider.</li>
<li>Software is delivered in a one-to-many model in which “one” is the cloud provider and “many” are the cloud users.</li>
<li>The cloud provider handles software upgrades and patches.</li>
</ul>
<p><strong>Pricing Models</strong></p>
<p>Unlike traditional software, which is sold under the software licensing model (with an upfront license cost and an optional ongoing support fee), SaaS providers generally price applications using a monthly or annual subscription fee. This model enables SaaS to fulfill one of the main purported advantages of cloud computing - reducing the capital expenditure or the upfront cost of software. SaaS providers typically charge based on usage parameters, such as the number of users using the application.</p>
<p><strong>Use Cases for SaaS</strong></p>
<p>SaaS is a good model for certain types of applications, such as:</p>
<ul>
<li>Applications that are fairly standardized and do not require custom solutions. E-mail is a good example of a fairly standardized application.</li>
<li>Applications that have a significant need for remote/web/mobile access, such as mobile sales management software.</li>
<li>Applications that have a short-term need, such as collaborative software for a particular project.</li>
<li>Applications in which demand spikes significantly, such as tax or billing software that is used once a month.</li>
</ul>
<p>However, there are situations where SaaS may not be the right choice, such as:</p>
<ul>
<li>Applications that require offline access to data.</li>
<li>Applications that require significant customization.</li>
<li>Applications in which policies or regulations disallow data from being hosted externally.</li>
<li>Applications in which existing in-house solutions satisfy all of the organization’s needs.</li>
</ul>
<p><strong>Examples of SaaS</strong></p>
<p>Web mail is one of the early examples of SaaS. Webmail enabled users with a browser and an Internet connection to access their e-mail anywhere at anytime. Offerings from Hotmail, Yahoo!, and Gmail are extremely popular. These services are based on the “freemium” model, wherein basic services are free, and more advanced features are available with a subscription. Furthermore, providers earn revenue mainly from advertisements that are displayed to the users as they use the service.</p>
<p>Another popular example of SaaS is online office suites, such as Google Drive and Microsoft Office 365, which allow users to create, edit, and share documents online. Google utilizes the freemium model for individual users. Microsoft has a charge model based on the features required and the number of users per month.</p>
<p><strong>The Platform-as-a-Service Model</strong></p>
<blockquote>
<p>Platform as a Service(definition)<br>Platform as a service (PaaS) is a computing platform that allows for the creation of Web applications in a simplified manner without the complexity of purchasing and maintaining any of the underlying software and infrastructure.</p>
</blockquote>
<p>PaaS-based offerings allow users to develop, deploy, and scale applications on platforms that are offered by cloud providers (Video 1.4). PaaS is analogous to SaaS, except that, rather than software delivered over the Web, it is a platform for the creation of software that is delivered over the Web.</p>
<p><a href="http://youtu.be/mxXm5s0hK8A" target="_blank" rel="external">Video 1.4: Platform-as-a-Service</a></p>
<p><strong>Characteristics of PaaS</strong></p>
<p>PaaS offerings vary among providers but usually feature some basic functionality, which includes:</p>
<ul>
<li>Services to develop, test, deploy, host, and maintain applications in the same integrated development environment (IDE).</li>
<li>Web-based user interface (UI) creation tools to help create, modify, and test various UI scenarios.</li>
<li>Multitenant architecture in which multiple concurrent users utilize the same development tools.</li>
<li>Built-in scaling mechanisms of deployed software that can be handled automatically by the cloud provider by load-balancing and failover mechanisms.</li>
</ul>
<p><strong>Pricing Models</strong></p>
<p>Unlike the SaaS pricing model (which is a subscription or advertisement based model), PaaS usually is priced in terms of usage of the platform. For example, Google App Engine’s <a href="https://cloud.google.com/pricing/" target="_blank" rel="external">charge model</a> accounts for an application’s inbound and outbound bandwidth as well as certain API requests. Consequently, the more an application developed using PaaS gets used, the more the PaaS developer gets charged.</p>
<p><strong>Use Cases for PaaS</strong></p>
<p>PaaS is a good model for certain types of applications, such as:</p>
<ul>
<li>Rapid application development scenarios.</li>
<li>Applications that require Web-based infrastructure to handle varying loads from users.</li>
<li>Applications that may not need redeployment or migration to other platforms in the future.</li>
</ul>
<p>There are certain scenarios in which PaaS may not be ideal, such as:</p>
<ul>
<li>When the application needs to be highly portable in terms of where it is hosted because PaaS APIs can vary from one PaaS provider to another.</li>
<li>When proprietary languages or APIs could impact the development process or cause trouble in the future due to vendor lock-in.</li>
<li>When application performance requires customization of the underlying hardware and software.</li>
</ul>
<p><strong>Examples of PaaS</strong></p>
<p>Google App Engine is an example of a PaaS. Using Google’s APIs, developers can create Web and mobile applications that run on Google’s infrastructure.</p>
<p><strong>The Infrastructure-as-a-Service Model</strong></p>
<blockquote>
<p>Infrastructure as a service(definition)<br>Infrastructure as a service (IaaS) is a cloud computing model in which cloud providers make computing resources available to clients, usually in the form of instances or virtual machines.</p>
</blockquote>
<p>In the IaaS model, providers rent out compute resources in the form of instances or virtual machines, which have some form of configurable CPU, memory, disk, and network bandwidth attached to them (Video 1.5). Once provisioned, IaaS users can remotely connect to these instances and configure their choice of platforms and applications. This model offers the most amount of flexibility to the IaaS users in terms of software development and deployment. Rather than purchasing servers, software, data center space, or network equipment, users rent those resources as a fully outsourced service on demand.</p>
<p><a href="http://youtu.be/sjQSV-5RaLU" target="_blank" rel="external">Video 1.5: Infrastructure-as-a-Service</a></p>
<p><strong>Characteristics of IaaS</strong></p>
<p>IaaS has the following characteristics:</p>
<ul>
<li>Computing resources are provided to IaaS users as a service.</li>
<li>IaaS providers provide tools that enable IaaS users to configure the dynamic scaling of resources.</li>
<li>IaaS providers usually have different resource offerings at different costs and follow a utility pricing model (typically calculated hourly).</li>
<li>The same physical resources are shared among multiple users.</li>
</ul>
<p><strong>Pricing Models</strong></p>
<p>Unlike the SaaS pricing model (which is a subscription- or advertisement-based model) or the PaaS model (which usually is priced in terms of number of transactions or bandwidth or storage used), IaaS usually is priced on an hourly basis, per instance. For example, Amazon Elastic Compute Cloud (EC2) offers a spectrum of compute resources as virtualized OS instances, which vary in compute, memory, storage, and bandwidth. At the time of writing, the Amazon EC2 t2.micro instance costs about 1.3 cents an hour when provisioned at Amazon’s Northern Virginia data center.</p>
<p>Cloud providers can also choose to bill on a prorated or non-prorated basis. On a prorated basis, each partial hour is billed partially, while on a non-prorated basis, each partial hour is billed as a full hour. This difference becomes significant when IaaS users need a large number of instances for a short period of time for burst processing. Amazon EC2 instances are billed on a non-prorated basis.</p>
<p><strong>Use Cases for IaaS</strong></p>
<p>IaaS makes sense in a number of situations:</p>
<ul>
<li>When demand for computing resources is volatile. For example, e-commerce sites experience the most demand during holiday seasons.</li>
<li>For new organizations that do not have the capital to invest in infrastructure on site.</li>
<li>When organizations need to grow their IT resources rapidly, such as Internet startup companies.</li>
<li>For temporary projects or temporary infrastructural needs (when organizations require a large amount of compute power for a limited amount of time).</li>
</ul>
<p>IaaS may not be the best option when:</p>
<ul>
<li>Regulatory compliance does not allow data to be offshored or outsourced.</li>
<li>When applications have strict quality-of-service (QoS) requirements.</li>
<li>When organizations have existing in-house customized infrastructure to meet their IT needs.</li>
</ul>
<p><strong>Examples of IaaS</strong></p>
<p>Amazon Web Services (AWS), Microsoft Azure and Rackspace are cloud service providers that offer IaaS products. Specifically, AWS’s Elastic Compute Cloud (EC2) is one of the first commercially successful IaaS products. AWS EC2 rents out instances from various data center locations scattered around the world. Users can choose from various instance types, from a low-memory, single CPU (which costs about several cents an hour), all the way up to multicore, high-performance, GPU-accelerated instances (which can cost upto several US dollars an hour).</p>
<h2 id="Cloud_Deployment_Models"><a href="#Cloud_Deployment_Models" class="headerlink" title="Cloud Deployment Models"></a>Cloud Deployment Models</h2><p><strong>Types of Clouds</strong></p>
<p>There are three well-known deployment models for cloud computing: public, private, and hybrid clouds. A public cloud is owned by a cloud provider but is made available to the public. A private cloud is typically owned by an organization, which also controls the access to the cloud. A hybrid cloud is a combination of public and private clouds. We discuss the different types in terms of ownership, infrastructure, end-user availability, cost, security, and data location.</p>
<p><strong>Public Cloud</strong></p>
<p>In a public cloud, the cloud infrastructure is owned by a cloud provider and is accessible to the public over the Internet (Figure 1.7). The cloud provider hosts the cloud infrastructure, and end users can access it remotely without the need to buy and setup a working environment (i.e., buying hardware and software). Public cloud resources are shared among different end users. Public cloud users are typically charged for the duration for which these services are used. However, public cloud charge models vary across providers. The security and terms of use are defined by the provider, and hence, end users must work within the constraints of the provider when using their services.</p>
<p><img src="/images/14529700702878.jpg" alt=""><br>Figure 1.7: Public cloud.</p>
<p><strong>Private Cloud</strong></p>
<p>In this second type of cloud, the cloud infrastructure is owned by an organization (Figure 1.8). The infrastructure is accessible to specific users via the organization’s intranet. The cloud environment needs to be procured, set up, operated, and maintained by the organization itself. The private cloud resources are typically shared amongst an organizations end users. Unlike the public cloud, security and terms of use of a private cloud are defined by the organization. The entire infrastructure is located in the organization, hence, security can be compliant with the organization’s policies.</p>
<p><img src="/images/14529700996814.jpg" alt=""><br>Figure 1.8: Private cloud.</p>
<p><strong>Hybrid Cloud</strong></p>
<p>In a hybrid cloud, the infrastructure includes an owned private cloud and a leased public cloud (Figure 1.9). Hybrid clouds enable the idea of “cloud bursting,” in which an organization uses its private cloud for most of its needs and dynamically provisions resources in the public cloud when utilization exceeds the capacity of its private cloud.</p>
<p><img src="/images/14529701211775.jpg" alt=""><br>Figure 1.9: Hybrid cloud.</p>
<p>Other types of clouds continue to emerge, for example, Community Clouds which share infrastructure among different organizations that have common security or other concerns. For example, various non-profit organizations that work closely with government might build and share a community cloud. Another type is Distributed Cloud which provides cloud computing using a set of distributed machines located at different geographical locations. An example is Cloud@Home which leverages volunteered resources as a shared resource.</p>
<h2 id="Popular_Cloud_Stacks"><a href="#Popular_Cloud_Stacks" class="headerlink" title="Popular Cloud Stacks"></a>Popular Cloud Stacks</h2><p>We will now do a quick run-down of cloud stacks that are currently popular in the market. We will quickly glance over the services offered by the major cloud providers, viz. Amazon Web Services, Microsoft, Google as well as OpenStack, the open cloud computing platform.</p>
<p><strong>Amazon Web Services (AWS)</strong></p>
<p>As of 2015, AWS is a market leader in several cloud computing segments, particularly in the IaaS space. Amazon Web Services started by commoditizing and leasing out several services that were developed in-house by Amazon’s engineering team to the wider public. AWS started by offering S3, the object storage service, and then went on to provide EC2, the elastic compute cloud. AWS is currently one of the largest cloud computing companies.</p>
<p>AWS’s stack primarily consists of the following components:</p>
<p>Compute: Amazon’s primary compute solution is Elastic Compute Cloud (EC2), which provides users with virtual machines, or instances of various capacities for hourly or longer term rentals. EC2 forms the backbone of the AWS cloud stack in terms of compute infrastructure. EC2 instances can be managed directly through the AWS EC2 APIs, or through other services such as AutoScaling.</p>
<p>Storage: AWS offers multiple products in this space. Block storage is provided by Elastic Block Storage (EBS) volumes, which can be attached and detached from EC2 instances. Object storage is provided by the simple storage service (S3), which allows for binary large objects (BLOBs) to be stored and retrieved using a simple HTTP service. AWS also offers a varied suite of database services, including RDS which offers a managed SQL service, DyanmoDB, which offers a highly scalable, low-latency key-value store, and ElastiCache, an in-memory database store.</p>
<p>Networking: Amazon’s Virtual Private Cloud (VPC), Elastic Load Balancer (ELB) and Route 53 are networking services that can be used to manage the connectivity between your instances and services deployed in AWS and the outside world.</p>
<p>PaaS Products: AWS’s platforms are large and varied to cater to different application needs. AWS provides a suite of analytics platforms such as Elastic MapReduce (EMR), Amazon Kinesis and Redshift. Rapid web application development is possible through AWS Elastic Beanstalk. Amazon also offers many products to manage and control cloud deployments such as CloudFormation, OpsWorks and CodeDeploy.</p>
<p><strong>Microsoft Azure</strong></p>
<p>Microsoft Azure is one of the fastest growing cloud services in the market, with impressive growth and an increasingly expanding portfolio of cloud services. Azure also leverages Microsoft’s large data center presence worldwide, as well as CDN sites that are spread across 24 countries. Subsets of Microsoft’s Cloud Platform are available as the Windows Azure Pack, which allows an organization to build a private cloud which can seamlessly connect and interact with the Azure public cloud.</p>
<p>Compute: Microsoft offers Azure Virtual Machines, which can be configured to run Windows or various flavors of Linux. The virtual machines are managed by Azure Cloud Services, which provides a multi-language cloud management platform. A unique aspect of Azure is the staging environment and simulator, which allows developers to test out a cloud deployment before putting it into production.</p>
<p>Storage: Azure offers several storage solutions, including: Azure Blobs to store binary large objects; Azure Tables, to store NoSQL tables; and Azure Files, which offer SMB-based storage endpoints (Windows-compatible file servers) to mount and store files in the cloud. Azure also offers managed Relational Database services through the Azure SQL Database; a managed NoSQL document database service, DocumentDB; and high-performance key-value cache through Azure Redis Cache. Microsoft also offers a unique storage appliance called StorSimple, which is an SSD/HDD hybrid storage array deployed at the clients side, and also connects to Azure for backup, analytics and/or cloud deployment.</p>
<p>Networking: Microsoft also offers virtual private networking services through Azure Virtual Network. Another unique feature of Microsoft’s Azure cloud is the ability to purchase dedicated fiber connectivity to Microsoft’s data centers through ExpressRoute. Azure Traffic Manager can be used to load balance traffic to Azure Virtual Machines.</p>
<p>PaaS Products: Azure offers several PaaS products: Azure Websites is the primary PaaS platform, which enables developers to deploy scalable web applications on the Azure platform. Azure Mobile Services allow developers to create the infrastructure required to support mobile applications. In the analytics space, Azure offers several products including HDInsight, which is a managed Hadoop cluster service similar to Amazon’s EMR. Microsoft also offers managed Machine Learning and Stream Analytics services to developers.</p>
<p><strong>Google Cloud Platform</strong></p>
<p>Google’s Cloud Platform initially offered only PaaS products and APIs into Google’s most powerful products such as the Translate API. The Google Cloud Platform has now diversified into multiple services in response to the offerings of its competitors.</p>
<p>Compute: Google’s primary compute platform is the Google Compute Engine (GCE), which offers Linux virtual machines of various sizes depending on the application requirements. A unique differentiator of Google’s platform is that instances are billed by the minute, with a minimum charge of 10 minutes.</p>
<p>Storage: Google offers three primary storage services, namely Cloud Storage, which is an object storage service similar to S3 and Azure Blobs. Google’s Cloud Datastore is the managed NoSQL datastore service that allows users to store non-relational data with high scalability, but optionally supports transactions and SQL queries on your data. In addition, Google offers a traditional managed SQL database service called Cloud SQL.</p>
<p>Networking: Google offers several networking products to manage the connections between Google’s cloud services and the outside world, namely Load Balancing, Interconnect and DNS services.</p>
<p>PaaS Products: Google’s primary PaaS offering is Google App Engine (GAE), which allows developers to deploy an application using Google’s SDK. In addition, Google offers data analytics platforms such as BigQuery, which allows users to run SQL-like queries against multi-terabyte datasets. Cloud Endpoints allows developers to create RESTful services accessible from Mobile and browser clients. In addition, Google’s established products such as Prediction and Translate are available as APIs for access to developers to integrate into their own application.</p>
<p><strong>OpenStack</strong></p>
<p>All of the stacks we have looked at so far are proprietary stacks hosted by the companies on their public clouds. The OpenStack model is markedly different as it’s an open-source cloud stack that is available for both public and private clouds. OpenStack defines itself as a “cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface”. OpenStack can be deployed on anywhere from a bunch of machines to an entire datacenter. Public clouds that offer OpenStack include Rackspace and HP Helion.</p>
<p>Compute: OpenStack’s compute offering offers similar services as the public cloud counterparts, with the ability to manage virtualized and commodity server resources, with API-based access. A unique aspect of OpenStack’s compute system (called Nova) is support for a wide range of Hypervisors such as XenServer and KVM, as well as a wide range of hardware support, which includes ARM-based systems.</p>
<p>Storage: OpenStack offers two types of storage services: an object storage service (called Swift), as well as block storage services (called Cinder). These can be deployed and scaled according to environment and the application needs. Database systems can be deployed on top of virtual machines and storage services, if required, but OpenStack does not use or promote any particular type of database solution. Public clouds that use OpenStack, like Rackspace, offer MySQL, Percona or MariaDB deployed on top of OpenStack VMs as a service.</p>
<p>Networking: OpenStack offers a pluggable, scalable and API-driven system called Neutron to manage networks, VLANs and IP address pools for virtual machines. A novel feature of OpenStack networking is support for Software Defined Networks such as OpenFlow, which enable fine-grained configuration of networking hardware in response to provisioning or traffic requirements. More information on Software Defined Networks will be covered later.</p>
<p>PaaS Products: OpenStack itself does not have any PaaS services, but public cloud providers that are built on top of OpenStack have a few. For example, Rackspace provides several platforms for website hosting and managed Hadoop clusters.</p>
<p><strong>References</strong></p>
<ol>
<li>Li Ang, et. al. (2010). CloudCmp: Shopping for a Cloud Made Easy . Proceedings of the 2nd USENIX conference on Hot topics in cloud computing .</li>
</ol>
<h2 id="Cloud_Use_Cases"><a href="#Cloud_Use_Cases" class="headerlink" title="Cloud Use Cases"></a>Cloud Use Cases</h2><p><strong>Use Cases for the Cloud</strong></p>
<p>With the rapid evolution of cloud technologies, there are new use cases emerging every day. In this section, we discuss some of the common cloud use cases.</p>
<p><strong>Web/Mobile Applications</strong></p>
<p>A main driver for cloud computing comes from Web hosting. Websites and Web applications typically are hosted on a server with a dedicated internet connection. Older Web hosting services either provided dedicated servers to clients or gave a fraction of a larger UNIX system to multiple clients. Now, with the advent of cloud computing, Web/mobile applications can be built on top of existing IaaS/PaaS or even SaaS services.</p>
<ul>
<li>SaaS based: Using the SaaS model, organizations can deploy one-size-fits-all applications on the Web. Common examples include WebMail, social networking sites, and utility websites, such as personal organizers, calendars, and planners.</li>
<li>PaaS based: Application developers can use a range of online platforms and tools to create SaaS and mobile applications. Platforms such as Google App Engine, Parse, and AppScale are popular platforms on which Web and mobile applications can be built.</li>
<li>IaaS based: Applications that need even more customization and flexibility can adopt the IaaS model by renting out virtual machines from providers such as EC2 and Rackspace and deploy a fully customized software stack to run the Web application.</li>
</ul>
<p>Consider the following scenarios:</p>
<ul>
<li>Animoto, an online video slideshow creator, decided to deploy a Facebook application. Traffic to the service surged, which resulted in Animoto scaling up from 50 servers to 3,500 servers in 3 days. Such elastic scalability is made possible through cloud computing.</li>
<li>Online retail stores that use cloud computing, such as Amazon and Target.com, have been able to size up infrastructure for peak activity (such as the day after Thanksgiving, or Black Friday). Salesforce.com hosts customers ranging from 2 seat to more than 20,000 seat customers, all using the same Web platform.</li>
</ul>
<p><strong>Big Data Analytics</strong></p>
<p>Many organizations have to deal with large amounts of data. This data may emanate from such areas as sensors, experiments, transactional data, and Web page activity. Big data processing usually requires a lot of computational and storage resources but, depending on an organization’s needs, may be periodic or seasonal. For example, Amazon may have business intelligence and analytics jobs setup for the end of the day, which may require a few hours of time from a few hundred servers. In these scenarios, cloud computing makes sense because these resources can be acquired on demand. Many firms even have fully automated analytics pipelines that automatically collect, analyze, and store data, with resources being provisioned on demand. Examples of big data scenarios include the following:</p>
<ul>
<li>The Union Pacific Railroad mounts infrared thermometers, microphones, and ultrasound scanners alongside its tracks. These sensors scan every train as it passes and send readings to the railroad’s data centers, in which pattern-matching software identifies equipment at risk of failure.</li>
<li>Traditional retailers, such as Walmart, Sears, and Kmart, are following in the footsteps of online retailers, such as Amazon, by analyzing consumer spending habits to offer personalized marketing campaigns and offers to individual customers.</li>
<li>Companies such as Time Warner and Comcast are using big data to track media consumption habits of their subscribers and provide value-added information to advertisers and customers. The video games industry tracks the gameplay habits of millions of console owners. Companies such as Riot Games sift through 500GB of structured data and over 4TB of operational logs every day.</li>
</ul>
<p><strong>On-Demand, High-Performance Computing</strong></p>
<p>Modern science is impossible without high-performance computing (HPC). In addition to physical experimentation, computer-based simulation has become popular in fields ranging from astrophysics, quantum mechanics, and oceanography to biochemistry. Such workloads are computationally demanding and typically are run on dedicated clusters or at supercomputing facilities.</p>
<p>Scientists are now increasingly looking toward the cloud for HPC resource demands. Amazon EC2 offers extremely powerful instances with more CPU and even GPU-acceleration for HPC use. Scientists find the availability of vast amounts of computational power appealing, particularly for small projects or time-sensitive, bursty analytics, such as experimental runs before submitting research paper deadlines. Examples of HPC on the cloud include the following:</p>
<ul>
<li>A 3,809-instance EC2 cluster was set up by Cycle Computing, Inc. for a pharmaceutical company to run molecular modeling jobs. The cluster has a total of 30,472 cores, 26.7TB of RAM, and 2PB of disk storage.</li>
<li>Companies such as Pfizer, Unilever, Spiral Genetics, Integrated Proteomics Applications, and Bioproximity run bioinformatics and genomics workloads on Amazon EC2 instances.</li>
<li>NASA JPL uses high-performance Amazon EC2 instances to process high-resolution satellite images.</li>
</ul>
<p><strong>Online Storage and Archival</strong></p>
<p>One of the important resources that is available through cloud computing is storage. From personal storage solutions, such as Dropbox, to large-scale Internet storage systems, such as Amazon S3, online storage is a major cloud computing use case. The online storage options include:</p>
<ul>
<li>Web-based object storage: Services such as Amazon S3 allow users to store terabytes of data as simple objects that can be accessed over HTTP. Many websites use Amazon S3 to store static content, such as images.</li>
<li>Backup and recovery: Services such as CrashPlan and Carbonite provide online backup of customer data, which is a great option as a secure, off-site backup solution.</li>
<li>Media streaming and content distribution: Services such as Amazon CloudFront not only store large amounts of data but assist in content delivery. Requests to pull data from CloudFront are automatically routed to the nearest server, thereby decreasing latency for time-sensitive media, such as video.</li>
<li>Personal storage: Services such as Dropbox and Google Drive are popular among users to store personal documents online for anytime, anywhere access.</li>
</ul>
<p><strong>Rapid Application Development and Testing</strong></p>
<p>One of the major advantages of the cloud is the ability to rapidly deploy and test applications. An entire computing environment can be deployed in minutes and then torn down and discarded just as easily after the testing is complete. For many companies, the value is in allowing developers to quickly create enhancements and features and test them without any risk. Specialized hardware and servers do not need to be ordered and installed. Within mere minutes, a virtual server can be spun up on EC2. Applications can also be easily stress/load tested. Existing servers can be cloned to perform scalability studies as well.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Introduction to Cloud Computing Summary</p>
<ul>
<li>Cloud computing is the delivery of computing as a service over a network, whereby distributed resources are provided to the end user as a utility.</li>
<li>The idea of utility computing originated in the 1950s and 1960s, but the enabling technologies evolved decades later and have finally matured to a state in which cloud computing is a viable option for organizations to invest in.</li>
<li>The enabling technologies of cloud computing are networks, virtualization and resource management, utility computing, programming models, parallel distributed computing, and storage technologies.</li>
<li>Cloud computing consists of four building blocks: application software, development platforms, resource sharing, and infrastructure.</li>
<li>Cloud service models exist at various levels in the building blocks.</li>
<li>Software as a service (SaaS) is at the application software layer and is the delivery of SaaS over the Internet (typically through a Web browser).</li>
<li>Platform as a service (PaaS) is at the development platform layer and can be defined as a computing platform that allows for the creation of Web applications in a simplified manner without the complexity of purchasing and maintaining any of the underlying software and infrastructure.</li>
<li>In the Infrastructure as a service (IaaS) model, providers rent out compute resources in the form of instances or virtual machines, which have some form of CPU, memory, disk, and network bandwidth attached to them.</li>
<li>There are three well-known deployment models for cloud computing: public, private, and hybrid.</li>
<li>Popular cloud providers include Amazon Web Services, Microsoft Azure, Google Cloud Platform and OpenStack. Each provider typically offers a stack consisting of compute, storage and networking services, among others.</li>
<li>Some of the most popular use cases for the cloud include: web and mobile applications, big data analytics, on-demand high performance computing, online storage and archival, and rapid application development and testing.</li>
</ul>
<hr>
<h1 id="Economics_2C_Benefits_2C_Risks_2C_Challenges_and_Solutions"><a href="#Economics_2C_Benefits_2C_Risks_2C_Challenges_and_Solutions" class="headerlink" title="Economics, Benefits, Risks, Challenges and Solutions"></a>Economics, Benefits, Risks, Challenges and Solutions</h1><p>Now that we have covered the fundamental ideas behind cloud computing, it is important to explore some of the benefits, risks and ongoing challenges facing cloud computing. Since one of the main drivers of cloud adoption is reducing upfront costs and leveraging the economies of scale, we will then look at the economics behind the cloud from two perspectives- that of cloud users and service providers.</p>
<p>Since computing has migrated from a product to a service, there should be methods to define relationships between the users and service providers. The cloud has adopted traditional contractual guarantees like Service Level Agreements (SLAs) that meet a cloud user’s Service Level Objectives (SLOs). We will see how Cloud Service Providers define SLAs and SLOs to ensure a level of service to their clients. We will also briefly introduce the concept of cloud service auditing to verify conformity with SLAs.</p>
<p>Apart from contractual concerns, security and privacy are the biggest challenges that are preventing sensitive applications from moving to the cloud. We will explore some of the unique security challenges raised by the cloud and the controls required to resolve them.</p>
<p>Although the cloud has benefited from rapid adoption, there is no one-size-fits-all solution that encompasses all IT requirements. Keep in mind that the cloud is an emerging and fast-evolving paradigm with many active research areas exploring its future.</p>
<h2 id="Benefits_2C_Risks_2C_and_Challenges_of_Cloud_Computing"><a href="#Benefits_2C_Risks_2C_and_Challenges_of_Cloud_Computing" class="headerlink" title="Benefits, Risks, and Challenges of Cloud Computing"></a>Benefits, Risks, and Challenges of Cloud Computing</h2><p><strong>Benefits of the Cloud</strong></p>
<p>The popularity of cloud computing is driven by its numerous benefits, including improved economics, simplified IT management, scalability, flexibility, improved utilization, and a reduced carbon footprint. The following video (Video 1.6) discusses these benefits.</p>
<p><a href="http://youtu.be/uKpFLuqOy-o" target="_blank" rel="external">Video 1.6: The benefits of cloud computing</a></p>
<p>Although presented earlier and in the video above, let us consider the cloud benefits individually:</p>
<ul>
<li>Economic model: Organizations typically estimate their IT requirements for a period of 1 to 5 years in advance in a process called capacity planning. Capacity planning leads organizations to estimate IT investments for peak loads, which could lead to either excess capacity at times (underutilized resources) or deficient capacity when loads exceed projections (which could lead to service degradation). With the pay-as-you-go economic model, organizations pay for the resources that they need. Organizations no longer have to pay upfront cost, invest in and procure expensive computing infrastructure, nor do they have to pay recurring costs to manage their infrastructure. This is particularly important for startups because by leasing compute resources they benefit from reduced upfront cost and reduced time to market when creating and making their offerings available to the general public.</li>
<li>Simplified IT management: Users of cloud services need not allocate time and resources to setup, operate, and maintain their IT resources. The cloud provider, however, competes for clients and hence invests significant resources to manage and maintain their offerings with high reliability.</li>
<li>Scalability: In a traditional, in-house computing environment, organizations can take anywhere from a few days to several months to procure, set up, and operate IT infrastructure. Cloud service providers provision rented computing resources for their clients in a matter of hours or even minutes. Clients not only can scale up resources on demand but can scale them down during lull periods to save money. Therefore, clouds enable the important property of elasticity, wherein resources can be both provisioned and deprovisioned in a dynamic or programmatic manner to adapt to workload changes. In order to support elasticity, many cloud service providers make automated scaling solutions available to dynamically alter resource provisioning as demand fluctuates.</li>
<li>Flexibility: For certain cloud services, providers offer their users the flexibility to configure any software platform to run on any available operating system as a virtualized image on custom-provisioned, rented infrastructure. Cloud offers a shift from an organization’s inflexible IT design decisions (that are tied to specific development platforms and infrastructure) to more flexible, elastic, and modular choices.</li>
<li>Improved utilization: Resource utilization is significantly improved with cloud computing because physical resources are shared across users (multitenancy). Through virtualization, servers are now consolidated as operating system images that are sharing the same system resources. Hence, utilization is improved, which leads to overall savings in power and cooling and reduces the carbon footprint.</li>
<li>Rapid and Global Deployment: By employing the services of cloud service providers that also have a global data center presence, startups can compete with established players by rapidly rolling out applications and services across a global audience. This is particularly important of social media startups which may see viral growth trends as services become popular across multiple countries.</li>
</ul>
<p><strong>Risks of Cloud Computing</strong></p>
<p>By embracing cloud services, users and organizations can take advantage of the above benefits, however, using these services introduces several risks, such as:</p>
<ul>
<li>Vendor lock-in: Cloud computing is slowly becoming standardized. OpenStack is an open source cloud computing platform which aims to standardize the cloud-computing software stack but is not fully compatible with Amazon and is incompatible with current offerings from Microsoft, and Google. Lack of standardization can lead to the situation of vendor lock-in, such as when a client signs up for a nonstandard cloud service, develops applications, and deploys data on it. The lack of standardization makes it unlikely for the client to move to another vendor seamlessly. The client often requires a third-party cloud migration specialist or an additional service to move the application to a different platform.</li>
<li>Security risks: Because cloud computing with public clouds can result in an organization’s data being shipped beyond its four walls, security becomes a primary risk and concern. For certain domains, it is simply unacceptable for users or organizations to do so, in which case they may have to resort to building a private cloud or own resources with restricted access to meet their needs. However, certain markets that have tight security requirements have niche solutions. An example is Amazon GovCloud, which meets certain US federal government requirements for data security and integrity. GovCloud is physically distinct from other cloud infrastructures that Amazon makes available to the public, thereby reducing exposure.</li>
<li>Privacy risks: The use of the cloud also raises many privacy-related concerns. Depending on the laws under which a cloud service provider operates, governments may have the power to search and seize data from the provider without the client’s explicit consent or notification. Furthermore, clients cannot be fully assured of data confidentiality when using public clouds. We discuss some of security risks associated with cloud computing later in this module.</li>
<li>Reliability risks: Clouds are also plagued with reliability issues. In December 2012, Netflix users experienced a service outage due to Amazon’s “connectivity issues and degraded performance” from their servers in Virginia. Amazon EC2’s Northern Virginia data center, one of the most popular public clouds, went down for a few days in 2011, affecting websites such as Reddit and Foursquare. Windows Azure also faced a similar problem, and their services went down for 2½ hours in Western Europe. Public clouds hence are a potential reliability risk that can affect organizations. Clients must design for failures and use features such as Amazon’s multiple availability zones, in which clients can set up failover and redundant infrastructures to take over in case of failure, which comes at a price, of course. Cloud users attempt to mitigate the cloud reliability risk by signing Service Level Agreements (SLAs) that enable compensation when exposed to such events. Since cloud services can only be accessed over the network, any disruption of connectivity will cause the application to fail, leading to a loss of reputation and/or revenue.</li>
</ul>
<p>Some of these risks are not specific only to cloud computing, but are typical for any service provider- be they banking or health services. As with any other service, cloud service providers must carefully consider the implications of these risks and design solutions to mitigate them as their credibility and reputation directly impacts their rate of adoption. Cloud adopters who offer their own services must also safeguard their reputation against these risks.</p>
<p><strong>Challenges in Cloud Computing</strong></p>
<p>Along with the benefits and risks, there are several challenges associated with the adoption of cloud computing:</p>
<ul>
<li>Application engineering and development: A cloud inherently offers the promise of on-demand, dynamically scalable infrastructure. Programming a cloud, however, is more complex than writing code for a single machine. New programming paradigms (such as MapReduce, Spark or GraphLab), coupled with provider APIs to manage infrastructure, help developers manage complexity but still present a steep learning curve. In addition, skilled developers with cloud experience are rare, and both costs and time for application development increase substantially with clouds. Finally, these new cloud programming models and APIs are continually evolving, which may add to recurring engineering and development costs.</li>
<li>Movement of data: Use of public clouds typically requires connecting to the cloud over the Internet. Because of this requirement, movement of data to and from the cloud is significantly slower than in an organization’s local area network (LAN). Although the cloud allows applications to target large amounts of data (big data), data movement can become a limiting factor for cloud adoption. For example, Amazon allows clients to upload large datasets for free or ship hard disks with data so that they can load them into the required cloud service.</li>
<li>Quality of service (QoS): As mentioned earlier, cloud infrastructure is typically shared among many users. This sharing presents a challenge for cloud providers to offer QoS assurances to their clients. This challenge could disallow certain performance-sensitive applications from being migrated to the cloud. QoS in clouds is an important area in cloud research. For example, regulating I/O bandwidth to specific virtual machines could offer predictable performance for critical applications. I/O virtualization is covered in Unit 3.</li>
</ul>
<h2 id="Business_Case_for_Cloud_Computing__28for_Users_29"><a href="#Business_Case_for_Cloud_Computing__28for_Users_29" class="headerlink" title="Business Case for Cloud Computing (for Users)"></a>Business Case for Cloud Computing (for Users)</h2><p><strong>Evolution of the IT Business Model</strong></p>
<p>An organization’s IT costs are many-fold, which include expenses for hardware and software as well as expenses for support and management. Typically, these costs fall into two categories:</p>
<ul>
<li>Capital expenses (CapEx): The initial investment for a particular IT service or solution. For example, when an organization decides to implement a software solution to address a particular need, say, enterprise resource planning (ERP), CapEx would include all physical hardware and software purchases. CapEx investments are for the lifetime of the long-lived solution. CapEx are an upfront expense, which are either paid as a lump sum or financed with extra charges.</li>
<li>Operational expenses (OpEx): The recurring costs incurred while operating a particular system. For the ERP case, that would include utility fees (such as power and cooling) to keep the infrastructure running, space leases if the facility is rented, personnel costs to support the system, and software support and license fees. OpEx are typically a monthly recurring charge.</li>
</ul>
<p>The business model for IT software has evolved over the years into the following forms:</p>
<ol>
<li>Traditional model: An organization purchases licensed software, which it then owns and maintains.</li>
<li>Open-source model: Software is essentially free, but the organization pays vendor support costs.</li>
<li>Outsourcing model: An organization hires another company, possibly overseas, to manage and maintain the software.</li>
<li>Hybrid model: A software vendor sells highly standardized software to many clients, along with software management and support, thereby amortizing costs of expertise, software management, and support over several clients.</li>
<li>Cloud computing model: Software is developed and delivered over the Internet to many clients at lower costs.</li>
</ol>
<p>The following video (Video 1.7) discusses the evolution of these models with examples: </p>
<p><a href="http://youtu.be/yOTcTwWbEpk" target="_blank" rel="external">Video 1.7: Economics of cloud computing, software service models, and costs</a></p>
<p><strong>Reducing Capital Expenditure</strong></p>
<p>Organizations choose to reduce their capital expenditures so that they limit the commitment of large investments for long-lived IT resources. Shifting expenses away from capital expenditures into operational expenditure enables organizations to stretch their IT budgets and limit upfront costs. Specifically, organizations opt to make investments that have a bigger return on investment in the short term rather than investing in long-lived, depreciating IT resources. Operating expenses are pay-as-you-go, meaning organizations pay by the month and get value every month. With cloud computing, they can simply rent the resources and incur little to no capital expenditures.</p>
<p>The Cloud Computing paradigm offers a transition of the IT Business Model from CapEx to OpEx. CapEx in IT systems is a long-term investment that freezes a large sum of money into a single investment. OpEx, on the other hand, is a recurring expense which could enable the company the agility to utilize the funds in other profit yielding investments.</p>
<h2 id="Economics_of_Cloud_Computing__28for_Providers_29"><a href="#Economics_of_Cloud_Computing__28for_Providers_29" class="headerlink" title="Economics of Cloud Computing (for Providers)"></a>Economics of Cloud Computing (for Providers)</h2><p><strong>Cloud Service Provider Economics</strong></p>
<p>Since the cloud user has no longer needs to invest in Capital Expenditures, from a cloud service provider’s perspective, long-term CapEx as well as recurring OpEx costs are unavoidable. An important challenge for cloud service providers is to satisfy the demands of their clients while achieving high-average utilization in order to make a profit, which depends on their ability to build data centers with high efficiency and reliability at manageable costs. Cloud service providers amortize their costs over a large number of users.</p>
<p>Cloud service providers build large and reliable data centers in order to attract a large number of users in order to improve their profitability. Just like other utility providers, cloud service providers can then procure and maintain hardware and software at significant savings per unit.</p>
<p><strong>Economies of Scale</strong></p>
<p>Cloud service providers organize their infrastructure into large data centers, which typically leverage three main areas:</p>
<ul>
<li>Supply-side savings: Large-scale data centers lower costs per server.</li>
<li>Demand-side aggregation: Aggregating demand for computing allows server utilization rates to increase.</li>
<li>Multitenancy efficiency: When changing to a multitenant application model, increasing the number of tenants (i.e., customers, or users) lowers the application management and server cost per tenant.</li>
</ul>
<p>Cloud service providers undertake the difficult task of building and maintaining data centers for users. For this model to be feasible, cloud service providers will have to leverage economies of scale and bring in many users. Providers benefit from economies of scale in the following areas:</p>
<ul>
<li>Cost of power: Electricity is rapidly becoming the largest element of total cost of ownership (TCO) in a data center, contributing to approximately 15% to 20% of total costs. Large cloud service providers can place their data centers in locations with lower cost of power and sign bulk purchase agreements with electric providers to reduce electric costs significantly.</li>
<li>Infrastructure labor costs: Cloud computing enables repetitive management tasks to be automated. In addition, in larger facilities, a single system administrator can service thousands of servers with the use of advanced management software.</li>
<li>Buying power: Cloud service providers can purchase equipment in bulk from manufacturers, which can lead to major discounts over smaller buyers. In addition, cloud providers standardize their servers and equipment, which helps in lowering purchase and support costs compared to smaller IT departments.</li>
</ul>
<p>Technologies in data centers and their design considerations are covered in detail in Unit 2.</p>
<h2 id="Service_Level_Agreements_and_Objectives"><a href="#Service_Level_Agreements_and_Objectives" class="headerlink" title="Service Level Agreements and Objectives"></a>Service Level Agreements and Objectives</h2><p>In this course so far, we have talked about the fundamental ideas behind cloud computing and some of the service models that have emerged under the cloud computing paradigm. Assuming an organization wants to move their infrastructure and services to a cloud provider, several questions arise. For example, how does an organization:</p>
<ul>
<li>define its requirements in terms of the services that they require from the cloud service provider?</li>
<li>identify the type and quantity of the services that it requires?</li>
<li>negotiate the level of service and support that it expects from a cloud provider?</li>
<li>monitor and validate the type and quality of service that was guaranteed by the cloud service provider?</li>
</ul>
<p>When an organization needs to formally state its service requirements in business and legal terms, it defines these requirements in terms of service level objectives.</p>
<blockquote>
<p>Service Level Objective(definition)<br>A service level objective is defined as a key element that defines some aspect of the service which is expected from the service provider.</p>
</blockquote>
<p>A common service level objective with cloud service providers, for example, is an uptime guarantee, where-in a service is guaranteed to be available and running within normal operational parameters for a certain percentage of the time.</p>
<p>Service level objectives are typically defined and negotiated between the client and a service provider in a larger contract known as the service level agreement.</p>
<p><strong>Service Level Agreements</strong></p>
<blockquote>
<p>Service-Level-Agreement(definition)<br>A service level agreement (SLA) is a contract between a service provider (either internal or external) and the client that defines the level of service expected from the service provider.</p>
</blockquote>
<p>Service level agreements exist in many industries in a supplier-customer relationship exists for a service that is provided by the supplier to the customer periodically. Service level agreements in information technology, in their current form, have been used since late 1980s by fixed line telecom operators as part of their contracts with corporate customers.</p>
<p>A typical SLA may consist of the following segments:</p>
<ul>
<li>a definition of services to be provided by the service provider to the client,</li>
<li>methods to measure performance,</li>
<li>protocols to manage problems,</li>
<li>a list of customer duties,</li>
<li>warranties that need to be honored by the service provider,</li>
<li>procedures involved for disaster recovery, and</li>
<li>process and policies regarding the termination of the agreement.</li>
</ul>
<p><strong>SLAs in Cloud Computing</strong></p>
<p>SLAs have evolved over the years to cater to different types of IT services. The evolution of shared infrastructure services such as clouds have necessitated the use of strong service level agreements. SLAs by definition can define any level of service, but a well-structured and negotiated SLA between a cloud service provider and a client will ideally [1] :</p>
<ul>
<li>Codify the specific parameters and minimum levels required for each element of the service, as well as remedies for failure to meet those requirements.</li>
<li>Affirm the client’s ownership of its data stored on the service provider’s system, and specifies the client’s rights to get it back.</li>
<li>Detail the system infrastructure and security standards to be maintained by the service provider, along with the client’s rights to audit their compliance.</li>
<li>Specify the client’s rights and cost to continue and discontinue using the cloud service provider’s service.</li>
</ul>
<p><strong>Auditing in Cloud Computing</strong></p>
<p>Although cloud computing provides numerous advantages, one of its main challenges continues to be the reliability of cloud services. A fast evolving approach to address reliability is cloud auditing. Let’s assume that a client has employed one or more cloud services from a cloud service provider. The cloud computing business model abstracts away many aspects of the infrastructure from the client which now become the responsibility of the cloud service provider. The cloud services are managed by the cloud service provider to implement the services agreed upon in the SLA.</p>
<p>Auditing evaluates whether the cloud services comply with the SLA through monitoring. A third party auditor is requested and trusted by the client to assess the cloud service(s). Hence, public auditability of cloud services is necessary to allow clients to resort to an external auditor to check the integrity of the cloud services. The cloud service provider makes available resource usage and performance monitoring and takes measures to ensure the security of its services to its clients through providing physical security, isolation, authentication, firewalls and APIs. A third party auditor should be able to efficiently audit the cloud services without overloading the client and without adding vulnerabilities to the client’s services.</p>
<p>Given the nature of cloud services, near real time auditability is becoming necessary. This requires real time monitoring and evaluation in order to trigger a rapid response to safeguard the client’s service and reputation. In public clouds, this has to be achieved while preventing the exposure of client data to other cloud clients. Near real-time auditing is rapidly evolving and becoming a requirement for reliable cloud computing services which will require audit trails and monitoring of service, performance and security metrics among others.</p>
<p><strong>References</strong></p>
<ol>
<li>Thomas Trappler If It’s in the Cloud, Get It on Paper: Cloud Computing Contract Issues . <a href="http://www.educause.edu/ero/article/if-its-cloud-get-it-paper-cloud-computing-contract-issues" target="_blank" rel="external">http://www.educause.edu/ero/article/if-its-cloud-get-it-paper-cloud-computing-contract-issues</a>.</li>
</ol>
<h2 id="Cloud_Security_-_Threats"><a href="#Cloud_Security_-_Threats" class="headerlink" title="Cloud Security - Threats"></a>Cloud Security - Threats</h2><p>Now that we understand how the agreement between client and provider is met, let’s take a look at a major concern for cloud service providers and users alike: security.</p>
<p>As cloud service providers compete for market dominance, their security features have become a key service differentiator.</p>
<p>At one level, cloud service providers can leverage the economies of scale. By implementing security measures at a large scale, they are able to provide more affordable defensive mechanisms at a lower cost. Typically, this includes network monitoring and filters, patch management, hardening, incident response &amp; forensics, and various types of threat management.</p>
<p>They also generally provide an accessible interface to modify security settings, allowing secure key rotation, timely updates and patches. Additionally, since all actions are virtualized, these can be regularly snapshotted and analyzed forensically for exploitation using vulnerabilities that are yet unknown (also known as zero-day vulnerabilities).</p>
<p>Let us look at the cloud from the point of view of a traditional enterprise which used in-house IT infrastructure. Enterprises find that they lose control as a function of asset ownership as they move away from traditional servers towards private clouds and then up the stack from IaaS to SaaS (Figure 1.10). In all three service models, the cloud vendor has full ownership of the underlying infrastructure (networks, storage and hosts). In PaaS, the service provider may additionally claim partial ownership of the application infrastructure. Finally, in the SaaS model, the application infrastructure is fully owned by the service provider.</p>
<p><img src="/images/14529717394416.jpg" alt=""><br>Figure 1.10 - Enterprises lose control as you move up the public cloud stack</p>
<p>In all three models, however, the enterprise has full ownership over all its data. Unfortunately, it does not have full control over this data, as it is stored outside the network perimeter. This lack of control over sensitive data storage and transfer is one of the leading inhibitors to large-scale cloud adoption. Two-thirds of potential adopters have placed “data security and privacy” as the biggest risk in cloud computing (Figure 1.11).</p>
<p><img src="/images/14529717521135.jpg" alt=""><br>Figure 1.11 - Security concerns are the biggest barrier to large-scale cloud adoption</p>
<p><strong>Threats</strong></p>
<p>The biggest threats at a high-level are those caused due to vendor lock-in (since applications are not very portable between platforms), compliance risks (e.g. meeting most compliance standards is more complex on public clouds), and a loss of governance (most cloud service providers do not provide SLAs related to data security assurances).</p>
<p>At a lower level, the threats are due to shared infrastructure, lack of a hard perimeter, and limited control over physical data storage and deletion. It must be noted that attacks against hypervisors and shared hosting are significantly rarer and more difficult than attacks against OSes and networks that plague traditionally deployed applications.</p>
<p>The Cloud Security Alliance provides a taxonomy of threats, which are summarized here:</p>
<p><strong>Threat #1: Abuse and Nefarious Use of Cloud Computing</strong>(IaaS, PaaS)</p>
<p>Criminals can leverage the anonymity provided by public clouds to launch malicious attacks at low cost. Public clouds have been used for Command and Control Botnets, CAPTCHA cracking, rainbow table computation, launching dynamic attacks. Each of these is a malicious action that relies on brute force, which is provided by the data center.</p>
<p>Vendors have attempted to counter this threat by adding strict registration checks and comprehensively monitoring all network traffic. For instance, a cloud service provider may monitor metadata about all emails originating from it to find out if a customer is misusing it to send spam.</p>
<p><strong>Threat #2: Insecure Interfaces and APIs</strong>(IaaS, PaaS, SaaS)</p>
<p>As mentioned earlier, cloud vendors provide easy to use consoles, dashboards, interfaces and web services to interact with the cloud. However, this brings an additional threat to the entire network if any vulnerability exists in these interfaces. Thus, even if the entire cloud infrastructure is designed securely, a single vulnerability in the provider’s website may allow an attacker to take over a customer’s account.</p>
<p>Most vendors now use strong, multi-factor authentication, detailed logging, anomaly detection and secure defaults to counter this threat. Web interfaces are released to the public only after extremely strict checking for vulnerabilities in the code as well as in the implementation.</p>
<p><strong>Threat #3: Malicious Insiders</strong>(IaaS, PaaS, SaaS)</p>
<p>The threat of malicious insiders is expanded when using public clouds. Unlike an in-house IT deployment, Enterprise employees are now not the only ones with access to the datacenter. Since the service runs on an external machine and stores data on the provider’s resources, it is always possible that a disgruntled or motivated employee of the cloud service provider could do something that adversely impacts the provider’s service.</p>
<p>To counter this threat, cloud service providers enforce strict standards for employees and conduct detailed audits and monitoring. They also contractually define HR and breach notification policies as a part of the service contract.</p>
<p><strong>Threat #4: Shared Technology Issues</strong>(IaaS)</p>
<p>This is one of the fundamental “new” threats due to the cloud paradigm. The cloud works by providing multiple tenants (for e.g., you and your classmates) with virtualized access to shared infrastructure. Isolation between co-tenants is provided by a sandbox known as a “hypervisor”, which mediates access between virtual machines and the underlying infrastructure.</p>
<p>Although co-tenants should be unable to access their neighbors’ details, several exploits over the years have allowed tenants to break out of their sandboxes and steal data from another tenant’s memory, network etc. An example of this could be that as you write code on AWS to solve class projects, a classmate manages to log in to a VM on the same physical machine as you, and then use some properties of the shared physical machine to steal your code. Isolating all users completely is a very hard problem, even with the hypervisors of today.</p>
<p>To mitigate this, cloud service providers add strong monitoring capabilities, using SLAs to ensure timely vulnerability and patch management, and conducting regular audits. Apart from that, hypervisors must be periodically hardened against any potential new attacks.</p>
<p>For e.g. <a href="http://xenbits.xen.org/xsa/" target="_blank" rel="external">the xen security advisory page</a> shows security advisories against the Xen hypervisor. Each time an attack becomes known, AWS must patch all their servers so that an attacker cannot use these exploits.</p>
<p><strong>Threat #5: Data Loss or Leakage</strong>(IaaS, PaaS, SaaS)</p>
<p>This is another drawback of externally hosted clouds. Often, regulations mandate that an enterprise bear legal responsibility for any sensitive data that is used or stored by their applications.</p>
<p>Even if this data is encrypted and stored on the cloud, the key must also be on the cloud to decrypt this data.</p>
<p>New research in encryption technologies has led to the rise of homomorphic and split-key management. Homomorphic keys allow data processing to be carried out on encrypted data. Thus, the key itself does not need to be transferred to the cloud. Split-key solutions work by having a master key (stored securely off-cloud) and several per-application/module slave-keys. As the master is never on the cloud, the threat of data breach is reduced.</p>
<p>Unfortunately, these techniques are still limited and costly to implement. At a contractual level, it is important to define backup, data retention, data wiping, secure key management and storage processes and sufficient auditing privileges. This implies that a certain set of well-designed standards must be followed, such as the <a href="http://csrc.nist.gov/publications/nistpubs/800-144/SP800-144.pdf" target="_blank" rel="external">NIST Guidelines on Security and Privacy in Public Cloud Computing</a>.</p>
<p>It is important to also deal with all jurisdictional issues in the contract. Even though data is stored with the cloud service provider, contracts are framed so that any liability in case of a breach is due to the application owner. Hence, most cloud service providers are required to complete ISO 27001, SAS-70 and other region-relevant audits, which indicate the process maturity and the presence of security controls.</p>
<p><strong>References</strong></p>
<ol>
<li>Anthes, Gary (2010). “Security in the Cloud .” Communications of the ACM. Number 53.11. 16-18 Pages.</li>
<li>Nanavati, Mihir (2014). “Cloud Security: A Gathering Storm .” Communications of the ACM. Number 57.5. 70-79 Pages.</li>
<li>Top Threats Working Group (2013). The Notorious Nine: Cloud Computing Top Threats in 2013 .</li>
</ol>
<h2 id="Cloud_Security_-_Control__26amp_3B_Auditing"><a href="#Cloud_Security_-_Control__26amp_3B_Auditing" class="headerlink" title="Cloud Security - Control &amp; Auditing"></a>Cloud Security - Control &amp; Auditing</h2><p>When running an application on the cloud, different aspects of security must be controlled by different entities. For instance, Figure 1.12 (from AWS) shows the break up of security responsibilities between the provider and the customer.</p>
<p><img src="/images/14529720083304.jpg" alt=""><br>Figure 1.12 Security Responsibilites in AWS.</p>
<p>Many classes of applications require different infrastructure, process and security certifications. Most cloud service providers will comply with a majority of the popular certifications and audit requirements followed in the US and Europe. The following table from Putcher et. al. [3] compares the most popular providers (Figure 1.13):</p>
<p><img src="/images/14529720330687.jpg" alt=""><br>Figure 1.13 Security Responsibilites in AWS.</p>
<p>Understanding the details of these certifications is not a goal for this course, but Mather [1] provides a good reference for those interested in digging deeper into these aspects.</p>
<p>To develop an application that passes these compliance checks, both the cloud service providers as well as application developers must apply a minimal set of security controls, which we will explore below. As with the rest of this course, we look at controls from a predominantly IaaS perspective. Obviously, as we move up the stack, the cloud service provider has to ensure the security of the resources it is responsible for.</p>
<p>For an IaaS cloud, the following table gives an overview of the security controls to be implemented by both parties:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Domain</th>
<th style="text-align:left">Cloud Service Provider’s Responsibility</th>
<th style="text-align:left">Customer Responsibility</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Identity and Access Management</td>
<td style="text-align:left">A cloud service provider must provide information to customers about who is using the service. This requires that they: (1)Deliver and maintain an authentication service (so that users cannot access resources without explicit privileges) (2)Create a service that allows account management policy configuration (this means that customers can add/remove users, roles) (3)Adopt insider misuse protections (monitor employees, restrict access to sensitive server locations)</td>
<td style="text-align:left">Using the authentication and access control service provided by the cloud provider, customers must: (1)Define roles, groups and permissions (2)Create and disseminate credentials (3)Use access control logging (this means that the customer will have a log of all sensitive user events) (4)Use Multifactor Authentication where appropriate</td>
</tr>
<tr>
<td style="text-align:left">Availability and Fault-tolerance</td>
<td style="text-align:left">To ensure that the cloud is resilient to failure, cloud service providers must have: (1)Tape backups and redundancy of storage, compute systems (2)Geo-distributed datacenters</td>
<td style="text-align:left">The redundancy provided by the cloud service provider has to be leveraged by the customer, who should: (1)Add redundant options for connectivity to all endpoints (2)Use application-layer backups and snapshots of instances, storage state (a snapshot of a VM instance, or a database, stores its state at a fixed moment in time, allowing a recovery to be performed from that point)</td>
</tr>
<tr>
<td style="text-align:left">Patching &amp; Configuration Management</td>
<td style="text-align:left">(1)Ensure sandboxing of tenants using hypervisors, overlay networks (this will be explained later) (2)Regular vulnerability assessments and penetration testing (when an internal or external team of “hackers” systematically attempts to break into a system) of bare metal, hypervisor and networks</td>
<td style="text-align:left">(1)Patch OS, machine images with latest security updates (2)Use appropriate user roles with the least privilege for each application (for e.g. when you are running a web server on the cloud, ensure that it does not have access to any infrastructure keys, or even to local “root”. This way, if your website is breached, the rest of your application is isolated) (3)Restrict traffic to instances using firewalls, Virtual Private Clouds, and segment network into zones (block all network traffic from untrusted sources)</td>
</tr>
<tr>
<td style="text-align:left">Monitoring &amp; Detection</td>
<td style="text-align:left">Verify that customer resources are not being used for nefarious activities (either intentionally or unintentionally), and take appropriate actions</td>
<td style="text-align:left">(1)Install host-based Intrusion Detection and Anti-Malware systems (these detect any misuse of your cloud network or hosts) (2)Define alerts and response strategies for incidents and breaches (be prepared for attacks and automate a recovery and logging protocol)</td>
</tr>
<tr>
<td style="text-align:left">Data Security</td>
<td style="text-align:left">(1)Cross-tenant data access controls and privacy safeguards (as described on the previous page, ensure that customers on the same physical infrastructure are isolated) (2)Data integrity verification and repair from redundant data stores (when storing data in several replicas, ensure their consistency and accuracy)</td>
<td style="text-align:left">(1)Use secure protocols (like SSL/TLS, IPSec) for data in transit (these ensure that your network traffic cannot be read) (2)Encrypt data-at-rest (encrypt all the data you store on the cloud, such that even a rogue employee of the cloud service provider cannot disclose this information)</td>
</tr>
<tr>
<td style="text-align:left">Cryptographic Object Security</td>
<td style="text-align:left">(1)Support data encryption in all provided storage/file systems/DBs (for e.g. Windows environments could allow Bitlocker implementations) (2)Securely manage customer’s account and access credentials</td>
<td style="text-align:left">(1)Create and distribute access keys (for cloud service provider APIs) as well as remote connectivity (like SSH, VNC, RDP) (2)Do not store keys on cloud where possible, so that key will not be in the same place as the data.</td>
</tr>
</tbody>
</table>
<p>Most providers will often build in services simplifying the process for customers to implement security controls. For e.g. AWS provides Security Groups, which is simply an external network firewalls.</p>
<p>The process of verifying the presence of these controls is known as a security audit. These can be done internally (by hiring a technical consultant) or externally (by a certifying agency). To host sensitive information on the cloud, both the provider and the customer must pass these audits. However, the lack of demarcation of responsibilities in case of a breach have meant that in most cases, applications using sensitive information like bank records or medical data cannot be hosted “on-the-cloud”.</p>
<p><strong>References</strong></p>
<ol>
<li>Mather, Tim et. al. (2009). Cloud security and privacy: an enterprise perspective on risks and compliance.</li>
<li>Winkler, Vic J.R. (2011). Securing the Cloud: Cloud Computer Security Techniques and Tactics . Elsevier.</li>
<li>Pucher, Alex et. al. (2012). A Survey on Cloud Provider Security Measures .</li>
</ol>
<h2 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h2><p><strong>Cloud Building Blocks Summary</strong></p>
<ul>
<li>Cloud computing offers many benefits, including a pay-as-you-go economic model, simplified IT management for users, scalability, flexibility, improved utilization, and a decreased carbon footprint.</li>
<li>Cloud computing also has many risks and challenges, including vendor lock-in, security risks, privacy-related concerns, developer training and reengineering, evolving tools, and movement of data.</li>
<li>Cloud computing offers a compelling economic model for businesses through the pay-as-you-go model and can significantly lower management and overall costs of IT.</li>
<li>Cloud service providers leverage economies of scale to provide services at low costs. They require large data centers and many clients in order to amortize the costs over the entire user base.</li>
<li>Service-level objectives (SLOs) allow an organization to formally state its service requirements to a service provider</li>
<li>A Service-level agreement (SLA) is a contract that is negotiated between a service provider and a client that defines the level of service expected from the service provider</li>
<li>Auditing evaluates whether the cloud services comply with the SLA through monitoring. As with auditing in other fields, a mutually trusted third party is involved in the process to ensure compliance and fairness.</li>
<li>The shared and public nature of cloud computing introduces new risks in terms of information security. The primary threats are abuse of clouds, insecure interfaces and APIs, malicious insiders, shared technology issues and data loss or leakage.</li>
<li>The responsibility of securing applications on the cloud is split between the cloud service provider and the client. The provider must make available controls and systems that can be used to secure applications, resources and data on the cloud. The client must make sure that they make full use of the provided controls and systems and follow best security practices when using clouds.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一部分内容主要是云计算的理论知识，由于时间缘故使用英文原文，关键要点会作为单独的『课』来进行介绍。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="讲义" scheme="http://yoursite.com/tags/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 6 课 AWS API]]></title>
    <link href="http://yoursite.com/2016/01/15/cc-6/"/>
    <id>http://yoursite.com/2016/01/15/cc-6/</id>
    <published>2016-01-16T01:19:41.000Z</published>
    <updated>2016-01-16T16:19:40.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲介绍了通过代码，而不是界面或者命令行，来控制 Azure，整个过程还是比较繁琐的，这一讲我们来看看，如何通过代码来控制 AWS。</p>
<a id="more"></a>
<hr>
<p>AWS 可以通过命令行工具或者 SDK 来访问几乎所有的功能，这一讲主要介绍一些最常用的工具和功能。下面的视频是 AWS SDK 的一个简要介绍，与此同时给出了一个 Java SDK 的例子。</p>
<h3 id="Java_AWS_SDK"><a href="#Java_AWS_SDK" class="headerlink" title="Java AWS SDK"></a>Java AWS SDK</h3><p><a href="http://aws.amazon.com/cn/sdk-for-java/" target="_blank" rel="external">Java AWS SDK</a> 包括：</p>
<ul>
<li>AWS Java Library：总而言之就是所需的各种包，网络请求，验证，错误处理等等</li>
<li>样例代码</li>
<li>Eclipse 支持：包含一个插件</li>
</ul>
<p><a href="https://youtu.be/6Ru_f9WVIno" target="_blank" rel="external">AWS SDK 视频介绍（墙外）</a></p>
<p>AWS 使用 RESTful Web API，用 SDK 可以方便一些。</p>
<p>在<a href="http://aws.amazon.com/tools" target="_blank" rel="external">这里</a>找到对应的工具，找到 SDK 中对应的库。主要过程有三步：</p>
<ol>
<li>用密钥初始化 AWS 连接</li>
<li>使用 API 进行操作</li>
<li>关闭 AWS 连接</li>
</ol>
<p>先下载好 SDK 和 Eclipse 插件（在 eclipse 里安装，Amazon 有给出教程）</p>
<h3 id="Amazon_EC2_API"><a href="#Amazon_EC2_API" class="headerlink" title="Amazon EC2 API"></a>Amazon EC2 API</h3><p>可以通过 API 做这些事情：</p>
<ul>
<li>创建 EC2 密钥对</li>
<li>位实例创建安全组并且打开端口</li>
<li>创建启动停止重启和终止 EC2 实例</li>
</ul>
<p>下面是 Java 和 Python 的代码</p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Load the Properties File with AWS Credentials</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(RunInstance.class.getResourceAsStream(<span class="string">"/AwsCredentials.properties"</span>));</span><br><span class="line">BasicAWSCredentials bawsc = <span class="keyword">new</span> BasicAWSCredentials(properties.getProperty(<span class="string">"accessKey"</span>), properties.getProperty(<span class="string">"secretKey"</span>));</span><br><span class="line"><span class="comment">//Create an Amazon EC2 Client</span></span><br><span class="line">AmazonEC2Client ec2 = <span class="keyword">new</span> AmazonEC2Client(bawsc);</span><br><span class="line"><span class="comment">//Create Instance Request</span></span><br><span class="line">RunInstancesRequest runInstancesRequest = <span class="keyword">new</span> RunInstancesRequest();</span><br><span class="line"><span class="comment">//Configure Instance Request</span></span><br><span class="line">runInstancesRequest.withImageId(<span class="string">"ami-3b44d352"</span>)</span><br><span class="line">.withInstanceType(<span class="string">"t1.micro"</span>)</span><br><span class="line">.withMinCount(<span class="number">1</span>)</span><br><span class="line">.withMaxCount(<span class="number">1</span>)</span><br><span class="line">.withKeyName(<span class="string">"project1_test"</span>)</span><br><span class="line">.withSecurityGroups(<span class="string">"MySecurityGroup"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Launch Instance</span></span><br><span class="line">RunInstancesResult runInstancesResult = ec2.runInstances(runInstancesRequest);   </span><br><span class="line"><span class="comment">//Return the Object Reference of the Instance just Launched</span></span><br><span class="line">Instance instance=runInstancesResult.getReservation().getInstances().get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>Python:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> boto.ec2.connection <span class="keyword">import</span> EC2Connection</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a connection</span></span><br><span class="line">conn = boto.ec2.connect_to_region(<span class="string">"us-east-1"</span>)</span><br><span class="line"><span class="comment"># Launching instance</span></span><br><span class="line">reservation = conn.run_instances(<span class="string">"ami-3b44d352"</span>,instance_type = <span class="string">"t1.micro"</span>, </span><br><span class="line">        key_name = <span class="string">"project1_test"</span>, security_groups = <span class="string">"MySecurityGroup"</span>)</span><br><span class="line">instance = reservation.instances[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>我们同样可以通过 EC2 的 API 来查看实例的状态，例如类 <code>DescribeInstanceStatusRequest</code> 的状态：</p>
<ul>
<li>Running</li>
<li>Pending</li>
<li>Shutting down 等等</li>
</ul>
<p>更多的文档参考 <a href="http://aws.amazon.com/documentation/sdk-for-java/" target="_blank" rel="external">AWS SDK for Java Documentation</a> <a href="http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html" target="_blank" rel="external">AWS Java API Reference</a> 和 <a href="http://docs.pythonboto.org/en/latest/" target="_blank" rel="external">boto</a></p>
<p>Python 的部分这里不做详细介绍，具体可以参考 <a href="https://youtu.be/7IOsOHJKxvY" target="_blank" rel="external">Python SDK 视频（墙外）</a></p>
<h3 id="Amazon__u547D_u4EE4_u884C_API__u5DE5_u5177"><a href="#Amazon__u547D_u4EE4_u884C_API__u5DE5_u5177" class="headerlink" title="Amazon 命令行 API 工具"></a>Amazon 命令行 API 工具</h3><p>我们同样也可以利用命令行来操作 AWS，主页在<a href="http://aws.amazon.com/cn/cli/" target="_blank" rel="external">这里</a>。如果打算使用命令行，那么需要：</p>
<ol>
<li>在实例中下载和安装命令行工具</li>
<li>通过 <code>aws configure</code> 来设置密钥（注意这里地区要选择 us-east-1，<a href="http://docs.aws.amazon.com/general/latest/gr/rande.html" target="_blank" rel="external">参考链接</a>）</li>
</ol>
<p>下面是简单的使用 AWS 命令行工具的视频介绍</p>
<p><a href="https://youtu.be/OSGjoMeHc2A" target="_blank" rel="external">AWS 命令行工具（墙外）</a></p>
<p>启动实例之前先要配置，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure</span><br><span class="line">AWS Access Key ID [None]: YOUR AWS ACCESS KEY</span><br><span class="line">AWS Secret Access Key [None]: YOUR AWS SECRET ACCESS KEY</span><br><span class="line">Default region name [None]: us-east-<span class="number">1</span></span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure>
<p>然后可以用下面的命令来创建安全组，密钥对和角色</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ aws ec2 create-security-group --group-name devenv-sg --description <span class="string">"security group for development environment in EC2"</span></span><br><span class="line">$ aws ec2 authorize-security-group-ingress --group-name devenv-sg --protocol tcp --port <span class="number">22</span> --cidr <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line">$ aws ec2 create-key-pair --key-name devenv-key --query <span class="string">'KeyMaterial'</span> --output text &gt; devenv-key.pem</span><br><span class="line">$ chmod <span class="number">400</span> devenv-key.pem</span><br></pre></td></tr></table></figure>
<p>然后就可以启动并连接实例了，这里需要提供 <code>AMI_ID(ami-xxxxx)</code> 和 安全组(sg-xxxxx)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws ec2 run-instances --image-id YOUR_AMI_ID --security-group-ids SECURITY_GROUP_ID --count <span class="number">1</span> --instance-type t2.micro --key-name devenv-key --query <span class="string">'Instances[0].InstanceId'</span></span><br></pre></td></tr></table></figure>
<p>Amazon CloudWatch 部分之前有介绍过，详细介绍可以查看<a href="http://aws.amazon.com/documentation/cloudwatch/" target="_blank" rel="external">文档</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲介绍了通过代码，而不是界面或者命令行，来控制 Azure，整个过程还是比较繁琐的，这一讲我们来看看，如何通过代码来控制 AWS。</p>]]>
    
    </summary>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
      <category term="AWS" scheme="http://yoursite.com/tags/AWS/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 5 课 Azure API]]></title>
    <link href="http://yoursite.com/2016/01/15/cc-5/"/>
    <id>http://yoursite.com/2016/01/15/cc-5/</id>
    <published>2016-01-16T01:19:35.000Z</published>
    <updated>2016-01-16T19:00:55.000Z</updated>
    <content type="html"><![CDATA[<p>上一讲介绍了关于 SSH 和 Linux 的相关知识，这一讲我们来看看，如何通过代码，而不是界面或者命令行，来控制 Azure。</p>
<a id="more"></a>
<hr>
<h2 id="Microsoft_Azure"><a href="#Microsoft_Azure" class="headerlink" title="Microsoft Azure"></a>Microsoft Azure</h2><p>在 Azure 中，你没有办法通过 web 控制台来启动一个预先定义好的镜像。这一讲会介绍如何通过 Azure API 来创建一个虚拟机。</p>
<h3 id="Azure__u9A8C_u8BC1_u548C_u73AF_u5883_u914D_u7F6E"><a href="#Azure__u9A8C_u8BC1_u548C_u73AF_u5883_u914D_u7F6E" class="headerlink" title="Azure 验证和环境配置"></a>Azure 验证和环境配置</h3><p>这里先用 Azure 命令行工具来登录作为体验。</p>
<p>Azure 使用 Azure Active Directory(Azure AD) 服务来完成身份管理。我们首先需要从 Azure 云服务获取权限，才能使用 Java/Python API。</p>
<p>Azure 需要一个验证的 token，为了获得这个 token，需要完成以下步骤：</p>
<ol>
<li>安装 Azure 命令行工具</li>
<li>用 Azure 命令行工具登录</li>
<li>使用 Azure 命令行工具创建一个 AD 应用</li>
</ol>
<p>访问<a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/" target="_blank" rel="external">这里</a>来获取对应于不同系统的安装包</p>
<p>安装完成后就可以登录，前面的步骤和<a href="http://wdxtub.com/2016/01/15/cc-3/" target="_blank" rel="external">云计算 第 3 课 Azure 简介</a> 最后的配置部分是一样的。</p>
<p>首先切换到 Azure Resource Manager (ARM) 模式来使用新的 API：<code>azure config mode arm</code></p>
<p>然后用 <code>azure login</code> 登录，登录的时候会让你访问网址并填写对应的验证码，如下图：</p>
<p><img src="/images/14529146793205.jpg" alt=""></p>
<p>然后就可以按照下面的步骤来在 Azure AD 中创建一个 AD 应用：</p>
<p><strong>第一步</strong></p>
<p>运行 <code>azure ad app create</code> 命令来创建一个新的 Azure AD 应用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure ad app create --name &#123;Your Application Display Name&#125; --home-page https://&#123;YourApplicationHomePage&#125; --identifier-uris https://&#123;YouApplicationUri&#125; --password &#123;YourApplicationKey&#125;</span><br></pre></td></tr></table></figure>
<p>成功的话，可以看到如下的结果：</p>
<p><img src="/images/cc9.jpg" alt="c"></p>
<p>记下这里的 <code>AppId</code> 和 <code>Appkey</code>(就是刚才设置的密码)，等下获取 token 的时候要用</p>
<p><strong>第二步</strong></p>
<p>一个实例或者是一个 AD 应用被当做是 service principal 来进行引用，所以我们需要创建一个 service principal，使用刚才得到的 <code>AppId</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure ad sp create &#123;YourApplicationID&#125;</span><br></pre></td></tr></table></figure>
<p>成功之后会得到一个 object id，记下来，这个在下一步要用到。</p>
<p><img src="/images/cc10.jpg" alt="cc10"></p>
<p>现在这个服务没有任何权限，我们接下来就是要给出权限</p>
<p><strong>第三步</strong></p>
<p>这一步需要提供 <code>subscriptionID</code>，可以在下图所示位置找到</p>
<p><img src="/images/cc11.jpg" alt="c"></p>
<p>命令如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure role assignment create --objectId &#123;objectID&#125; -o Owner -c /subscriptions/&#123;subscriptionId&#125;/</span><br></pre></td></tr></table></figure>
<p>成功后结果如下图：</p>
<p><img src="/images/cc12.jpg" alt="c"></p>
<p><strong>第四步</strong></p>
<p>每个 Azure AD 应用都有一个独立的 <code>TenantId</code>，使用下面的命令来获取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure account list --json</span><br></pre></td></tr></table></figure>
<p>如下图所示</p>
<p><img src="/images/cc13.jpg" alt="c"></p>
<p>在使用 Java/Python API 时，需要提供的信息是 <code>AppId</code>, <code>AppKey</code>(密码) 和 <code>TenantId</code> 。</p>
<p>接下来我们需要把系统镜像复制到存储中。</p>
<p>我们会利用 Azure 命令行工具把系统镜像从课程账户赋值到自己的账户中，这在之后的 Project0 和 Project2 中会非常有用。具体步骤如下：</p>
<p><strong>第一步</strong></p>
<p>在资源组页面点击添加，创建一个新的资源组</p>
<p><img src="/images/14529167646056.jpg" alt=""></p>
<p><strong>第二步</strong></p>
<p>起个名字，选择 East US，然后点击创建</p>
<p><img src="/images/14529169051161.jpg" alt=""></p>
<p><strong>第三步</strong></p>
<p>在资源组例添加一个存储(storage account)</p>
<p><img src="/images/14529169731509.jpg" alt=""></p>
<p><img src="/images/14529169804085.jpg" alt=""></p>
<p><strong>第四步</strong></p>
<p>在部署模型中选择资源管理器，点击创建，并设定以下内容：</p>
<ul>
<li>名字</li>
<li>类型：最便宜那种</li>
<li>诊断：开启</li>
<li>资源组：刚才新建的资源组</li>
<li>位置：East US</li>
</ul>
<p><img src="/images/14529170662970.jpg" alt=""></p>
<p><strong>第五步</strong></p>
<p>来到刚才的创建的存储账户，点击 Blob</p>
<p><img src="/images/14529171471889.jpg" alt=""></p>
<p><strong>第六步</strong></p>
<p>创建一个名为 <code>system</code> 的容器(container)，注意访问类型是 Blob</p>
<p><img src="/images/14529172233371.jpg" alt=""></p>
<p><strong>第七步</strong></p>
<p>记下在设置/访问密钥里面的访问密钥 KEY1</p>
<p><img src="/images/14529173037560.jpg" alt=""></p>
<p><strong>第八步</strong></p>
<p>现在我们的存储账户中已经有了容器，就可以把系统镜像拷贝过来了。需要复制的原因是只能由位于同一个存储账户中的镜像来创建 osdisk</p>
<p>执行下面的代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure storage blob copy start https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/primertest-osDisk.<span class="number">7</span>ec2e680-<span class="number">5</span>a2f-<span class="number">462</span>b-ba77-cd7b707389d4.vhd  --dest-account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --dest-account-key PUT_YOUR_KEY1_HERE --dest-container system</span><br></pre></td></tr></table></figure>
<p>如下图所示</p>
<p><img src="/images/cc14.jpg" alt="c"></p>
<p><strong>第九步</strong></p>
<p>大概需要二十分钟，这期间可以通过命令行来查看载入的进度</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure storage blob copy show --account-name PUT_YOUR_STORAGE_ACCOUNT_NAME_HERE --account-key PUT_YOUR_KEY1_HERE --container system --blob Microsoft.Compute/Images/vhds/primertest-osDisk.<span class="number">7</span>ec2e680-<span class="number">5</span>a2f-<span class="number">462</span>b-ba77-cd7b707389d4.vhd</span><br></pre></td></tr></table></figure>
<p>当结果从 pending 变成 success 的时候，就可以用这个镜像来创建一台虚拟机了</p>
<p><strong>第十步</strong></p>
<p>复制完成后，点击 system 容器，记下镜像的 URL</p>
<p><img src="/images/14529201199175.jpg" alt=""></p>
<p>有了镜像 URL，接下来就可以来创建新的虚拟机了。</p>
<h3 id="Azure_Python_API"><a href="#Azure_Python_API" class="headerlink" title="Azure Python API"></a>Azure Python API</h3><p>为了介绍如何使用 Python API 来创建和管理 Azure 资源，这里通过一个例子来介绍如何通过一个预定义的镜像来创建虚拟机。</p>
<p>这个例子在之后的项目中非常有用。为了使用 Azure Python API 来创建虚拟机，需要完成以下几个步骤：</p>
<ul>
<li>安装 Python SDK</li>
<li>通过 Python ID 来获取 AD 应用的 token</li>
<li>把虚拟机镜像从课程账户拷贝到个人账户中</li>
<li>利用提供的代码来部署一个虚拟机</li>
</ul>
<p>首先通过 <code>pip install azure</code> 来安装 SDK。获取 AD 应用 token 需要 appId 和 appKey。在这门课中只需要创建一个 AD 应用。</p>
<p>如果遇到问题可以使用 <code>sudo -H pip install azure --upgrade --ignore-installed six</code></p>
<p>其中：</p>
<p><code>-H</code> set the home directory of the new user in the place of the original user’s home. (without it, $HOME refers to the original user’s home). </p>
<p>每次执行下面的代码，都会拿到一个新的 token，这个 token 可以被用来创建资源管理对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure you configure these three variables correctly before you try to run the code </span></span><br><span class="line">AZURE_ENDPOINT_URL=<span class="string">'https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/oauth2/token'</span></span><br><span class="line">AZURE_APP_ID=YOUR_APP_ID </span><br><span class="line">AZURE_APP_SECRET=YOUR_APP_SECRET</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token_from_client_credentials</span><span class="params">(endpoint, client_id, client_secret)</span>:</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'grant_type'</span>: <span class="string">'client_credentials'</span>,</span><br><span class="line">        <span class="string">'client_id'</span>: client_id,</span><br><span class="line">        <span class="string">'client_secret'</span>: client_secret,</span><br><span class="line">        <span class="string">'resource'</span>: <span class="string">'https://management.core.windows.net/'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(endpoint, data=payload).json()</span><br><span class="line">    <span class="keyword">return</span> response[<span class="string">'access_token'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    auth_token = get_token_from_client_credentials(endpoint=AZURE_ENDPOINT_URL,</span><br><span class="line">            client_id=AZURE_APP_ID,</span><br><span class="line">            client_secret=AZURE_APP_SECRET)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> auth_token</span><br></pre></td></tr></table></figure>
<p>这里我们需要 OAUTH 2.0 的 endpoint URL，到 web 控制台-&gt;浏览-&gt;Active Directory。然后会跳转到另一个控制台，点击应用程序，再点击页面下方的查看端点，如下图所示</p>
<p><img src="/images/14529493984204.jpg" alt=""></p>
<p>记录下 OAUTH 2.0 令牌端点的地址。</p>
<p>前面已经把位于 <code>https://cc15619.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/primertest-osDisk.7ec2e680-5a2f-462b-ba77-cd7b707389d4.vhd</code> 的镜像拷贝到了自己的账户中，接下来就可以开始创建了，首先从<a href="https://s3.amazonaws.com/15619public/webcontent/azure_demo_create_vm_from_ami.py" target="_blank" rel="external">这里</a>下载代码，其中的 <code>azure_api.create_vm_from_ami()</code> 函数在之后的 project 中会很有用。</p>
<p>也可以来参考 <a href="https://azure-sdk-for-python.readthedocs.org/en/latest/index.html" target="_blank" rel="external">Python SDK 文档</a>来找到所需的 API。</p>
<p>我们提供了一个 <code>demo()</code> 函数来展示如何使用，通过填写对应的参数来用以下代码运行 demo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python azure_demo_create_vm_from_ami.py STORAGE_ACCOUNT_NAME SUBSCRIPTION_ID ENDPOINT_URI APPLICATION_ID APPLICATION_SECRET_KEY</span><br></pre></td></tr></table></figure>
<p>这里出现了一些问题，后来发现是 python 的 requests 包版本过低导致的，使用 <code>pip install --upgrade requests</code> 解决。</p>
<p>运行的时候会有 InsecurePlatformWarning，这个是因为没有安装 <code>security</code> 包，用这条语句来安装 <code>$ pip install requests[security]</code> 或者直接安装 <code>$ pip install pyopenssl ndg-httpsclient pyasn1</code>。这之后 就会自动用加密的请求</p>
<p><img src="/images/14529531648561.jpg" alt=""></p>
<p>完成之后就可以通过给出的 IP 地址来访问，用户名是 ubuntu，密码是 Cloud@123，然后就登录完成了</p>
<p><img src="/images/cc15.jpg" alt="c"></p>
<p>记得在操作完成之后删除对应的资源。</p>
<h3 id="Azure_Java_API"><a href="#Azure_Java_API" class="headerlink" title="Azure Java API"></a>Azure Java API</h3><p>为了介绍如何使用 Java API 来创建和管理 Azure 资源，这里通过一个例子来介绍如何通过一个预定义的镜像来创建虚拟机。</p>
<p>这个例子在之后的项目中非常有用。为了使用 Azure Java API 来创建虚拟机，需要完成以下几个步骤：</p>
<ul>
<li>安装 Java SDK</li>
<li>通过 Java ID 来获取 AD 应用的 token</li>
<li>把虚拟机镜像从课程账户拷贝到个人账户中</li>
<li>利用提供的代码来部署一个虚拟机</li>
</ul>
<p>我需要以下的 SDK</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">azure-mgmt-compute</span><br><span class="line">azure-mgmt-utility</span><br><span class="line">azure-mgmt-network</span><br><span class="line">azure-mgmt-storage</span><br></pre></td></tr></table></figure>
<p>按照 Java SDK 的意思是把这些 SDK 包含在项目中，方便起见，可以用<code>maven</code> 来编译和运行样例代码，步骤为：</p>
<ol>
<li>在电脑上安装 maven</li>
<li>切换到 <code>azureDemo</code> 目录</li>
<li>执行 <code>mvn compile</code> 与 <code>mvn exec:java -Dexec.mainClass=&quot;AzureVMApiDemo&quot; [-Dexec.args=&quot;argument1 argument2 argument3 argument4 argument5&quot;]</code></li>
</ol>
<p>和 Python 一样，我们需要获取到 <code>tenantID</code>, <code>applicationID</code>, <code>applicationKey</code> 并且把对应的镜像复制到自己的存储账户中。</p>
<p>如果之前已经创建过了，现在就可以直接下载代码来运行了。</p>
<p>因为我的机子上没有安装 maven，所以这里首先要进行安装。</p>
<p>先下载 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="external">Maven</a>，然后解压到某个目录下，这里我解压到 <code>Users/dawang/apache-maven-3.3.9</code> 中。</p>
<p>然后打开终端，设置一下 Maven classpath</p>
<p><code>$ vi ~/.bash_profile</code></p>
<p>添加</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/Users/dawang/apache-maven-<span class="number">3.3</span>.<span class="number">9</span></span><br><span class="line">export PATH=<span class="variable">$PATH</span>:<span class="variable">$M2</span>_HOME/bin</span><br></pre></td></tr></table></figure>
<p>然后输入 <code>source ~/.bash_profile</code> 让命令生效，并用 <code>mvn -v</code> 来检验是否成功安装，如果出错，基本是因为没有设置 <code>JAVA_HOME</code> 环境变量所导致，重新编辑 <code>bash_profile</code> 增加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0</span>_60.jdk/Contents/Home</span><br></pre></td></tr></table></figure>
<p>重新输入 <code>source ~/.bash_profile</code> 让命令生效，就可以看到 maven 成功安装了，如下图：</p>
<p><img src="/images/cc16.jpg" alt="c"></p>
<p>然后在<a href="https://s3.amazonaws.com/15619public/webcontent/azureDemo.tar.gz" target="_blank" rel="external">这里</a>下载代码，解压之后通过下面的命令来进行编译执行，注意添加对应的参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile &amp;&amp; mvn <span class="built_in">exec</span>:java -Dexec.mainClass=<span class="string">"AzureVMApiDemo"</span> -Dexec.args=<span class="string">"RESOURCEGROUP STORAGEACCOUNT VHDNAME SUBSCRIPTIONID TENANTID APPLICATIONID APPLICATIONKEY"</span></span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>STORAGEACCOUNT, RESOURCEGROUP are corresponding to resources where you put the copied image;</li>
<li>VHDNAME is the copied disk image name under your account (it must end with a .vhd);</li>
<li>SUBSCRIPTIONID comes from your Azure account;</li>
<li>TENANTID, APPLICATIONID, APPLICATIONKEY are generated when you authenticated your service principal;(Please refer to previous sections)</li>
</ul>
<p>疯狂下载之后开始配置，等待一段时间后会提示配置成功。这里需要注意 VHDNAME 里前面名字已经配置好了，直接输入文件名即可。</p>
<p>等一下就发现创建成功：</p>
<p><img src="/images/cc17.jpg" alt="c"></p>
<p>完成之后就可以通过给出的 IP 地址来访问，用户名是 ubuntu，密码是 Cloud@123，然后就登录完成了，如下图：</p>
<p><img src="/images/cc18.jpg" alt="c"></p>
<p>做完后记得删除对应的资源。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一讲介绍了关于 SSH 和 Linux 的相关知识，这一讲我们来看看，如何通过代码，而不是界面或者命令行，来控制 Azure。</p>]]>
    
    </summary>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
      <category term="Azure" scheme="http://yoursite.com/tags/Azure/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 4 课 SSH, Linux & Project]]></title>
    <link href="http://yoursite.com/2016/01/15/cc-4/"/>
    <id>http://yoursite.com/2016/01/15/cc-4/</id>
    <published>2016-01-16T01:19:30.000Z</published>
    <updated>2016-01-16T14:58:55.000Z</updated>
    <content type="html"><![CDATA[<p>了解了基本的云平台之后，我们现在来学习一下刚才我们用到的 SSH 和 Linux，最后介绍做项目的要求。</p>
<a id="more"></a>
<hr>
<h2 id="Secure_Shell_28SSH_29"><a href="#Secure_Shell_28SSH_29" class="headerlink" title="Secure Shell(SSH)"></a>Secure Shell(SSH)</h2><p>简单来说 SSH 是一个用来进行安全数据通信、远程登录和远程命令执行的网络协议。在 EC2 instance 上使用 SSH 与平时相比有一些小小的变化，将在下面介绍。</p>
<p><img src="/images/14529074027221.jpg" alt=""><br>（SSH 连接 EC2 的过程）</p>
<h3 id="u8BBE_u7F6E_SSHD"><a href="#u8BBE_u7F6E_SSHD" class="headerlink" title="设置 SSHD"></a>设置 SSHD</h3><p>在 Linux 上使用 <code>sudo apt-get install openssh-server</code>，配置文件在 <code>/etc/ssh/sshd.config</code> 中。可以使用 <code>sudo /etc/init.d/ssh</code> 或 <code>sudo service sshd [start|stop|restart]</code> 来进行管理</p>
<h3 id="u9A8C_u8BC1_u673A_u5236"><a href="#u9A8C_u8BC1_u673A_u5236" class="headerlink" title="验证机制"></a>验证机制</h3><p>SSH 支持若干中验证机制。比较常见的是通过密码验证。密码验证的安全性取决于密码的长度和复杂度，由于可以被暴力或者基于字典破解，所以对于公共访问的 EC2 instance 来说是比较危险的。</p>
<p>为此，所有的 EC2 instance 都使用基于公钥加密的 key-based 验证。一对密钥包含公钥和私钥，由数学方式如 RSA/DSA 生成并链接。只知道一个 key 的话，几乎不可能破解另外一个 key。</p>
<p>我们也可以生成自己的密钥对，在 Linux 中，密钥对通常存储在 <code>~/.ssh</code> 目录下，通过下面的代码就可以生成密钥对：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate a new key with your email id as a label</span></span><br><span class="line">ssh-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">"email_id@domain.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enter the file where you want to save the key: (recommended - choose default)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You will be asked enter a pass-phrase for your key twice.</span></span><br><span class="line"><span class="comment"># (Use a strong pass-phrase. Longer pass-phrases are more secure than shorter ones.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After you provide the pass-phrase. The console will print the location of the key and the key fingerprint</span></span><br></pre></td></tr></table></figure>
<p>然后就可以导入这个密钥并用以连接 EC2，具体的做法可以看<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws" target="_blank" rel="external">这里</a></p>
<p>举个例子，下面的代码会在远程实例执行 <code>uname -a</code> 命令，这种做法在批量运行远程实例命令的时候非常有用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i private_key_file.pem some-instance.ec2.amazonaws.com <span class="string">'uname –a'</span></span><br></pre></td></tr></table></figure>
<p>如果遇到 SSH 的 permission-denied 问题，很可能是由于不正确权限所导致，私钥的 unix permission 为 <code>600</code> 且包含私钥的目录的权限应为 <code>700</code></p>
<p>在执行 SSH 命令时，如果太久没有操作，就会自动断开，执行的脚本也会终止，如果不希望这样，有以下几种方式可以避免 SSH 超时：</p>
<ol>
<li><a href="https://docs.oseems.com/general/application/ssh/disable-timeout" target="_blank" rel="external">关闭 SSH 客户端的超时</a></li>
<li>用 <code>nohup</code> 执行脚本</li>
<li>通过远程屏幕管理(remote sreen management)来保持 terminal sessions</li>
</ol>
<h3 id="Remote_Screen_Management"><a href="#Remote_Screen_Management" class="headerlink" title="Remote Screen Management"></a>Remote Screen Management</h3><p>通常来说我们用 bash shell 来进行远程操作，但是由于网络的缘故，一旦连接断开，所有已经启动的进程都会被终止。为了避免这种情况，使用 <code>nohup</code> 命令就非常有用了，即使连接断开，仍旧会继续运行命令。</p>
<p>另外一个比较有用的工具是 <code>byobu</code>，是一个多终端管理应用程序，类似于 <code>screen</code> 或者 <code>tmux</code>。具体可以参考下图：</p>
<p><img src="/images/14529090638274.jpg" alt=""></p>
<h2 id="Linux__u5FC5_u5907_u6280_u80FD"><a href="#Linux__u5FC5_u5907_u6280_u80FD" class="headerlink" title="Linux 必备技能"></a>Linux 必备技能</h2><p>这门课基本上会在 Linux 环境下工作，所以这里给出一些基本的概念和技巧。下面是一些教程：</p>
<ol>
<li><a href="http://tldp.org/LDP/abs/html/" target="_blank" rel="external">The Advanced Bash Scripting Guide</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line" target="_blank" rel="external">The Art of the Command Line</a> <a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external">中文版本</a></li>
<li><a href="http://www.perl.org/" target="_blank" rel="external">Perl 指南</a></li>
<li><a href="http://www.python.org/" target="_blank" rel="external">Python 指南</a></li>
</ol>
<p>读的时候需要注意下面的内容：</p>
<ol>
<li>脚本语法，本地变量和环境变量</li>
<li>bash 中的 Quoting and back-ticks</li>
<li>利用 unix 管道进行输入输出重定向</li>
<li>使用类似 <code>grep</code>, <code>awk</code>, <code>sed</code>, <code>cut</code> 等等来做基本的文本操作</li>
</ol>
<h3 id="u5B89_u88C5_u8F6F_u4EF6"><a href="#u5B89_u88C5_u8F6F_u4EF6" class="headerlink" title="安装软件"></a>安装软件</h3><p>用 Ubuntu 的话可以使用强大的 <code>apt-get</code> 来安装软件，例如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install emacs</span><br><span class="line">sudo apt-get install vim</span><br><span class="line"></span><br><span class="line">sudo apt-get update <span class="comment"># 用来更新包索引</span></span><br><span class="line">sudo apt-get upgrade <span class="comment"># 用来更新包</span></span><br></pre></td></tr></table></figure>
<h3 id="u6587_u4EF6_u6240_u6709_u8005_u548C_u6743_u9650"><a href="#u6587_u4EF6_u6240_u6709_u8005_u548C_u6743_u9650" class="headerlink" title="文件所有者和权限"></a>文件所有者和权限</h3><p>Linux 的文件权限分为三个用户组：<code>user</code>, <code>group</code> 和 <code>others</code>，每组有三个权限：读(<code>r</code>)，写(<code>w</code>)，执行(<code>x</code>)，具体可以参考下表</p>
<p><img src="/images/cc8.jpg" alt="c"></p>
<p>然后我们可以利用 <code>chmod</code> 命令来修改权限，如：<code>chmod 777 filename.txt</code></p>
<p>不用数字的话，可以用字母，<code>chmod u+x filename.txt</code> 这个命令就给 user 添加了执行权限。</p>
<p>如果要更改文件所属，使用 <code>chown</code> 命令，具体可以参见 <code>man chown</code></p>
<h3 id="Linux__u4E2D_u7684_u78C1_u76D8_u64CD_u4F5C"><a href="#Linux__u4E2D_u7684_u78C1_u76D8_u64CD_u4F5C" class="headerlink" title="Linux 中的磁盘操作"></a>Linux 中的磁盘操作</h3><h4 id="u7BA1_u7406_u5206_u533A"><a href="#u7BA1_u7406_u5206_u533A" class="headerlink" title="管理分区"></a>管理分区</h4><p>许多 Linux 应用都可以管理磁盘分区，比如说 <code>parted</code> 和 <code>fdisk</code>。<code>fdisk</code> 是比较老的分区管理工具，现在几乎已经被 <code>parted</code> 取代，因为 <code>parted</code> 支持 GUID 分区表以及大于 2TB 的磁盘，所以我们这里使用 <code>parted</code>。</p>
<p><code>parted -l</code> 会列出系统中的所有分区。具体的顺序是按照 <code>/dev</code> 下的顺序。在 EC2 实例中，设备是 <code>dev/xvd**</code>，<code>/dev/xvda1</code> 是操作系统分区，<code>/dev/xvdb</code> 是实例的存储分区，注意 RAMDISK 不会出现在 <code>parted</code> 的输出当中。</p>
<p><code>parted</code> 还可以用来为每个分区设置类型和文件系统，例如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parted /dev/xvdX mklabel gpt</span><br><span class="line">parted /dev/xvdX mkpart db ext4 <span class="number">0</span>% <span class="number">10</span>G</span><br></pre></td></tr></table></figure>
<p>如果不加任何参数，<code>parted</code> 就会进入交互模式，这里你可以利用 <code>mkfs</code> 来格式化一个分区，如 <code>mkfs.ext4 /dev/xvdX1</code></p>
<h4 id="u6302_u8F7D_u5206_u533A"><a href="#u6302_u8F7D_u5206_u533A" class="headerlink" title="挂载分区"></a>挂载分区</h4><p>在分区和格式化之后，如果想要使用就需要把分区挂载在某个挂载点上，通常来说会挂载在 <code>/mnt</code> 或者 <code>/mount</code> 上，可移除的媒介，例如 USB 和 CDROM，会挂载在 <code>/media</code> 上，当然，你可以把分区挂载在任何地方，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/mountpoint</span><br><span class="line">mount /dev/yourdevice /storage/mountpoint</span><br></pre></td></tr></table></figure>
<h3 id="u914D_u7F6E_u670D_u52A1_u548C_u542F_u52A8"><a href="#u914D_u7F6E_u670D_u52A1_u548C_u542F_u52A8" class="headerlink" title="配置服务和启动"></a>配置服务和启动</h3><p>如果想要开机启动，需要参考应用本身的帮助文档，但是总体来说，服务需要安装在 <code>/etc/init.d</code> 中，这使得这些脚本可以在启动时运行。例如，如果 mysql 脚本在 <code>/etc/init.d</code> 中，那么可以使用这个命令 <code>service mysql [start|stop|restart]</code>。</p>
<p>想要了解更多，请参阅<a href="http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/boot.html" target="_blank" rel="external">这里</a></p>
<h2 id="u9879_u76EE"><a href="#u9879_u76EE" class="headerlink" title="项目"></a>项目</h2><p>早开始，早学习，多测试，注意截止时间。即使 AWS 或者 Azure 挂掉也不会推迟截止日期，所以最保险的还是提早开始做（其实做什么事情都是这样）。</p>
<p>可能的情况下尽量用 spot instance，可以给学校省点钱。当然后面的 project 也会有具体的要求，就跟着做即可。</p>
<h3 id="u7BA1_u7406_u82B1_u8D39"><a href="#u7BA1_u7406_u82B1_u8D39" class="headerlink" title="管理花费"></a>管理花费</h3><p>每个 project 都有花费的限制，可以在 AWS 账户活动页面查看用费状况，如下图所示：</p>
<p><img src="/images/14529122617926.jpg" alt=""></p>
<h3 id="u7ED9_AWS__u8D44_u6E90_u6DFB_u52A0_u6807_u7B7E"><a href="#u7ED9_AWS__u8D44_u6E90_u6DFB_u52A0_u6807_u7B7E" class="headerlink" title="给 AWS 资源添加标签"></a>给 AWS 资源添加标签</h3><p>AWS 资源，包括 EC2 实例，S3 Bucket 等都可以通过键值对来打标签，做每个 project 的时候都要打上对应的标签，例如：</p>
<p><img src="/images/14529125832425.jpg" alt=""></p>
<p>打标签是必须的，不然会扣分。</p>
<p>注意 spot 实例创建和 spot 实例请求是两个分开的过程，所以得确保在实例启动的时候单独打赏标签。</p>
<h3 id="u8BC4_u4EF7_u548C_u6253_u5206"><a href="#u8BC4_u4EF7_u548C_u6253_u5206" class="headerlink" title="评价和打分"></a>评价和打分</h3><p>某些项目中会使用教学人员提供的 AMI，包含所需的所有数据，通常来说会包含两个文件：</p>
<ol>
<li><code>runner.sh</code>：bash 脚本，每个问题对应一个函数，完成这些函数并运行脚本来验证答案</li>
<li><code>submitter</code>：验证答案之后用这个来提交，需要用到 andrewID 和 提交密码，提交密码可以在每个项目页面的顶端找到</li>
</ol>
<p>因为只能提交一次，所以确保提交前都弄好。还需要提交对应的源代码，会通过以下的方式来评估：</p>
<ol>
<li>完成提到的任务</li>
<li>效率和性能</li>
<li>编码风格，可读性，注释，建议参考 <a href="https://github.com/google/styleguide" target="_blank" rel="external">Google Style Guide</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>了解了基本的云平台之后，我们现在来学习一下刚才我们用到的 SSH 和 Linux，最后介绍做项目的要求。</p>]]>
    
    </summary>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 3 课 Azure 简介]]></title>
    <link href="http://yoursite.com/2016/01/15/cc-3/"/>
    <id>http://yoursite.com/2016/01/15/cc-3/</id>
    <published>2016-01-15T22:21:49.000Z</published>
    <updated>2016-01-16T01:05:54.000Z</updated>
    <content type="html"><![CDATA[<p>现在我们已经了解了 AWS 的基本使用。接下来看看另一个云服务提供商 Microsoft Azure 的基本配置和使用。</p>
<a id="more"></a>
<hr>
<h2 id="Microsoft_Azure"><a href="#Microsoft_Azure" class="headerlink" title="Microsoft Azure"></a>Microsoft Azure</h2><p>简单来说，就是微软提供的云服务，提供 PaaS 和 IaaS 服务，于此同时支持不同的编程语言/工具/框架。在这门课中会设置好 Azure Virtual Machines (VMs) 以及使用其存储服务。</p>
<p><a href="https://youtu.be/ZNgvZE0MLeo" target="_blank" rel="external">Azure 介绍视频（墙外）</a></p>
<p>不想看视频的话，我帮大家看了，总结要点如下：</p>
<ol>
<li>为什么要用云呢？多快好省</li>
<li>为什么要用微软的云呢？因为微软大法好，我们自己的服务也就是在 Azure 上</li>
<li>包括什么呢？应用服务，数据服务，设施服务</li>
<li>数据中心在哪里呢？美国欧洲中国日本澳大利亚</li>
<li>我们的用户是谁？遍布世界各地</li>
<li>『我们好靠谱的大家快来用吧！』</li>
</ol>
<p>可以通过访问 <a href="https://portal.azure.com/" target="_blank" rel="external">Azure Portal</a> 或者 <a href="https://manage.windowsazure.com/" target="_blank" rel="external">Azure Manage</a> 来访问 Azure 控制台，其中 Azure Portal 是一个新的控制台，尽量用这个。需要更多信息，可以查看<a href="https://azure.microsoft.com/en-us/documentation/articles/fundamentals-introduction-to-azure" target="_blank" rel="external">这里</a></p>
<h2 id="Microsoft_Azure_Compute"><a href="#Microsoft_Azure_Compute" class="headerlink" title="Microsoft Azure Compute"></a>Microsoft Azure Compute</h2><p>Azure 计算服务提供了可以配置启动登录安装运行软件的虚拟机，按照以下步骤来创建一个虚拟机：</p>
<ol>
<li>登录<a href="https://portal.azure.com/" target="_blank" rel="external">Azure Portal</a></li>
<li>新建 -&gt; 计算 -&gt; Ubuntu Server 14.04 LTS，选择 <code>资源管理器</code> 作为 <code>部署模型</code></li>
<li>设置姓名、用户名和密码，新建一个资源组，点击确定</li>
<li>然后在大小选择中点击查看全部，选择 <code>A0 标准</code>，也就是最便宜的那个</li>
<li>后面的大部分内容都可以用默认值，然后点击确定就创建完成了</li>
</ol>
<p>Azure 有两种不同的部署模型：Azure Service Manager(ASM) 和 Azure Resource Manager(ARM)，后者更新也有更好的 API，所以我们在这门课中尽量会用这一种。</p>
<p>注意，在一种模型例部署的资源在另一种里看不到，更多信息可以访问<a href="http://blogs.msdn.com/b/cloud_solution_architect/archive/2015/03/17/rbac-and-the-azure-resource-manager.aspx" target="_blank" rel="external">这里</a></p>
<h3 id="u5B9E_u4F8B_u6559_u7A0B"><a href="#u5B9E_u4F8B_u6559_u7A0B" class="headerlink" title="实例教程"></a>实例教程</h3><p>这里我们对 Azure 做上一讲中对 Amazon EC2 同样的事情：SSH 连接，双向复制文件，并尝试做一些基本操作。</p>
<p>新建好的虚拟机大概情况是这样：</p>
<p><img src="/images/7.pic.jpg" alt="7.pi"></p>
<p>有了这些信息，就可以用 <code>ssh wdxtub@ipaddress</code> 来进行连接，连接成功之后会要求输入密码，密码验证之后就可以看到对应的命令行了。</p>
<p><img src="/images/cc3.jpg" alt="c"></p>
<p>同样的，在服务器上新建一个叫做 <code>hello</code> 的文件夹，然后利用 <code>scp hello.sh wdxtub@ipaddress:\hello</code> 把我们的脚本文件上传上去。</p>
<p><img src="/images/cc4.jpg" alt="c"></p>
<p>就可以看到我们在脚本中输出的内容了。然后我们新建一个文本文件，随便写点内容，利用 <code>scp wdxtub@ipaddress:\hello/info2.txt ./</code> 就可以把文件复制到本地了</p>
<p>操作完成之后记得停止虚拟机，不然运行着就不断在花钱的。</p>
<h2 id="Microsoft_Azure_Storage"><a href="#Microsoft_Azure_Storage" class="headerlink" title="Microsoft Azure Storage"></a>Microsoft Azure Storage</h2><p>类似于 Amazon S3，是一个可拓展的存储系统，有下面四种形态：</p>
<ol>
<li>Azure Blobs，类似 Amazon S3 的对象存储系统</li>
<li>Azure Tables，数据库</li>
<li>Azure Queues，应用的消息队列</li>
<li>Azure Files，文件系统</li>
</ol>
<p>现在我们主要接触一下 Azure Blobs，首先先要建立一个 Azure Storage 账户，按照下面步骤即可：</p>
<ol>
<li>新建 -&gt; 数据+存储器 -&gt; 存储(Storage account)</li>
<li><code>部署模型</code> 选择 <code>资源管理器</code>，然后指定唯一的名字</li>
<li>指定一个现有的资源组（刚才新建的那个就可以），然后在类型里选择 <code>L 本地冗余</code>（最便宜那个）</li>
<li>然后就可以创建了</li>
</ol>
<p>等待一段时间部署，部署完成后就可以通过 Azure 命令行工具来进行访问了。</p>
<p><img src="/images/cc5.jpg" alt="c"></p>
<p>可以在服务这一栏里看到之前提到的四种类型。</p>
<h2 id="Microsoft_Azure_CLI"><a href="#Microsoft_Azure_CLI" class="headerlink" title="Microsoft Azure CLI"></a>Microsoft Azure CLI</h2><p>在<a href="https://azure.microsoft.com/en-us/downloads/" target="_blank" rel="external">这里</a> 的 Command-line tools 一栏中选择对应操作系统的版本下载安装，这里我会用 mac 版本。</p>
<p>安装很简单，下载下来一个 dmg 文件，然后一步步按照提示安装即可，安装完成之后就可以在终端里输入 <code>azure</code> 来使用了，类似下面这样：</p>
<p><img src="/images/cc6.jpg" alt="c"></p>
<p>这门课里会使用 ARM/Azure Resource Manager(v2)，所以我们用 <code>azure config mode arm</code> 切换到这个模式，更多信息点击<a href="https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-azurerm-versus-azuresm" target="_blank" rel="external">这里</a></p>
<p>这一步比较麻烦，首先先要到<a href="https://manage.windowsazure.com" target="_blank" rel="external">另一个控制台</a>进行操作，在 Active<br> Deirectory 页面下新建一个用户，然后会给你一个初始密码。然后再在设置中把刚才的用户添加位管理员。具体参考<a href="https://azure.microsoft.com/en-us/documentation/articles/active-directory-create-users/" target="_blank" rel="external">创建用户</a></p>
<p>这些都做完之后，才可以用刚才给的帐号密码在<a href="https://manage.windowsazure.com" target="_blank" rel="external">网页版</a>登录，注意第一次需要修改密码，然后才可以用命令行登录，具体命令是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">azure login</span><br></pre></td></tr></table></figure>
<p>然后会给出一个地址，让你访问来进行验证，如下图所示：</p>
<p><img src="/images/cc7.jpg" alt="c"></p>
<p>经过一系列的账户验证后，在命令行中会显示登录成功。就可以正常使用了，比如 <code>azure location list</code> 查看数据中心位置列表，更详细的教程在<a href="https://azure.microsoft.com/en-us/documentation/articles/azure-cli-arm-commands/" target="_blank" rel="external">这里</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在我们已经了解了 AWS 的基本使用。接下来看看另一个云服务提供商 Microsoft Azure 的基本配置和使用。</p>]]>
    
    </summary>
    
      <category term="Azure" scheme="http://yoursite.com/tags/Azure/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[云计算 第 2 课 AWS 简介]]></title>
    <link href="http://yoursite.com/2016/01/15/cc-2/"/>
    <id>http://yoursite.com/2016/01/15/cc-2/</id>
    <published>2016-01-15T15:29:53.000Z</published>
    <updated>2016-01-16T01:05:46.000Z</updated>
    <content type="html"><![CDATA[<p>开发过程中最麻烦的往往不是开发本身，而是环境搭建，尤其是调通各种接口和服务。这一讲会介绍 AWS 的基本使用。</p>
<a id="more"></a>
<hr>
<h2 id="Amazon_Web_Services_AWS"><a href="#Amazon_Web_Services_AWS" class="headerlink" title="Amazon Web Services AWS"></a>Amazon Web Services AWS</h2><p>AWS 是目前最广泛应用的云服务，包含各种不同的服务，比如 Amazon Simple Storage Service (S3) 和 Amazon Elastic Compute Cloud (EC2)。在本课程中会使用 Amazon EC2 并且利用 S3 作为永久存储。与此同时也会使用其他的一些技术比如：Elastic Block Store(EBS), CloudWatch 和 DynamoDB。更多的信息请参考 <a href="http://aws.amazon.com/" target="_blank" rel="external">AWS 网站</a></p>
<p><a href="https://www.youtube.com/watch?v=jOhbTAU4OPI#action=share" target="_blank" rel="external">视频介绍(墙外)</a></p>
<h3 id="AWS_Authentication"><a href="#AWS_Authentication" class="headerlink" title="AWS Authentication"></a>AWS Authentication</h3><p>除了 AWS 本身的帐号外，访问 API 以及各类 AWS 服务需要使用的一对『钥匙』：<strong>AWS Access Key ID</strong> 以及 <strong>AWS Secret Key</strong>。</p>
<p>生成『钥匙』可以按照以下步骤：</p>
<ol>
<li>登录 AWS 账户</li>
<li>在右上角的下拉菜单中选择 Security Credentials (安全证书)<ul>
<li>如果是第一次访问的话会弹出一个提示是继续还是看一下教程，可以根据自己的需要来选择</li>
</ul>
</li>
<li>在 Access Key (访问密钥)那一栏创建一个新的密钥，就会包含 <strong>AWS Access Key ID</strong> 以及 <strong>AWS Secret Key</strong>。</li>
</ol>
<p>成功的话如下图所示，请注意：您一次最多可拥有两个访问密钥（活跃或非活跃）。</p>
<p><img src="/images/2.pic_hd.jpg" alt="2.pic_hd"></p>
<p>注意！AWS 密钥拥有控制 AWS 帐号的完全权限，所以务必要保存在安全的地方，做到以下几点：</p>
<ol>
<li>不要与任何人共享 AWS 密钥</li>
<li>不要在代码中用明文保存密钥</li>
<li>不要把包含 AWS 密钥的代码提交到任何库中</li>
</ol>
<p>比较安全的做法是利用环境变量来保存密钥：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">"YOUR_ACCESS_KEY_HERE"</span></span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_KEY=<span class="string">"YOUR_SECRET_KEY_HERE"</span></span><br></pre></td></tr></table></figure>
<p>在代码中就可以使用 <code>System.getenv(&quot;AWS_ACCESS_KEY_ID&quot;)</code> 或者 <code>os.environ[&#39;AWS_ACCESS_KEY_ID&#39;]</code> 来访问，不会出现明文，我在自己电脑里用得名字是：<code>AWSAccessKeyId</code> 和 <code>AWSSecretKey</code></p>
<h3 id="AWS_Managment_Console"><a href="#AWS_Managment_Console" class="headerlink" title="AWS Managment Console"></a>AWS Managment Console</h3><p><a href="https://youtu.be/EfnfcIqq_IU" target="_blank" rel="external">AWS 概览和账单查看视频教程（墙外）</a></p>
<p>在右上角的下拉菜单中可以查看花费，如下图所示：</p>
<p><img src="/images/cc1.jpg" alt="c"></p>
<p>左边的不同选项可以查看不同的信息，这里提示一下，因为之前已经转换为学校付款，所以建议把之前绑定的个人信用卡删除，避免因为操作问题被额外扣钱。</p>
<h2 id="Elastic_Compute_Cloud__28EC2_29"><a href="#Elastic_Compute_Cloud__28EC2_29" class="headerlink" title="Elastic Compute Cloud (EC2)"></a>Elastic Compute Cloud (EC2)</h2><p>简单来说，EC2 提供计算能力。会为你的服务创建虚拟服务器，因此省去了搭建硬件的过程。可以通过界面或者 API 来启动所需的 instance，配置安全和网络以及管理存储。</p>
<p>开始使用 Amazon EC2 的时候，需要了解一些和本地机器不大一样的关键概念，可以从下面的是品种了解到</p>
<p><a href="https://youtu.be/t0Gg0Y1Gz6Q" target="_blank" rel="external">EC2 基础（墙外）</a></p>
<p>Instance 可以被看做是虚拟机或虚拟服务器，有虚拟 CPU，内存，本地存储和网络带宽，当然运行的时候是要花钱的。具体的配置不能够自定义，只能从几个类型中选择：</p>
<ul>
<li><code>t1.micro</code>：1 个虚拟 CPU，1 G 内存，无本地存储，低带宽。这种会提供免费的使用时间，基本也就够用了。</li>
<li><code>m1.small</code></li>
<li><code>m1.large</code></li>
<li><code>c1.xlarge</code></li>
</ul>
<p>具体的类型可以参考亚马逊的<a href="http://aws.amazon.com/ec2/instance-types" target="_blank" rel="external">介绍</a>，这里不一一列举。</p>
<p>花钱也有不同的方式：</p>
<ul>
<li>按需：每个 instance 每小时有固定的价钱</li>
<li>Reserved：预付款模式</li>
<li>Spot Pricing：Bid for unused capacity，给定一个价格，如果浮动到价格以下，那么就帮你开启，并以当时的价格计价</li>
</ul>
<p>instance 的存储会在 Elastic Block Storage(EBS)。</p>
<p>Amazon Machine Image (AMI) = 操作系统 + 软件。</p>
<p>一旦一个 instance 启动之后，就有了一个公网的 IP，可以通过 Security Group 来进行访问，比如 22 端口 SSH，80 端口 HTTP，3306 端口 MySQL。</p>
<p>利用密钥对来访问 EC2 instances。</p>
<p>总结一下，启动一个 instance 有以下几个步骤：</p>
<ol>
<li>选择一个 instance 类型：<code>t1.micro</code></li>
<li>决定一个计价模型：Spot Pricing</li>
<li>选择一个 AMI：Ubuntu AMI</li>
<li>定义一个 Security Group</li>
<li>使用密钥对来连接</li>
</ol>
<h3 id="EC2__u672F_u8BED"><a href="#EC2__u672F_u8BED" class="headerlink" title="EC2 术语"></a>EC2 术语</h3><p>这部分为了保证准确，使用英文原文：</p>
<p><strong>EC2 Instance</strong>: EC2 instances are virtual servers that you can configure and launch on Amazon EC2. It can be thought of as a copy of a software image, Amazon Machine Image (AMI), that is actively running on the Amazon EC2 cloud. Instances run on host computers at Amazon’s data center, but this is typically transparent to the user. Instances have many parameters including:</p>
<p>1.<strong>Amazon Machine Image (AMI)</strong>: Is a template that contains a complete software image (operating system, applications, libraries and data). You launch instances using specific AMIs, which are copies of the AMI running as virtual servers in the cloud. You can launch multiple instances of an AMI. </p>
<p><img src="/images/14528880846285.jpg" alt=""></p>
<p>2.<strong>Instance Type</strong>: Amazon offers different instance types which have varying amounts of compute and storage available to them. They range from t1.micro to cc2.8xlarge and have different on-demand/reserved and spot prices.</p>
<p>3.<strong>Regions and Availability Zones</strong>: Instances can be launched across various AWS regions, which are distributed geographically (Virginia/Singapore etc.). Each region has a number of availability zones, which are distinct locations within a data center and are engineered to be isolated from other availability zones in the same region. This allows users to spawn instances in the same region but across availability zones and protect applications from the potential failure of a single availability zone.</p>
<p><img src="/images/14528881433917.jpg" alt=""></p>
<p>4.<strong>Pricing</strong>: Instances can be launched using three different pricing models:</p>
<ul>
<li>The on-demand pricing is a fixed hourly rate that you pay for the instance. It can range from a few cents to a few dollars per hour depending on the instance type.</li>
<li>If you want to use an instance for a fixed amount of time, you can purchase reserved instances (which are typically calculated yearly).</li>
<li>In addition there are spot instances which are described below.</li>
</ul>
<p>5.<strong>Spot Instances</strong>: Spot instances are special instances which allow users to bid for unused computing capacity. You can specify an hourly rate that you are willing to pay to use an instance. In addition, for each instance type under each availability zone, Amazon maintains a spot price which reflects the current demand for the instance type. If your bidding price is more than the spot price, an instance will be launched at the current spot price and will continue to run until the spot price exceeds your bid price. Spot instances are volatile but very useful for getting instances for a few hours at prices that are typically much lower than the on-demand prices.</p>
<p>6.<strong>Instance Limits</strong>: AWS has preset limits on the number of simultaneous instances, per instance type, that an account can provision. You can check what the instance limits are for your account by checking the limits under the EC2 dashboard.</p>
<h3 id="Amazon_EC2_Storage"><a href="#Amazon_EC2_Storage" class="headerlink" title="Amazon EC2 Storage"></a>Amazon EC2 Storage</h3><p>针对于 EC2 instance，Amazon 提供了不同类型的存储：</p>
<p><img src="/images/14528883079086.jpg" alt=""></p>
<p><strong>Amazon EC2 Instance Store</strong>: Instance stores are storage volumes that are present on the host computer that the instances are running on. Instance stores are temporary (ephemeral), block level storage. Instance store data is cleared when an instance is stopped or terminated.</p>
<p><strong>Amazon Elastic Block Store (EBS)</strong>: EBS is a SAN-style storage system that can be used with EC2 instances. EBS presents volumes to the user that can be created independently of an instance and attached to instances as needed. EBS volumes are persistent and flexible. Multiple EBS volumes can be attached to an instance, and an EBS volume can be detached from an instance and attached to another. EBS incurs additional charges (GB/month) over and above EC2 instance charges. EBS volumes can also be backed up by creating a snapshot, which is stored in Amazon S3.</p>
<p><strong>Amazon Simple Storage Service (S3)</strong>: Amazon S3 is an object storage service which has a web services interface to store and retrieve data. Instances can access data directly on S3 using the web services interface. Amazon S3 is also used to store snapshots of EBS volumes.</p>
<h3 id="u542F_u52A8_u5E76_u8FDE_u63A5_u5230_instance"><a href="#u542F_u52A8_u5E76_u8FDE_u63A5_u5230_instance" class="headerlink" title="启动并连接到 instance"></a>启动并连接到 instance</h3><p><a href="https://youtu.be/z-NoOLk2U-g" target="_blank" rel="external">启动 EC2 instance 视频教程（墙外）</a></p>
<p>具体的步骤如下：</p>
<ol>
<li>进入控制台，选择 EC2 控制面板（地区注意选择弗吉尼亚北部，右上角那里）</li>
<li>点击实例，现在什么都没有，选择创建一个新实例</li>
<li>之后的 project 中会给出 AMI id，可以在社区 AMI 一栏里搜索选择</li>
<li>这里我们选择 Amazon Linux AMI，选择 <code>t2.micro</code></li>
<li>点击下一步进行具体的配置，这里暂时不需要修改</li>
<li>点击下一步选择存储</li>
<li>点击下一步可以给 instance 一些标签，注意格式应该是 <code>Project:&lt;Project Number&gt;</code>，如 <code>Project:0</code> 或 <code>Project:1.1</code> 这样</li>
<li>点击下一步配置 Security Group，这里可以不用修改，但是如果提高安全性的话可以限制可访问的 ip</li>
<li>然后可以查看各种选项</li>
<li>需要选择一个连接的密钥对（也可以在这里创建一个新的），是一个pem 文件，同样注意保存好</li>
<li>这时候就可以启动 instance</li>
</ol>
<p>等待一段时间，启动之后就可以连接到这个 instance，具体的步骤如下：</p>
<ol>
<li>从面板中得到 Public DNS 地址</li>
<li>使用 <code>ssh -i key_file.pem ec2-user@ec2-50-19-54-72-compute-1.amazonaws.com</code> 来进行连接</li>
<li>需要使用 <code>chmod 600 key_file.pem</code> 来修改权限</li>
<li>如果需要 root，直接 <code>sudo</code> 即可</li>
</ol>
<h3 id="Managing_Security_Groups"><a href="#Managing_Security_Groups" class="headerlink" title="Managing Security Groups"></a>Managing Security Groups</h3><p>默认只为 SSH 开放 22 端口，这些都可以在 EC2 的控制面板中进行配置：</p>
<p><img src="/images/14528910850178.jpg" alt=""></p>
<h3 id="u5B9E_u4F8B_u6559_u7A0B"><a href="#u5B9E_u4F8B_u6559_u7A0B" class="headerlink" title="实例教程"></a>实例教程</h3><p>假设已经创建好了一个 instance，这里通过一些实例演示，来进行展示和介绍：</p>
<p><img src="/images/4.pic.jpg" alt="4.pi"></p>
<p>我们现在本机创建一个 <code>hello.sh</code> 的 shell 脚本，里面只有一句话：<code>echo &#39;Hello Da Wang&#39;</code>，用作等下连接之后的测试</p>
<p>在初始化完毕后，通过公有 DNS 利用 SSH 来进行连接：</p>
<p>先把我们刚才写好的脚本文件传到 instance 中：<code>sudo scp -r -i demo.pem hello.sh  ec2-user@publicdns:\hello</code></p>
<p>然后就可以访问了：</p>
<p><img src="/images/cc2.jpg" alt="c"></p>
<p>可以看到已经远程执行了这个脚本，输出了 <code>Hello Da Wang</code></p>
<p>我们再来试试看从 EC2 拷贝文件到本机，我们在 hello 文件夹里创建一个 <code>info.txt</code>，随便输入点内容，然后用 <code>udo scp -r -i demo.pem ec2-user@publicdns:\hello/info.txt ./</code> 就可以传输回来。</p>
<p>这些都做完后，我们终止(terminate)这个 EC2 instance</p>
<h2 id="Simple_Storage_Service_28S3_29"><a href="#Simple_Storage_Service_28S3_29" class="headerlink" title="Simple Storage Service(S3)"></a>Simple Storage Service(S3)</h2><p>Amazon S3 提供了一个简单的用来存储和访问任何数据的 web 服务接口。可以存储的对象数量是无限的，每个对象都可以通过一个唯一的，由开发者指定的 key 来访问。</p>
<p>和常见的文件系统比较起来，S3 没有文件夹的概念，唯一的容器就是一个 bucket，但是文件名例可以有 <code>/</code> 来标记不同的层级。</p>
<p><a href="https://youtu.be/1qrjFb0ZTm8" target="_blank" rel="external">Amazon S3 入门视频（墙外）</a></p>
<p>主要介绍了如何创建/删除 bucket，添加/查看/移动/删除对象。基本的操作都比较简单，这里不介绍。</p>
<p>可以通过 web 界面，命令行工具和 API 三种方式来访问 S3。假设在 S3 中有一个文件的路径是</p>
<ul>
<li><code>s3://wdxtub/dawang.txt</code></li>
</ul>
<p>那么可以通过以下两种方式用 http 来访问：</p>
<ul>
<li><code>http://s3.amazonaws.com/wdxtub/dawang.txt</code></li>
<li><code>http://wdxtub.s3.amazonaws.com/dawang.txt</code></li>
</ul>
<p>其中 <code>wdxtub</code> 是 bucket 名，必须是全局唯一的。如果想要所有人都能够访问，需要设置一下对应的权限</p>
<h2 id="AWS_Command_Line_Tool__28aws-cli_29"><a href="#AWS_Command_Line_Tool__28aws-cli_29" class="headerlink" title="AWS Command Line Tool (aws-cli)"></a>AWS Command Line Tool (aws-cli)</h2><p>命令行工具可以最大程度的定制管理 AWS 的各种服务，linux 下的安装和操作可以看：</p>
<p><a href="https://youtu.be/OSGjoMeHc2A" target="_blank" rel="external">AWS 命令行工具指南（墙外）</a></p>
<p>在 Mac 下可以直接使用 <code>pip install awscli</code> 来进行安装，具体的教程可以参考<a href="https://aws.amazon.com/cn/cli/" target="_blank" rel="external">官方文档</a></p>
<h2 id="CloudWatch"><a href="#CloudWatch" class="headerlink" title="CloudWatch"></a>CloudWatch</h2><p>简单来说，CloudWatch 就是一个监控各种云服务的工具，可以参考下面的视频来了解：</p>
<p><a href="https://youtu.be/cu2_AbfXn2k" target="_blank" rel="external">AWS Cloudwatch</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开发过程中最麻烦的往往不是开发本身，而是环境搭建，尤其是调通各种接口和服务。这一讲会介绍 AWS 的基本使用。</p>]]>
    
    </summary>
    
      <category term="AWS" scheme="http://yoursite.com/tags/AWS/"/>
    
      <category term="CMU" scheme="http://yoursite.com/tags/CMU/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
  </entry>
  
</feed>
